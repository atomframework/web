{"repository_name":"github.com/onyxframework/http","body":"<a href=\"https://onyxframework.org\"><img width=\"100\" height=\"100\" src=\"https://onyxframework.org/img/logo.svg\"></a>\n\n# Onyx::HTTP\n\n[![Built with Crystal](https://img.shields.io/badge/built%20with-crystal-000000.svg?style=flat-square)](https://crystal-lang.org/)\n[![Travis CI build](https://img.shields.io/travis/onyxframework/http/master.svg?style=flat-square)](https://travis-ci.org/onyxframework/http)\n[![Docs](https://img.shields.io/badge/docs-online-brightgreen.svg?style=flat-square)](https://docs.onyxframework.org/http)\n[![API docs](https://img.shields.io/badge/api_docs-online-brightgreen.svg?style=flat-square)](https://api.onyxframework.org/http)\n[![Latest release](https://img.shields.io/github/release/onyxframework/http.svg?style=flat-square)](https://github.com/onyxframework/http/releases)\n\nAn opinionated framework for scalable web.\n\n## About 👋\n\nOnyx::HTTP is an opinionated HTTP framework for [Crystal language](https://crystal-lang.org/). It features DSL and modules to build modern, scalabale web applications with first-class support for websockets.\n\n## Installation 📥\n\nAdd these lines to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  onyx:\n    github: onyxframework/onyx\n    version: ~> 0.3.0\n  onyx-http:\n    github: onyxframework/http\n    version: ~> 0.7.0\n```\n\nThis shard follows [Semantic Versioning v2.0.0](http://semver.org/), so check [releases](https://github.com/onyxframework/http/releases) and change the `version` accordingly. Please visit [github.com/crystal-lang/shards](https://github.com/crystal-lang/shards) to know more about Crystal shards.\n\n## Usage 💻\n\nThe simplest hello world:\n\n```crystal\nrequire \"onyx/http\"\n\nOnyx.get \"/\" do |env|\n  env.response << \"Hello, world!\"\nend\n\nOnyx.listen\n```\n\nEncapsulated endpoints:\n\n```crystal\nstruct GetUser\n  include Onyx::HTTP::Endpoint\n\n  params do\n    path do\n      type id : Int32\n    end\n  end\n\n  errors do\n    type UserNotFound(404)\n  end\n\n  def call\n    user = Onyx.query(User.where(id: params.path.id)).first? # This code is part of onyx/sql\n    raise UserNotFound.new unless user\n\n    return UserView.new(user)\n  end\nend\n\nOnyx.get \"/users/:id\", GetUser\n```\n\nEncapsulated views:\n\n```crystal\nstruct UserView\n  include Onyx::HTTP::View\n\n  def initialize(@user : User)\n  end\n\n  json id: @user.id, name: @user.name\nend\n```\n\nWebsocket channels:\n\n```crystal\nstruct Echo\n  include Onyx::HTTP::Channel\n\n  def on_message(message)\n    socket.send(message)\n  end\nend\n\nOnyx.ws \"/\", Echo\n```\n\n## Documentation 📚\n\nThe documentation is available online at [docs.onyxframework.org/http](https://docs.onyxframework.org/http).\n\n## Community 🍪\n\nThere are multiple places to talk about Onyx:\n\n* [Gitter](https://gitter.im/onyxframework)\n* [Twitter](https://twitter.com/onyxframework)\n\n## Support ❤️\n\nThis shard is maintained by me, [Vlad Faust](https://vladfaust.com), a passionate developer with years of programming and product experience. I love creating Open-Source and I want to be able to work full-time on Open-Source projects.\n\nI will do my best to answer your questions in the free communication channels above, but if you want prioritized support, then please consider becoming my patron. Your issues will be labeled with your patronage status, and if you have a sponsor tier, then you and your team be able to communicate with me privately in [Twist](https://twist.com). There are other perks to consider, so please, don't hesistate to check my Patreon page:\n\n<a href=\"https://www.patreon.com/vladfaust\"><img height=\"50\" src=\"https://onyxframework.org/img/patreon-button.svg\"></a>\n\nYou could also help me a lot if you leave a star to this GitHub repository and spread the word about Crystal and Onyx! 📣\n\n## Contributing\n\n1. Fork it ( https://github.com/onyxframework/http/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'feat: some feature') using [Angular style commits](https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit)\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Vlad Faust](https://github.com/vladfaust) - creator and maintainer\n\n## Licensing\n\nThis software is licensed under [MIT License](LICENSE).\n\n[![Open Source Initiative](https://upload.wikimedia.org/wikipedia/commons/thumb/4/42/Opensource.svg/100px-Opensource.svg.png)](https://opensource.org/licenses/MIT)\n","program":{"html_id":"github.com/onyxframework/http/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/onyxframework/http","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/http/Exception","path":"Exception.html","kind":"class","full_name":"Exception","name":"Exception","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/ext/exception/status_message.cr","line_number":1,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/exception/status_message.cr"},{"filename":"onyx-http/ext/exception.cr","line_number":4,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/exception.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Error","kind":"class","full_name":"Onyx::HTTP::Error(Code)","name":"Error"},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Router/DuplicateRouteError","kind":"class","full_name":"Onyx::HTTP::Middleware::Router::DuplicateRouteError","name":"DuplicateRouteError"}],"including_types":[],"namespace":null,"doc":"Extensions to the standard `Exception` class.","summary":"<p>Extensions to the standard <code><a href=\"Exception.html\">Exception</a></code> class.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"status_message-instance-method","html_id":"status_message-instance-method","name":"status_message","doc":"The status message for this error. Returns its class name decorated as\nan HTTP status message, for example `\"User Not Found\"` for\n`MyEndpoint::UserNotFound` error.","summary":"<p>The status message for this error.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/exception/status_message.cr#L5","def":{"name":"status_message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{{ ((@type.name.split(\"::\")).last.underscore.split(\"_\")).map(&.capitalize).join(\" \") }}"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/http/HTTP","path":"HTTP.html","kind":"module","full_name":"HTTP","name":"HTTP","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-http/ext/http.cr","line_number":2,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/http.cr"},{"filename":"lib/http-params-serializable/src/http-params-serializable/annotations.cr","line_number":1,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/lib/http-params-serializable/src/http-params-serializable/annotations.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"The HTTP module contains `HTTP::Client`, `HTTP::Server` and `HTTP::WebSocket` implementations.","summary":"<p>The HTTP module contains <code>HTTP::Client</code>, <code><a href=\"HTTP/Server.html\">HTTP::Server</a></code> and <code>HTTP::WebSocket</code> implementations.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/http/HTTP/Request","path":"HTTP/Request.html","kind":"class","full_name":"HTTP::Request","name":"Request","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/ext/http/request.cr","line_number":4,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/http/request.cr"},{"filename":"onyx-http/ext/http/request/accept.cr","line_number":3,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/http/request/accept.cr"},{"filename":"onyx-http/ext/http/request/id.cr","line_number":1,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/http/request/id.cr"},{"filename":"onyx-http/ext/http/request/path_params.cr","line_number":1,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/http/request/path_params.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/HTTP","kind":"module","full_name":"HTTP","name":"HTTP"},"doc":"Extensions to the standard `HTTP::Request` class.","summary":"<p>Extensions to the standard <code><a href=\"../HTTP/Request.html\">HTTP::Request</a></code> class.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"accept:Array(MIME::MediaType)?-instance-method","html_id":"accept:Array(MIME::MediaType)?-instance-method","name":"accept","doc":"An lazy array of `MIME::MediaType` this request accepts\ndetermined by the `\"Accept\"` header or nil if it is empty.\nThe array is sorted by the [q-factor](https://developer.mozilla.org/en-US/docs/Glossary/quality_values).","summary":"<p>An lazy array of <code>MIME::MediaType</code> this request accepts determined by the <code>\"Accept\"</code> header or nil if it is empty.</p>","abstract":false,"args":[],"args_string":" : Array(MIME::MediaType)?","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/http/request/accept.cr#L9","def":{"name":"accept","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(MIME::MediaType) | Nil","visibility":"Public","body":"@accept || (@accept = (if header = headers[\"Accept\"]?\n  (header.split(\",\")).map do |a|\n    MIME::MediaType.parse(a)\n  end.sort do |a, b|\n    (b[\"q\"]?.try(&.to_f) || 1.0) <=> (a[\"q\"]?.try(&.to_f) || 1.0)\n  end\nend))"}},{"id":"id:String?-instance-method","html_id":"id:String?-instance-method","name":"id","doc":"A request ID. Can be set by `Onyx::REST::RequestID`.","summary":"<p>A request ID.</p>","abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/http/request/id.cr#L5","def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@id"}},{"id":"id=(id:String?)-instance-method","html_id":"id=(id:String?)-instance-method","name":"id=","doc":"A request ID. Can be set by `Onyx::REST::RequestID`.","summary":"<p>A request ID.</p>","abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String | ::Nil"}],"args_string":"(id : String?)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/http/request/id.cr#L9","def":{"name":"id=","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@id = id"}},{"id":"path_params:Hash(String,String)-instance-method","html_id":"path_params:Hash(String,String)-instance-method","name":"path_params","doc":"A hash containing path params (extracted from the request's path).\nIt's automatically set when routing with `Onyx::REST::Router`, empty by default.\n\nFor example, request with path `\"/user/42/edit\"` is\nrouted with `put \"/user/:id/edit\"` will have `{\"id\" => \"42\"}` path params.\n\nNOTE: You must not modify this hash values directly (e.g. `req.path_params[\"foo\"] = \"bar\"`).\nTODO: Make this hash immutable.","summary":"<p>A hash containing path params (extracted from the request's path).</p>","abstract":false,"args":[],"args_string":" : Hash(String, String)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/http/request/path_params.cr#L16","def":{"name":"path_params","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, String)","visibility":"Public","body":"@path_params"}},{"id":"path_params=(path_params:Hash(String,String))-instance-method","html_id":"path_params=(path_params:Hash(String,String))-instance-method","name":"path_params=","doc":"A hash containing path params (extracted from the request's path).\nIt's automatically set when routing with `Onyx::REST::Router`, empty by default.\n\nFor example, request with path `\"/user/42/edit\"` is\nrouted with `put \"/user/:id/edit\"` will have `{\"id\" => \"42\"}` path params.\n\nNOTE: You must not modify this hash values directly (e.g. `req.path_params[\"foo\"] = \"bar\"`).\nTODO: Make this hash immutable.","summary":"<p>A hash containing path params (extracted from the request's path).</p>","abstract":false,"args":[{"name":"path_params","doc":null,"default_value":"","external_name":"path_params","restriction":"Hash(String, String)"}],"args_string":"(path_params : Hash(String, String))","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/http/request/path_params.cr#L20","def":{"name":"path_params=","args":[{"name":"path_params","doc":null,"default_value":"","external_name":"path_params","restriction":"Hash(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@path_params = path_params"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/http/HTTP/Server","path":"HTTP/Server.html","kind":"class","full_name":"HTTP::Server","name":"Server","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/ext/http/server.cr","line_number":4,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/http/server.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Server","kind":"class","full_name":"Onyx::HTTP::Server","name":"Server"}],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/HTTP","kind":"module","full_name":"HTTP","name":"HTTP"},"doc":"Extensions to the standard `HTTP::Server` class.","summary":"<p>Extensions to the standard <code><a href=\"../HTTP/Server.html\">HTTP::Server</a></code> class.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/http/HTTP/Server/Response","path":"HTTP/Server/Response.html","kind":"class","full_name":"HTTP::Server::Response","name":"Response","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/IO","kind":"class","full_name":"IO","name":"IO"},"ancestors":[{"html_id":"github.com/onyxframework/http/IO","kind":"class","full_name":"IO","name":"IO"},{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/ext/http/server/response.cr","line_number":4,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/http/server/response.cr"},{"filename":"onyx-http/ext/http/server/response/error.cr","line_number":3,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/http/server/response/error.cr"},{"filename":"onyx-http/ext/http/server/response/view.cr","line_number":4,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/http/server/response/view.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/HTTP/Server","kind":"class","full_name":"HTTP::Server","name":"Server"},"doc":"Extensions to the standard `HTTP::Server::Response` class.","summary":"<p>Extensions to the standard <code><a href=\"../../HTTP/Server/Response.html\">HTTP::Server::Response</a></code> class.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"error:Exception?-instance-method","html_id":"error:Exception?-instance-method","name":"error","doc":"A rescued error which is likely to be put into the response output.","summary":"<p>A rescued error which is likely to be put into the response output.</p>","abstract":false,"args":[],"args_string":" : Exception?","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/http/server/response/error.cr#L7","def":{"name":"error","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Exception | ::Nil","visibility":"Public","body":"@error"}},{"id":"error=(error:Exception?)-instance-method","html_id":"error=(error:Exception?)-instance-method","name":"error=","doc":"A rescued error which is likely to be put into the response output.","summary":"<p>A rescued error which is likely to be put into the response output.</p>","abstract":false,"args":[{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Exception | ::Nil"}],"args_string":"(error : Exception?)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/http/server/response/error.cr#L11","def":{"name":"error=","args":[{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Exception | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@error = error"}},{"id":"view:Onyx::HTTP::View?-instance-method","html_id":"view:Onyx::HTTP::View?-instance-method","name":"view","doc":"A view to render.","summary":"<p>A view to render.</p>","abstract":false,"args":[],"args_string":" : Onyx::HTTP::View?","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/http/server/response/view.cr#L8","def":{"name":"view","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Onyx::HTTP::View | ::Nil","visibility":"Public","body":"@view"}},{"id":"view=(view:Onyx::HTTP::View?)-instance-method","html_id":"view=(view:Onyx::HTTP::View?)-instance-method","name":"view=","doc":"A view to render.","summary":"<p>A view to render.</p>","abstract":false,"args":[{"name":"view","doc":null,"default_value":"","external_name":"view","restriction":"Onyx::HTTP::View | ::Nil"}],"args_string":"(view : Onyx::HTTP::View?)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/ext/http/server/response/view.cr#L12","def":{"name":"view=","args":[{"name":"view","doc":null,"default_value":"","external_name":"view","restriction":"Onyx::HTTP::View | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@view = view"}}],"macros":[],"types":[]}]}]},{"html_id":"github.com/onyxframework/http/Onyx","path":"Onyx.html","kind":"module","full_name":"Onyx","name":"Onyx","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-http.cr","line_number":1,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP","path":"Onyx/HTTP.html","kind":"module","full_name":"Onyx::HTTP","name":"HTTP","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-http.cr","line_number":3,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http.cr"},{"filename":"onyx-http/error.cr","line_number":1,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/error.cr"},{"filename":"onyx-http/server.cr","line_number":3,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/server.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx","kind":"module","full_name":"Onyx","name":"Onyx"},"doc":"HTTP framework.","summary":"<p>HTTP framework.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Channel","path":"Onyx/HTTP/Channel.html","kind":"module","full_name":"Onyx::HTTP::Channel","name":"Channel","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Endpoint","kind":"module","full_name":"Onyx::HTTP::Endpoint","name":"Endpoint"},{"html_id":"github.com/onyxframework/http/Callbacks","kind":"module","full_name":"Callbacks","name":"Callbacks"}],"locations":[{"filename":"onyx-http/channel.cr","line_number":84,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/channel.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Endpoint","kind":"module","full_name":"Onyx::HTTP::Endpoint","name":"Endpoint"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP","kind":"module","full_name":"Onyx::HTTP","name":"HTTP"},"doc":"A websocket HTTP Channel.\n\nChannel instance is bind to a websocket instance, calling `#on_open`, `#on_message`,\n`#on_binary`, `#on_ping`, `#on_pong` and `#on_close` callbacks\non according socket event. You are expected to re-define these methods.\n\nChannel includes the `Endpoint` module.\n\n## Params\n\nChannel params can be defined with the `Endpoint.params` macro. The params are\nchecked **before** the request is upgraded to a websocket, raising a default 400\nHTTP error if something is wrong.\n\n## Errors\n\nChannel errors can be defined with the `Endpoint.errors` macro. They can be raised\nwhen the request is not upgraded yet (by overriding default `#call` method or in callbacks),\nor when it is already a websocket.\n\nSome considertations when raising when already upgraded:\n\n* Error codes must be in 4000-4999 range to conform with [standards](https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Properties)\n* Error message length must be less than or equal to 123 characters\n* `HTTP::Error`s are rescued and handled internally in a `Channel`,\nproperly closing the socket, so you do not need a rescuer there\n\n## Example\n\n```\nclass Channels::Echo\n  include Onyx::HTTP::Channel\n\n  params do\n    query do\n      # Would raise 400 HTTP error before upgrading if username is missing\n      type username : String\n\n      # Would raise 400 HTTP error before upgrading if secret is missing or of invalid type\n      type secret : Int32\n    end\n  end\n\n  errors do\n    # Expected to be raised before the request is upgraded\n    type UsernameTaken(403)\n\n    # Expected to be raised when the request is already upgraded to a websocket\n    type InvalidSecret(4003)\n  end\n\n  before do\n    # Return 403 HTTP error without upgrading to a websocket\n    raise UsernameTaken.new if params.query.username == \"Vlad\"\n  end\n\n  def on_open\n    unless params.query.secret == 42\n      # Close websocket with 4003 code and \"Invalid Secret\" reason\n      raise InvalidSecret.new\n    end\n  end\n\n  def on_message(message)\n    socket.send(message)\n  end\nend\n```\n\nRouter example:\n\n```\nrouter = Onyx::HTTP::Router.new do\n  ws \"/\", Channels::Echo\n  # Equivalent of\n  ws \"/\" do |context|\n    channel.call(context)\n  end\nend\n```","summary":"<p>A websocket HTTP Channel.</p>","class_methods":[{"id":"call(context)-class-method","html_id":"call(context)-class-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/channel.cr#L85","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"instance = new(context)\ninstance.with_callbacks do\n  instance.call\nend\n"}}],"constructors":[],"instance_methods":[{"id":"call-instance-method","html_id":"call-instance-method","name":"call","doc":"By default calls `#upgrade`, which upgrades the request to\na websocket and then calls `#bind`.","summary":"<p>By default calls <code>#upgrade</code>, which upgrades the request to a websocket and then calls <code>#bind</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/channel.cr#L89","def":{"name":"call","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"upgrade do |socket|\n  bind(socket)\nend"}},{"id":"on_binary(binary)-instance-method","html_id":"on_binary(binary)-instance-method","name":"on_binary","doc":"Called when the socket receives a binary message from client.","summary":"<p>Called when the socket receives a binary message from client.</p>","abstract":false,"args":[{"name":"binary","doc":null,"default_value":"","external_name":"binary","restriction":""}],"args_string":"(binary)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/channel.cr#L115","def":{"name":"on_binary","args":[{"name":"binary","doc":null,"default_value":"","external_name":"binary","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Endpoint","path":"Onyx/HTTP/Endpoint.html","kind":"module","full_name":"Onyx::HTTP::Endpoint","name":"Endpoint","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/onyxframework/http/Callbacks","kind":"module","full_name":"Callbacks","name":"Callbacks"}],"locations":[{"filename":"onyx-http/endpoint/errors.cr","line_number":1,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/endpoint/errors.cr"},{"filename":"onyx-http/endpoint/params/form.cr","line_number":4,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/endpoint/params/form.cr"},{"filename":"onyx-http/endpoint/params/json.cr","line_number":4,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/endpoint/params/json.cr"},{"filename":"onyx-http/endpoint/params/path.cr","line_number":4,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/endpoint/params/path.cr"},{"filename":"onyx-http/endpoint/params/query.cr","line_number":4,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/endpoint/params/query.cr"},{"filename":"onyx-http/endpoint/params.cr","line_number":3,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/endpoint/params.cr"},{"filename":"onyx-http/endpoint.cr","line_number":61,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/endpoint.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/onyxframework/http/Callbacks","kind":"module","full_name":"Callbacks","name":"Callbacks"}],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Channel","kind":"module","full_name":"Onyx::HTTP::Channel","name":"Channel"}],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP","kind":"module","full_name":"Onyx::HTTP","name":"HTTP"},"doc":"An encapsulated HTTP endpoint.\n\nYou can modify the response as you want as you still have an access to\nthe current `context`. However, it's a good practice to split business and\nrendering logic. For this, a endpoint should return a `View` instance or\ncall the `#view` method.\n\nEndpoint params can be defined with the `Endpoint.params` macro (param errors have code 400\nfor default endpoints and 4000 for `Channel`s).\nEndpoint errors can be defined with the `Endpoint.errors` macro.\n\nEndpoints also include `Callbacks` module, effectively allowing to define\n`.before` and `.after` callbacks, which would be invoked before and after `#call`.\nRead more about callbacks at [https://github.com/vladfaust/callbacks.cr](https://github.com/vladfaust/callbacks.cr).\n\n```\nstruct Endpoints::GetUser\n  include Onyx::HTTP::Endpoint\n\n  params do\n    path do\n      type id : Int32\n    end\n  end\n\n  errors do\n    type UserNotFound(404), id : Int32\n  end\n\n  def call\n    user = find_user(path_params.id)\n    raise UserNotFound.new(path_params.id) unless user\n    return Views::User.new(user)\n  end\nend\n\nEndpoints::GetUser.call(env) # => Views::User instance, if not raised either Params::Error or UserNotFound\n```\n\nRouter example:\n\n```\nrouter = Onyx::HTTP::Router.new do\n  get \"/\", Endpoints::GetUser\n  # Equivalent of\n  get \"/\" do |context|\n    view? = Endpoints::GetUser.call(context)\n\n    if view = view?.as?(HTTP::View)\n      context.response.view ||= view\n    end\n  end\nend\n```","summary":"<p>An encapsulated HTTP endpoint.</p>","class_methods":[],"constructors":[{"id":"new(context:HTTP::Server::Context)-class-method","html_id":"new(context:HTTP::Server::Context)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::HTTP::Server::Context"}],"args_string":"(context : HTTP::Server::Context)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/endpoint.cr#L77","def":{"name":"new","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::HTTP::Server::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(context)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"after-instance-method","html_id":"after-instance-method","name":"after","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/endpoint.cr#L62","def":{"name":"after","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"before-instance-method","html_id":"before-instance-method","name":"before","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/endpoint.cr#L62","def":{"name":"before","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"call-instance-method","html_id":"call-instance-method","name":"call","doc":"Where all the action takes place.","summary":"<p>Where all the action takes place.</p>","abstract":true,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/endpoint.cr#L65","def":{"name":"call","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"view(view:View)-instance-method","html_id":"view(view:View)-instance-method","name":"view","doc":"Set a *view* for this request. It takes precendence over the return value:\n\n```\ndef call\n  view(ViewA.new)\n  view(ViewB.new)\n  return ViewC.new\nend\n\n# The resulting view is ViewB\n```","summary":"<p>Set a <em>view</em> for this request.</p>","abstract":false,"args":[{"name":"view","doc":null,"default_value":"","external_name":"view","restriction":"View"}],"args_string":"(view : View)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/endpoint.cr#L91","def":{"name":"view","args":[{"name":"view","doc":null,"default_value":"","external_name":"view","restriction":"View"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.response.view = view"}}],"macros":[{"id":"errors(&block)-macro","html_id":"errors(&amp;block)-macro","name":"errors","doc":"Optional errors definition macro. It's a DSL for defining *expected* errors,\nsuch as \"User Not Found\" -- it's not an exception, but it should halt the request execution.\nAll defined errors will be ancestors of `HTTP::Error`, allowing them to be effectively\nhandled in `HTTP::Rescuers::HTTP`. Note that `Channel`s rescue `HTTP::Error` by themselves,\nyou don't need a rescuer in this case.\n\n```\nstruct MyAction\n  include Onyx::HTTP::Action\n\n  errors do\n    type UserNotFound(404)\n\n    # This error has variable `attributes` and custom block called on initialization\n    type InvalidUser(409), attributes : Hash(String, String) do\n      # All errors inherit from Exception, so `super` sets the error message\n      super(\"User has invalid attributes: #{attributes}\")\n    end\n  end\n\n  def call\n    raise UserNotFound.new\n    raise InvalidUser.new({\"name\" => \"too short\"})\n  rescue e : UserNotFound\n    # NOTE: These rescue blocks are for example purposes only,\n    # you should not rescue the errors *here* in real applications, leave it to Rescuers\n\n    pp e.code    # => 404\n    pp e.payload # => nil\n    pp e.message # => nil\n  rescue e : InvalidUser\n    pp e.code    # => 409\n    pp e.payload # => {attributes: {\"name\" => \"too short\"}}\n    pp e.message # => \"User has invalid attributes: {\\\"name\\\" => \\\"too short\\\"}\"\n  end\nend\n```","summary":"<p>Optional errors definition macro.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/endpoint/errors.cr#L194","def":{"name":"errors","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    \n{% if block && block.body %}{% else %}\n      {% raise(\"Expected `errors` macro to be called with a block.\\n\\n\\e[32m✔\\e[39m️ Valid code:\\n\\n  errors \\e[32mdo\\n    type NotFound(404)\\n  end\\e[39m\") %}\n    {% end %}\n\n\n    \n{% if block.body.is_a?(Call) %}\n      define_error({{ block.body }})\n    {% else %}{% if block.body.is_a?(Expressions) %}\n      {% for exp in block.body.expressions %}\n        define_error({{ exp }})\n      {% end %}\n    {% else %}\n      {% raise(\"Expected an `errors` macro call contain errors defintions.\\n\\n\\e[31m✘\\e[39m️ Your code:\\n\\n  errors do\\n    \\e[31m#{(yield).id}\\e[39m\\n  end\\n\\n\\e[32m✔\\e[39m️ Valid code:\\n\\n  errors do\\n    \\e[32mtype NotFound(404)\\e[39m\\n  end\") %}\n    {% end %}{% end %}\n\n  \n"}},{"id":"form(requirerequired=false,&block)-macro","html_id":"form(requirerequired=false,&amp;block)-macro","name":"form","doc":"Define form params which would be deserialzed from the request body only if\nits \"Content-Type\" header is \"application/x-www-form-urlencoded\". The serialization is powered by [`HTTP::Params::Serializable`](https://github.com/vladfaust/http-params-serializable).\n\n## Options\n\n* `require` -- if set to `true`, will attempt to parse form params regardless\nof the `\"Content-Type\"` header and return a parameter error otherwise; the `params.form`\ngetter becomes non-nilable\n\n## Example\n\n```\nstruct UpdateUser\n  include Onyx::HTTP::Endpoint\n\n  params do\n    path do\n      type id : Int32\n    end\n\n    form do\n      type user do\n        type email : String?\n        type username : String?\n      end\n    end\n  end\n\n  def call\n    if form = params.form\n      pp! form.user.email\n      pp! form.user.username\n    end\n  end\nend\n```\n\n```shell\n> curl -X POST -H \"Content-Type: application/x-www-form-urlencoded\" -d \"user[email]=foo@example.com\" http://localhost:5000/users/42\nform.user.email    => \"foo@example.com\"\nform.user.username => nil\n```\n\nIf your endpoint expects form params only, then it can be simplified a bit:\n\n```\nstruct UpdateUser\n  include Onyx::HTTP::Endpoint\n\n  params do\n    path do\n      type id : Int32\n    end\n\n    form require: true do\n      type user do\n        type email : String?\n        type username : String?\n      end\n    end\n  end\n\n  def call\n    pp! params.form.user.email\n    pp! params.form.user.username\n  end\nend\n```\n\n```shell\n> curl -X POST -d \"user[email]=foo@example.com\" http://localhost:5000/users/42\n```","summary":"<p>Define form params which would be deserialzed from the request body only if its \"Content-Type\" header is \"application/x-www-form-urlencoded\".</p>","abstract":false,"args":[{"name":"required","doc":null,"default_value":"false","external_name":"require","restriction":""}],"args_string":"(require required = <span class=\"n\">false</span>, &block)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/endpoint/params/form.cr#L77","def":{"name":"form","args":[{"name":"required","doc":null,"default_value":"false","external_name":"require","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    class FormError < Onyx::HTTP::Error(400)\n      def initialize(message : String, @path : Array(String))\n        super(message)\n      \nend\n\n      def payload\n        \n{path: @path}\n      \nend\n    \nend\n\n    struct Form\n      include ::HTTP::Params::Serializable\n\n      \n{% verbatim do %}\n        macro type(argument, nilable = false, **options, &block)\n          {% if block %}\n            {% if options.empty? %}{% else %}\n              @[::HTTP::Param({{ **options }})]\n            {% end %}\n\n            {% if argument.is_a?(Path) %}\n              {% if argument.names.size > 1\n  raise(\"Cannot declare namespaced nested query parameter\")\nend %}\n\n              getter {{ argument.names.first.underscore }} : {{ argument.names.first.camelcase.id }}{{ if nilable\n  \" | Nil\".id\nend }}\n            {% else %}{% if argument.is_a?(Call) %}\n              getter {{ argument.name.underscore }} : {{ argument.name.camelcase.id }}{{ if nilable\n  \" | Nil\".id\nend }}\n            {% else %}\n              {% raise(\"BUG: Unhandled argument type #{argument.class_name}\") %}\n            {% end %}{% end %}\n\n            {% if argument.is_a?(Path) %}\n              struct {{ argument.names.first.camelcase.id }}\n            {% else %}{% if argument.is_a?(Call) %}\n              struct {{ argument.name.camelcase.id }}\n            {% end %}{% end %}\n              include ::HTTP::Params::Serializable\n\n              {% if block.body.is_a?(Expressions) %}\n                {% for expression in block.body.expressions %}\n                  Form.{{ expression }}\n                {% end %}\n              {% else %}{% if block.body.is_a?(Call) %}\n                Form.{{ (yield).id }}\n              {% else %}\n                {% raise(\"BUG: Unhandled block body type #{block.body.class_name}\") %}\n              {% end %}{% end %}\n            end\n          {% else %}{% if argument.is_a?(TypeDeclaration) %}\n            {% if options.empty? %}{% else %}\n              @[::HTTP::Param({{ **options }})]\n            {% end %}\n\n            getter {{ argument }}\n          {% else %}\n            {% raise(\"BUG: Unhandled argument type #{argument.class_name}\") %}\n          {% end %}{% end %}\n        end\n      {% end %}\n\n\n      \n{{ (yield).id }}\n\n    \nend\n\n    \n{% if required %}\n      getter! form  : Form\n    {% else %}\n      getter form  : Form?\n    {% end %}\n\n\n    def initialize(request : ::HTTP::Request)\n      previous_def\n\n      \n{% if true %}\n        begin\n          {% if required %}{% else %}\n            if request.headers[\"Content-Type\"]?.try &.=~ /^application\\/x-www-form-urlencoded/\n          {% end %}\n            if body = request.body\n              @form = Form.from_query(body.gets_to_end)\n            else\n              raise FormError.new(\"Missing request body\", [] of String)\n            end\n          {% if required %}{% else %}\n            end\n          {% end %}\n        rescue ex : ::HTTP::Params::Serializable::Error\n          raise FormError.new(\"Form p\" + ex.message.not_nil![1..-1], ex.path)\n        end\n      {% end %}\n\n    \nend\n  \n"}},{"id":"json(requirerequired=false,&block)-macro","html_id":"json(requirerequired=false,&amp;block)-macro","name":"json","doc":"Define JSON params which would be deserialized from the request body only if\nits \"Content-Type\" header is \"application/json\". The serialization is powered by\nstdlib's [`JSON::Serializable`](https://crystal-lang.org/api/latest/JSON/Serializable.html).\n\n## Options\n\n* `require` -- if set to `true`, will attempt to parse JSON params regardless\nof the `\"Content-Type\"` header and return a parameter error otherwise; the `params.json`\ngetter becomes non-nilable\n\n## Example\n\n```\nstruct UpdateUser\n  include Onyx::HTTP::Endpoint\n\n  params do\n    path do\n      type id : Int32\n    end\n\n    json do\n      type user do\n        type email : String?\n        type username : String?\n      end\n    end\n  end\n\n  def call\n    if json = params.json\n      pp! json.user.email\n      pp! json.user.username\n    end\n  end\nend\n```\n\n```shell\n> curl -X POST -H \"Content-Type: application/json\" -d '{\"user\":{\"email\":\"foo@example.com\"}}' http://localhost:5000/users/1\njson.user.email    => \"foo@example.com\"\njson.user.username => nil\n```\n\nIf your endpoint expects JSON params only, then it can be simplified a bit:\n\n```\nstruct UpdateUser\n  include Onyx::HTTP::Endpoint\n\n  params do\n    path do\n      type id : Int32\n    end\n\n    json require: true do\n      type user do\n        type email : String?\n        type username : String?\n      end\n    end\n  end\n\n  def call\n    pp! params.json.user.email\n    pp! params.json.user.username\n  end\nend\n```\n\n```shell\n> curl -X POST -d '{\"user\":{\"email\":\"foo@example.com\"}}' http://localhost:5000/users/1\n```","summary":"<p>Define JSON params which would be deserialized from the request body only if its \"Content-Type\" header is \"application/json\".</p>","abstract":false,"args":[{"name":"required","doc":null,"default_value":"false","external_name":"require","restriction":""}],"args_string":"(require required = <span class=\"n\">false</span>, &block)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/endpoint/params/json.cr#L78","def":{"name":"json","args":[{"name":"required","doc":null,"default_value":"false","external_name":"require","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    class JSONError < Onyx::HTTP::Error(400)\n    \nend\n\n    struct JSON\n      include ::JSON::Serializable\n\n      \n{% verbatim do %}\n        macro type(argument, nilable = false, **options, &block)\n          {% if block %}\n            {% if options.empty? %}{% else %}\n              @[::JSON::Field({{ **options }})]\n            {% end %}\n\n            {% if argument.is_a?(Path) %}\n              {% if argument.names.size > 1\n  raise(\"Cannot declare namespaced nested query parameter\")\nend %}\n\n              getter {{ argument.names.first.underscore }} : {{ argument.names.first.camelcase.id }}{{ if nilable\n  \" | Nil\".id\nend }}\n            {% else %}{% if argument.is_a?(Call) %}\n              getter {{ argument.name.underscore }} : {{ argument.name.camelcase.id }}{{ if nilable\n  \" | Nil\".id\nend }}\n            {% else %}\n              {% raise(\"BUG: Unhandled argument type #{argument.class_name}\") %}\n            {% end %}{% end %}\n\n            {% if argument.is_a?(Path) %}\n              struct {{ argument.names.first.camelcase.id }}\n            {% else %}{% if argument.is_a?(Call) %}\n              struct {{ argument.name.camelcase.id }}\n            {% end %}{% end %}\n              include ::JSON::Serializable\n\n              {% if block.body.is_a?(Expressions) %}\n                {% for expression in block.body.expressions %}\n                  JSON.{{ expression }}\n                {% end %}\n              {% else %}{% if block.body.is_a?(Call) %}\n                JSON.{{ (yield).id }}\n              {% else %}\n                {% raise(\"BUG: Unhandled block body type #{block.body.class_name}\") %}\n              {% end %}{% end %}\n            end\n          {% else %}{% if argument.is_a?(TypeDeclaration) %}\n            {% if options.empty? %}{% else %}\n              @[::JSON::Field({{ **options }})]\n            {% end %}\n\n            getter {{ argument }}\n          {% else %}\n            {% raise(\"BUG: Unhandled argument type #{argument.class_name}\") %}\n          {% end %}{% end %}\n        end\n      {% end %}\n\n\n      \n{{ (yield).id }}\n\n    \nend\n\n    \n{% if required %}\n      getter! json  : JSON\n    {% else %}\n      getter json  : JSON?\n    {% end %}\n\n\n    def initialize(request : HTTP::Request)\n      previous_def\n\n      \n{% if true %}\n        begin\n          {% if required %}{% else %}\n            if request.headers[\"Content-Type\"]?.try &.=~ /^application\\/json/\n          {% end %}\n            if body = request.body\n              @json = JSON.from_json(body.gets_to_end)\n            else\n              raise JSONError.new(\"Missing request body\")\n            end\n          {% if required %}{% else %}\n            end\n          {% end %}\n        rescue ex : ::JSON::MappingError\n          raise JSONError.new(ex.message.not_nil!.lines.first)\n        end\n      {% end %}\n\n    \nend\n  \n"}},{"id":"params(&block)-macro","html_id":"params(&amp;block)-macro","name":"params","doc":"Define endpoint params. You should call `.path`, `.query`, `.form` and `.json` macros\nwithin the block. Once `.params` is called, a `#params` getter would be set on every\nendpoint initialization. The `#params` variable would have according `#path`, `#query`,\n`#form` and `#json` getters itself.\n\nIt is powered by [`HTTP::Params::Serializable`](https://github.com/vladfaust/http-params-serializable),\nand it can raise `PathParamsError`, `QueryParamsError`, `FormBodyError` or `JSONBodyError`,\nwhich all are `HTTP::Error`s with 400 code.","summary":"<p>Define endpoint params.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/endpoint/params.cr#L12","def":{"name":"params","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    struct Params\n      def initialize(request : ::HTTP::Request)\n      \nend\n\n      \n{% if block.body.is_a?(Expressions) %}\n        {% for expression in block.body.expressions %}\n          Onyx::HTTP::Endpoint.{{ expression }}\n        {% end %}\n      {% else %}{% if block.body.is_a?(Call) %}\n        Onyx::HTTP::Endpoint.{{ (yield).id }}\n      {% else %}\n        {% raise(\"BUG: Unhandled block body type #{block.body.class_name}\") %}\n      {% end %}{% end %}\n\n    \nend\n\n    protected getter params : Params\n\n    def initialize(@context : ::HTTP::Server::Context)\n      \n{% if @type.overrides?(Onyx::HTTP::Endpoint, \"initialize\") %}\n        previous_def\n      {% else %}\n        super\n      {% end %}\n\n\n      @params = Params.new(@context.request)\n    \nend\n  \n"}},{"id":"path(&block)-macro","html_id":"path(&amp;block)-macro","name":"path","doc":"Define path params which are usually extracted from the request URL by `Onyx::HTTP::Router`.\nSerialization is powered by [`HTTP::Params::Serializable`](https://github.com/vladfaust/http-params-serializable).\n\nNOTE: It does **not** extracts params from URL by itself, you need to have a router which\nextracts path params into the `request.path_params` variable, for example,\n`Onyx::HTTP::Router`; this code only *deserializes* them.\n\nPath params do not support neither nested nor array values.\n\n```\nstruct GetUser\n  include Onyx::HTTP::Endpoint\n\n  params do\n    path do\n      type id : Int32\n    end\n  end\n\n  def call\n    pp! params.path.id\n  end\nend\n```\n\n```shell\n> curl http://localhost:5000/users/1\nparams.path.id => 1\n```","summary":"<p>Define path params which are usually extracted from the request URL by <code>Onyx::HTTP::Router</code>.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/endpoint/params/path.cr#L34","def":{"name":"path","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    class PathParamsError < Onyx::HTTP::Error(400)\n      def initialize(message : String, @path : Array(String))\n        super(message)\n      \nend\n\n      def payload\n        \n{path: @path}\n      \nend\n    \nend\n\n    struct PathParams\n      include ::HTTP::Params::Serializable\n\n      \n{% verbatim do %}\n        macro type(argument, **options, &block)\n          {% if block %}\n            {% raise(\"Path params do not support nesting\") %}\n          {% else %}{% if argument.is_a?(TypeDeclaration) %}\n            {% if options.empty? %}{% else %}\n              @[::HTTP::Param({{ **options }})]\n            {% end %}\n\n            getter {{ argument }}\n          {% else %}\n            {% raise(\"BUG: Unhandled argument type #{argument.class_name}\") %}\n          {% end %}{% end %}\n        end\n      {% end %}\n\n\n      \n{{ (yield).id }}\n\n    \nend\n\n    @path = uninitialized PathParams\n    getter path\n\n    def initialize(request : ::HTTP::Request)\n      previous_def\n\n      @path = uninitialized PathParams\n\n      begin\n        @path = PathParams.from_query(request.path_params.join('&')\n{ |(k, v)| \"#{k}=#{v}\" })\n      rescue \nex : ::HTTP::Params::Serializable::Error\n        raise PathParamsError.new(\"Path p\" + \nex.message.not_nil![1..-1], \nex.path)\n      \nend\n    \nend\n  \n"}},{"id":"query(&block)-macro","html_id":"query(&amp;block)-macro","name":"query","doc":"Define query params for serialization powered by [`HTTP::Params::Serializable`](https://github.com/vladfaust/http-params-serializable).\n\n```\nstruct IndexUsers\n  include Onyx::HTTP::Endpoint\n\n  params do\n    query do\n      type limit : Int32? = 10\n      type offset : Int32? = 0\n    end\n  end\n\n  def call\n    pp! params.query.limit\n    pp! params.query.offset\n  end\nend\n```\n\n```shell\n> curl http://localhost:5000/users?offset=5\nparams.query.limit  => 10\nparams.query.offset => 5\n```","summary":"<p>Define query params for serialization powered by <a href=\"https://github.com/vladfaust/http-params-serializable\" target=\"_blank\"><code>HTTP::Params::Serializable</code></a>.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/endpoint/params/query.cr#L30","def":{"name":"query","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    class QueryParamsError < Onyx::HTTP::Error(400)\n      def initialize(message : String, @path : Array(String))\n        super(message)\n      \nend\n\n      def payload\n        \n{path: @path}\n      \nend\n    \nend\n\n    struct QueryParams\n      include ::HTTP::Params::Serializable\n\n      \n{% verbatim do %}\n        macro type(argument, nilable = false, **options, &block)\n          {% if block %}\n            {% if options.empty? %}{% else %}\n              @[::HTTP::Param({{ **options }})]\n            {% end %}\n\n            {% if argument.is_a?(Path) %}\n              {% if argument.names.size > 1\n  raise(\"Cannot declare namespaced nested query parameter\")\nend %}\n\n              getter {{ argument.names.first.underscore }} : {{ argument.names.first.camelcase.id }}{{ if nilable\n  \" | Nil\".id\nend }}\n            {% else %}{% if argument.is_a?(Call) %}\n              getter {{ argument.name.underscore }} : {{ argument.name.camelcase.id }}{{ if nilable\n  \" | Nil\".id\nend }}\n            {% else %}\n              {% raise(\"BUG: Unhandled argument type #{argument.class_name}\") %}\n            {% end %}{% end %}\n\n            {% if argument.is_a?(Path) %}\n              struct {{ argument.names.first.camelcase.id }}\n            {% else %}{% if argument.is_a?(Call) %}\n              struct {{ argument.name.camelcase.id }}\n            {% end %}{% end %}\n              include ::HTTP::Params::Serializable\n\n              {% if block.body.is_a?(Expressions) %}\n                {% for expression in block.body.expressions %}\n                  QueryParams.{{ expression }}\n                {% end %}\n              {% else %}{% if block.body.is_a?(Call) %}\n                QueryParams.{{ (yield).id }}\n              {% else %}\n                {% raise(\"BUG: Unhandled block body type #{block.body.class_name}\") %}\n              {% end %}{% end %}\n            end\n          {% else %}{% if argument.is_a?(TypeDeclaration) %}\n            {% if options.empty? %}{% else %}\n              @[::HTTP::Param({{ **options }})]\n            {% end %}\n\n            getter {{ argument }}\n          {% else %}\n            {% raise(\"BUG: Unhandled argument type #{argument.class_name}\") %}\n          {% end %}{% end %}\n        end\n      {% end %}\n\n\n      \n{{ (yield).id }}\n\n    \nend\n\n    @query = uninitialized QueryParams\n    getter query\n\n    def initialize(request : ::HTTP::Request)\n      previous_def\n\n      @query = uninitialized QueryParams\n\n      begin\n        @query = QueryParams.from_query(request.query.to_s)\n      rescue \nex : ::HTTP::Params::Serializable::Error\n        raise QueryParamsError.new(\"Query p\" + \nex.message.not_nil![1..-1], \nex.path)\n      \nend\n    \nend\n  \n"}}],"types":[]},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Error","path":"Onyx/HTTP/Error.html","kind":"class","full_name":"Onyx::HTTP::Error(Code)","name":"Error","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/onyxframework/http/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/error.cr","line_number":27,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/error.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Router/BadRequest","kind":"class","full_name":"Onyx::HTTP::Middleware::Router::BadRequest","name":"BadRequest"},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Router/MethodNotAllowed","kind":"class","full_name":"Onyx::HTTP::Middleware::Router::MethodNotAllowed","name":"MethodNotAllowed"},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Router/NotFound","kind":"class","full_name":"Onyx::HTTP::Middleware::Router::NotFound","name":"NotFound"},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Router/UpgradeRequired","kind":"class","full_name":"Onyx::HTTP::Middleware::Router::UpgradeRequired","name":"UpgradeRequired"}],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP","kind":"module","full_name":"Onyx::HTTP","name":"HTTP"},"doc":"A HTTP error which is expected to be rescued upon processing,\nfor example by `Middleware::Rescuer`, and then rendered by `Middleware::Renderer`.\n\nDefine your own errors to handle **expected** situations:\n\n> In case of error, a plain text response status and body will be\n> `404` and `\"404 User not found with ID 42\"` respectively.\n\n```\nclass UserNotFound < Onyx::HTTP::Error(404)\n  def initialize(@id : Int32)\n    super(\"User not found with ID #{@id}\")\n  end\n\n  def payload\n    {id: @id}\n  end\nend\n\n# Will return 404 erorr if a user isn't found by the ID\nrouter.get \"/users/:id\" do |env|\n  id = env.request.path_params[\"id\"]?.to_i?\n  raise UserNotFound.new(id) unless Models::User.find?(id)\nend\n```","summary":"<p>A HTTP error which is expected to be rescued upon processing, for example by <code><a href=\"../../Onyx/HTTP/Middleware/Rescuer.html\">Middleware::Rescuer</a></code>, and then rendered by <code><a href=\"../../Onyx/HTTP/Middleware/Renderer.html\">Middleware::Renderer</a></code>.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"code:Int32-instance-method","html_id":"code:Int32-instance-method","name":"code","doc":"The HTTP status code of this error.","summary":"<p>The HTTP status code of this error.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/error.cr#L31","def":{"name":"code","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@code"}},{"id":"payload-instance-method","html_id":"payload-instance-method","name":"payload","doc":"The error payload. Usually used by custom renderers, for example,\n`Onyx::HTTP::Renderers::JSON` calls `error.payload.try &.to_json`.\nReturns `nil` by default.","summary":"<p>The error payload.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/error.cr#L34","def":{"name":"payload","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware","path":"Onyx/HTTP/Middleware.html","kind":"module","full_name":"Onyx::HTTP::Middleware","name":"Middleware","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-http/middleware/cors.cr","line_number":3,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/cors.cr"},{"filename":"onyx-http/middleware/logger.cr","line_number":8,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/logger.cr"},{"filename":"onyx-http/middleware/renderer.cr","line_number":8,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/renderer.cr"},{"filename":"onyx-http/middleware/request_id.cr","line_number":6,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/request_id.cr"},{"filename":"onyx-http/middleware/rescuer/silent.cr","line_number":4,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer/silent.cr"},{"filename":"onyx-http/middleware/rescuer/standard.cr","line_number":7,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer/standard.cr"},{"filename":"onyx-http/middleware/response_time.cr","line_number":3,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/response_time.cr"},{"filename":"onyx-http/middleware/router/bad_request.cr","line_number":1,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router/bad_request.cr"},{"filename":"onyx-http/middleware/router/method_not_allowed.cr","line_number":1,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router/method_not_allowed.cr"},{"filename":"onyx-http/middleware/router/not_found.cr","line_number":1,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router/not_found.cr"},{"filename":"onyx-http/middleware/router/upgrade_required.cr","line_number":1,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router/upgrade_required.cr"},{"filename":"onyx-http/middleware/router.cr","line_number":9,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP","kind":"module","full_name":"Onyx::HTTP","name":"HTTP"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/CORS","path":"Onyx/HTTP/Middleware/CORS.html","kind":"class","full_name":"Onyx::HTTP::Middleware::CORS","name":"CORS","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/http/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/middleware/cors.cr","line_number":9,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/cors.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/onyxframework/http/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware","kind":"module","full_name":"Onyx::HTTP::Middleware","name":"Middleware"},"doc":"Extracted from [kemalyst](https://github.com/kemalyst/kemalyst/blob/master/src/kemalyst/handler/cors.cr) (MIT licensed).\n\nCopyright (c) 2016 dru.jensen\n\nSee [CORS on Wiki](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing).","summary":"<p>Extracted from <a href=\"https://github.com/kemalyst/kemalyst/blob/master/src/kemalyst/handler/cors.cr\" target=\"_blank\">kemalyst</a> (MIT licensed).</p>","class_methods":[],"constructors":[{"id":"new(*,allow_origin=&quot;*&quot;,allow_headers=[&quot;accept&quot;,&quot;content-type&quot;]of::String,allow_methods=[&quot;GET&quot;,&quot;HEAD&quot;,&quot;POST&quot;,&quot;DELETE&quot;,&quot;OPTIONS&quot;,&quot;PUT&quot;,&quot;PATCH&quot;]of::String,allow_credentials=false,max_age=0)-class-method","html_id":"new(*,allow_origin=&amp;quot;*&amp;quot;,allow_headers=[&amp;quot;accept&amp;quot;,&amp;quot;content-type&amp;quot;]of::String,allow_methods=[&amp;quot;GET&amp;quot;,&amp;quot;HEAD&amp;quot;,&amp;quot;POST&amp;quot;,&amp;quot;DELETE&amp;quot;,&amp;quot;OPTIONS&amp;quot;,&amp;quot;PUT&amp;quot;,&amp;quot;PATCH&amp;quot;]of::String,allow_credentials=false,max_age=0)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"allow_origin","doc":null,"default_value":"\"*\"","external_name":"allow_origin","restriction":""},{"name":"allow_headers","doc":null,"default_value":"[\"accept\", \"content-type\"] of ::String","external_name":"allow_headers","restriction":""},{"name":"allow_methods","doc":null,"default_value":"[\"GET\", \"HEAD\", \"POST\", \"DELETE\", \"OPTIONS\", \"PUT\", \"PATCH\"] of ::String","external_name":"allow_methods","restriction":""},{"name":"allow_credentials","doc":null,"default_value":"false","external_name":"allow_credentials","restriction":""},{"name":"max_age","doc":null,"default_value":"0","external_name":"max_age","restriction":""}],"args_string":"(*, allow_origin = <span class=\"s\">&quot;*&quot;</span>, allow_headers = [<span class=\"s\">&quot;accept&quot;</span>, <span class=\"s\">&quot;content-type&quot;</span>] <span class=\"k\">of</span> <span class=\"t\">::</span><span class=\"t\">String</span>, allow_methods = [<span class=\"s\">&quot;GET&quot;</span>, <span class=\"s\">&quot;HEAD&quot;</span>, <span class=\"s\">&quot;POST&quot;</span>, <span class=\"s\">&quot;DELETE&quot;</span>, <span class=\"s\">&quot;OPTIONS&quot;</span>, <span class=\"s\">&quot;PUT&quot;</span>, <span class=\"s\">&quot;PATCH&quot;</span>] <span class=\"k\">of</span> <span class=\"t\">::</span><span class=\"t\">String</span>, allow_credentials = <span class=\"n\">false</span>, max_age = <span class=\"n\">0</span>)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/cors.cr#L12","def":{"name":"new","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"allow_origin","doc":null,"default_value":"\"*\"","external_name":"allow_origin","restriction":""},{"name":"allow_headers","doc":null,"default_value":"[\"accept\", \"content-type\"] of ::String","external_name":"allow_headers","restriction":""},{"name":"allow_methods","doc":null,"default_value":"[\"GET\", \"HEAD\", \"POST\", \"DELETE\", \"OPTIONS\", \"PUT\", \"PATCH\"] of ::String","external_name":"allow_methods","restriction":""},{"name":"allow_credentials","doc":null,"default_value":"false","external_name":"allow_credentials","restriction":""},{"name":"max_age","doc":null,"default_value":"0","external_name":"max_age","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(allow_origin: allow_origin, allow_headers: allow_headers, allow_methods: allow_methods, allow_credentials: allow_credentials, max_age: max_age)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Logger","path":"Onyx/HTTP/Middleware/Logger.html","kind":"class","full_name":"Onyx::HTTP::Middleware::Logger","name":"Logger","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/http/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/middleware/logger.cr","line_number":20,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/logger.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/onyxframework/http/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware","kind":"module","full_name":"Onyx::HTTP::Middleware","name":"Middleware"},"doc":"Logs requests colorfully into specified standard *logger*.\nIt also logs the `::HTTP::Request#id` if it's present.\nShould be put in the beginning of the middleware stack.\n\n```\nlogger = Onyx::HTTP::Logger.new\n\n#   INFO -- :     GET /users 200 102μs\n#   INFO -- :     GET /favicon.ico 404 52μs\n#   INFO -- :    POST /users 201 3.74ms\n```","summary":"<p>Logs requests colorfully into specified standard <em>logger</em>.</p>","class_methods":[],"constructors":[{"id":"new(logger:::Logger=::Logger.new(STDOUT),*,severity:::Logger::Severity=::Logger::INFO,query:Bool=true)-class-method","html_id":"new(logger:::Logger=::Logger.new(STDOUT),*,severity:::Logger::Severity=::Logger::INFO,query:Bool=true)-class-method","name":"new","doc":"Set *query* to `false` to turn off logging requests' queries.","summary":"<p>Set <em>query</em> to <code>false</code> to turn off logging requests' queries.</p>","abstract":false,"args":[{"name":"logger","doc":null,"default_value":"::Logger.new(STDOUT)","external_name":"logger","restriction":"::Logger"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"severity","doc":null,"default_value":"::Logger::INFO","external_name":"severity","restriction":"::Logger::Severity"},{"name":"query","doc":null,"default_value":"true","external_name":"query","restriction":"Bool"}],"args_string":"(logger : ::Logger = <span class=\"t\">::</span><span class=\"t\">Logger</span>.<span class=\"k\">new</span>(<span class=\"t\">STDOUT</span>), *, severity : ::Logger::Severity = <span class=\"t\">::</span><span class=\"t\">Logger</span><span class=\"t\">::</span><span class=\"t\">INFO</span>, query : Bool = <span class=\"n\">true</span>)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/logger.cr#L33","def":{"name":"new","args":[{"name":"logger","doc":null,"default_value":"::Logger.new(STDOUT)","external_name":"logger","restriction":"::Logger"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"severity","doc":null,"default_value":"::Logger::INFO","external_name":"severity","restriction":"::Logger::Severity"},{"name":"query","doc":null,"default_value":"true","external_name":"query","restriction":"Bool"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(logger, severity: severity, query: query)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/logger.cr#L41","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"started_at = Time.monotonic\nif id = context.request.id\n  request_id = \"[#{id[0...8]}]\".colorize(:dark_gray)\nend\nwebsocket = context.request.headers.includes_word?(\"Upgrade\", \"Websocket\")\nif websocket\n  method = ((\"WS\".rjust(7)).colorize(color(100))).mode(:bold)\n  progess = \"upgrading\".colorize(:dark_gray)\n  resource = context.request.path\n  if resource.size < 2\n  else\n    resource = resource.rstrip('/')\n  end\n  if @query && (query = context.request.query)\n    resource = resource + \"?#{query}\"\n  end\n  resource = resource.colorize(color(100))\n  @logger.log(@severity, \"#{request_id}#{method} #{resource} #{progess}\")\nend\nbegin\n  call_next(context)\nensure\n  color = color(context.response.status_code)\n  method = (((websocket ? \"WS\" : context.request.method).rjust(7)).colorize(color)).mode(:bold)\n  status_code = (context.response.status_code.colorize(color)).mode(:bold)\n  resource = context.request.path\n  if resource.size < 2\n  else\n    resource = resource.rstrip('/')\n  end\n  if @query && (query = context.request.query)\n    resource = resource + \"?#{query}\"\n  end\n  resource = resource.colorize(color)\n  @logger.log(@severity, \"#{request_id}#{method} #{resource} #{status_code} #{(TimeFormat.auto(Time.monotonic - started_at)).colorize(:dark_gray)}\")\nend\n"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Renderer","path":"Onyx/HTTP/Middleware/Renderer.html","kind":"class","full_name":"Onyx::HTTP::Middleware::Renderer","name":"Renderer","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/http/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/middleware/renderer.cr","line_number":12,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/renderer.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/onyxframework/http/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware","kind":"module","full_name":"Onyx::HTTP::Middleware","name":"Middleware"},"doc":"A handler which renders either `context.response.error` or `context.response.view` if\nit is present. Errors rendering is determined by the `\"Accept\"` request header and can\nbe either `\"application/json\"`, `\"text/plain\"` (*default*) or `\"text/html\"`.","summary":"<p>A handler which renders either <code>context.response.error</code> or <code>context.response.view</code> if it is present.</p>","class_methods":[],"constructors":[{"id":"new(verbose:Bool=true)-class-method","html_id":"new(verbose:Bool=true)-class-method","name":"new","doc":"You are likely to set *verbose* to `false` in production mode to\nhide actual error payloads.","summary":"<p>You are likely to set <em>verbose</em> to <code>false</code> in production mode to hide actual error payloads.</p>","abstract":false,"args":[{"name":"verbose","doc":null,"default_value":"true","external_name":"verbose","restriction":"Bool"}],"args_string":"(verbose : Bool = <span class=\"n\">true</span>)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/renderer.cr#L25","def":{"name":"new","args":[{"name":"verbose","doc":null,"default_value":"true","external_name":"verbose","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(verbose)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/renderer.cr#L28","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if error = context.response.error\n  if context.response.upgraded?\n    return (    if self.next\n      call_next(context)\n    end)\n  else\n    if accept = context.request.accept\n      rendered = false\n      accept.each do |a|\n        case a.media_type\n        when \"text/html\"\n          render_html_error(context, error)\n          break rendered = true\n        when \"application/json\"\n          render_json_error(context, error)\n          break rendered = true\n        when \"text/plain\", \"*/*\"\n          render_text_error(context, error)\n          break rendered = true\n        end\n      end\n      if rendered\n      else\n        render_text_error(context, error)\n      end\n    else\n      render_text_error(context, error)\n    end\n  end\nelse\n  if view = context.response.view\n    view.render(context)\n  end\nend\nif self.next\n  call_next(context)\nend\n"}},{"id":"render_html_error(context,error:Error)-instance-method","html_id":"render_html_error(context,error:Error)-instance-method","name":"render_html_error","doc":"Render an `Onyx::HTTP::Error` into a minimalistic HTML page.\nIt uses [Kilt](https://github.com/jeromegn/kilt) under the hood.","summary":"<p>Render an <code><a href=\"../../../Onyx/HTTP/Error.html\">Onyx::HTTP::Error</a></code> into a minimalistic HTML page.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Error"}],"args_string":"(context, error : Error)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/renderer.cr#L152","def":{"name":"render_html_error","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Error"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.response.content_type = \"text/html\"\ncontext.response.status_code = error.code\nKilt.embed(\"/home/travis/build/onyxframework/http/src/onyx-http/middleware/renderer/rest_error.html.ecr\", context.response)\n"}},{"id":"render_html_error(context,error:Exception)-instance-method","html_id":"render_html_error(context,error:Exception)-instance-method","name":"render_html_error","doc":"Render an exception into HTML.\nIt uses [Kilt](https://github.com/jeromegn/kilt) under the hood.\nBased on the `@verbose` variable, the output differs.\nIf it is `true`, then a debug page is output powered by [ExceptionPage](https://github.com/crystal-loot/exception_page) shard.\nOtherwise, a minimalistic HTML page is rendered with no details.","summary":"<p>Render an exception into HTML.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Exception"}],"args_string":"(context, error : Exception)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/renderer.cr#L164","def":{"name":"render_html_error","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Exception"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.response.content_type = \"text/html\"\ncontext.response.status_code = 500\nif @verbose\n  context.response.print(ExceptionPage.for_runtime_exception(context, error))\nelse\n  Kilt.embed(\"/home/travis/build/onyxframework/http/src/onyx-http/middleware/renderer/rest_error.html.ecr\", context.response)\nend\n"}},{"id":"render_json_error(context,error:Error)-instance-method","html_id":"render_json_error(context,error:Error)-instance-method","name":"render_json_error","doc":"Render `Onyx::HTTP::Error` into JSON. Example:\n\n```json\n{\n  \"error\": {\n    \"name\": \"User Not Found\",\n    \"message\": \"User not found with ID 42\",\n    \"code\": 404,\n    \"payload\": {\n      \"id\": 42\n    }\n  }\n}\n```","summary":"<p>Render <code><a href=\"../../../Onyx/HTTP/Error.html\">Onyx::HTTP::Error</a></code> into JSON.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Error"}],"args_string":"(context, error : Error)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/renderer.cr#L80","def":{"name":"render_json_error","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Error"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.response.content_type = \"application/json\"\ncontext.response.status_code = error.code\n{error: {name: error.status_message, message: error.message, code: error.code, payload: error.payload}}.to_json(context.response)\n"}},{"id":"render_json_error(context,error:Exception)-instance-method","html_id":"render_json_error(context,error:Exception)-instance-method","name":"render_json_error","doc":"Render an exception into JSON. Based on the `@verbosity` variable, the output differs.\n\nExample with `@verbose = true`:\n\n```json\n{\n  \"error\": {\n    \"name\": \"Division By Zero\",\n    \"message\": \"Division by zero\",\n    \"code\": 500,\n    \"payload\": {\n      \"backtrace\": [\"<error_backtrace>\"]\n    }\n  }\n}\n```\n\nWith `@verbose = false`:\n\n```json\n{\n  \"error\": {\n    \"name\": \"Exception\",\n    \"message\": null,\n    \"code\": 500,\n    \"payload\": null\n  }\n}\n```","summary":"<p>Render an exception into JSON.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Exception"}],"args_string":"(context, error : Exception)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/renderer.cr#L123","def":{"name":"render_json_error","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Exception"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.response.content_type = \"application/json\"\ncontext.response.status_code = 500\nif @verbose\n  {error: {name: error.status_message, message: error.message, code: 500, payload: {backtrace: error.backtrace}}}.to_json(context.response)\nelse\n  {error: {name: ::HTTP.default_status_message_for(500), message: nil, code: 500, payload: nil}}.to_json(context.response)\nend\n"}},{"id":"render_text_error(context,error:Error)-instance-method","html_id":"render_text_error(context,error:Error)-instance-method","name":"render_text_error","doc":"Render an `Onyx::HTTP::Error` into a plain text.\nIf the error contains a message, it is print with dash:\n\n```\n404 User Not Found — User not found with ID 42\n```","summary":"<p>Render an <code><a href=\"../../../Onyx/HTTP/Error.html\">Onyx::HTTP::Error</a></code> into a plain text.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Error"}],"args_string":"(context, error : Error)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/renderer.cr#L181","def":{"name":"render_text_error","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Error"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.response.content_type = \"text/plain\"\ncontext.response.status_code = error.code\n((context.response << error.code) << \" \") << error.status_message\nif message = error.message\n  (context.response << \" — \") << message\nend\n"}},{"id":"render_text_error(context,error:Exception)-instance-method","html_id":"render_text_error(context,error:Exception)-instance-method","name":"render_text_error","doc":"Render an exception into a plain text.\nThe output differs depending on the `@verbose` variable.\nIf it is set to `true`, then a full error message with backtrace is printed.\nOtherwise, a simple `500 Internal Server Error` message is printed.","summary":"<p>Render an exception into a plain text.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Exception"}],"args_string":"(context, error : Exception)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/renderer.cr#L196","def":{"name":"render_text_error","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Exception"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.response.content_type = \"text/plain\"\ncontext.response.status_code = 500\nif @verbose\n  (context.response << \"500 \") << error.status_message\n  (((context.response << \" — \") << error.message) << \"\\n\\n\") << (error.backtrace.join(\"\\n\"))\nelse\n  (context.response << \"500 \") << (::HTTP.default_status_message_for(500))\nend\n"}}],"macros":[],"types":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Renderer/ExceptionPage","path":"Onyx/HTTP/Middleware/Renderer/ExceptionPage.html","kind":"class","full_name":"Onyx::HTTP::Middleware::Renderer::ExceptionPage","name":"ExceptionPage","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/ExceptionPage","kind":"class","full_name":"ExceptionPage","name":"ExceptionPage"},"ancestors":[{"html_id":"github.com/onyxframework/http/ExceptionPage","kind":"class","full_name":"ExceptionPage","name":"ExceptionPage"},{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/middleware/renderer.cr","line_number":15,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/renderer.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Renderer","kind":"class","full_name":"Onyx::HTTP::Middleware::Renderer","name":"Renderer"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"styles-instance-method","html_id":"styles-instance-method","name":"styles","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/renderer.cr#L16","def":{"name":"styles","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"::ExceptionPage::Styles.new(accent: \"red\")"}}],"macros":[],"types":[]}]},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/RequestID","path":"Onyx/HTTP/Middleware/RequestID.html","kind":"class","full_name":"Onyx::HTTP::Middleware::RequestID","name":"RequestID","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/http/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/middleware/request_id.cr","line_number":9,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/request_id.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/onyxframework/http/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware","kind":"module","full_name":"Onyx::HTTP::Middleware","name":"Middleware"},"doc":"Sets `::HTTP::Request#id` and `\"X-Request-ID\"` header to a random `UUID` string.\nIf a request has an ID, it's logged in `Logger` and `Rescuers::Standard` handlers.","summary":"<p>Sets <code><a href=\"../../../HTTP/Request.html\">::HTTP::Request</a>#id</code> and <code>\"X-Request-ID\"</code> header to a random <code>UUID</code> string.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/request_id.cr#L12","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"id = UUID.random.to_s\ncontext.request.id = id\ncontext.response.headers[\"X-Request-ID\"] = id\ncall_next(context)\n"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Rescuer","path":"Onyx/HTTP/Middleware/Rescuer.html","kind":"module","full_name":"Onyx::HTTP::Middleware::Rescuer(T)","name":"Rescuer","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/onyxframework/http/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"locations":[{"filename":"onyx-http/middleware/rescuer.cr","line_number":8,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer.cr"},{"filename":"onyx-http/middleware/rescuer/silent.cr","line_number":5,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer/silent.cr"},{"filename":"onyx-http/middleware/rescuer/error.cr","line_number":3,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer/error.cr"},{"filename":"onyx-http/middleware/rescuer/standard.cr","line_number":8,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer/standard.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/onyxframework/http/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Rescuer/Silent","kind":"class","full_name":"Onyx::HTTP::Middleware::Rescuer::Silent(T)","name":"Silent"},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Rescuer/Standard","kind":"class","full_name":"Onyx::HTTP::Middleware::Rescuer::Standard(T)","name":"Standard"}],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware","kind":"module","full_name":"Onyx::HTTP::Middleware","name":"Middleware"},"doc":"Rescues `T`. Firstly calls `#handle` to handle the error (e.g. log it).\nCalls `#before_next_handler` and then the `#next_handler`.\n\nSee `Rescuer::Standard` and `Rescuer::Silent`.","summary":"<p>Rescues <code>T</code>.</p>","class_methods":[],"constructors":[{"id":"new(next_handler:::HTTP::Handler)-class-method","html_id":"new(next_handler:::HTTP::Handler)-class-method","name":"new","doc":"Initialize with a *next_handler* to call when a error is rescued.","summary":"<p>Initialize with a <em>next_handler</em> to call when a error is rescued.</p>","abstract":false,"args":[{"name":"next_handler","doc":null,"default_value":"","external_name":"next_handler","restriction":"::HTTP::Handler"}],"args_string":"(next_handler : ::HTTP::Handler)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer.cr#L15","def":{"name":"new","args":[{"name":"next_handler","doc":null,"default_value":"","external_name":"next_handler","restriction":"::HTTP::Handler"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(next_handler)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"before_next_handler(context:HTTP::Server::Context,error:T)-instance-method","html_id":"before_next_handler(context:HTTP::Server::Context,error:T)-instance-method","name":"before_next_handler","doc":"Called just before the `#next_handler` is called.\nIt does `context.response.error = error` by default.","summary":"<p>Called just before the <code><a href=\"../../../Onyx/HTTP/Middleware/Rescuer.html#next_handler%3A%3A%3AHTTP%3A%3AHandler-instance-method\">#next_handler</a></code> is called.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::HTTP::Server::Context"},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"T"}],"args_string":"(context : HTTP::Server::Context, error : T)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer.cr#L32","def":{"name":"before_next_handler","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::HTTP::Server::Context"},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.response.error = error"}},{"id":"handle(context:HTTP::Server::Context,error:T)-instance-method","html_id":"handle(context:HTTP::Server::Context,error:T)-instance-method","name":"handle","doc":"Process the error before further handling. A good example is logging it.","summary":"<p>Process the error before further handling.</p>","abstract":true,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::HTTP::Server::Context"},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"T"}],"args_string":"(context : HTTP::Server::Context, error : T)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer.cr#L28","def":{"name":"handle","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::HTTP::Server::Context"},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"next_handler:::HTTP::Handler-instance-method","html_id":"next_handler:::HTTP::Handler-instance-method","name":"next_handler","doc":"A handler to call when a error is rescued.","summary":"<p>A handler to call when a error is rescued.</p>","abstract":false,"args":[],"args_string":" : ::HTTP::Handler","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer.cr#L14","def":{"name":"next_handler","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::HTTP::Handler","visibility":"Public","body":"@next_handler"}},{"id":"next_handler=(next_handler:::HTTP::Handler)-instance-method","html_id":"next_handler=(next_handler:::HTTP::Handler)-instance-method","name":"next_handler=","doc":"A handler to call when a error is rescued.","summary":"<p>A handler to call when a error is rescued.</p>","abstract":false,"args":[{"name":"next_handler","doc":null,"default_value":"","external_name":"next_handler","restriction":"::HTTP::Handler"}],"args_string":"(next_handler : ::HTTP::Handler)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer.cr#L18","def":{"name":"next_handler=","args":[{"name":"next_handler","doc":null,"default_value":"","external_name":"next_handler","restriction":"::HTTP::Handler"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@next_handler = next_handler"}}],"macros":[],"types":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Rescuer/Error","path":"Onyx/HTTP/Middleware/Rescuer/Error.html","kind":"class","full_name":"Onyx::HTTP::Middleware::Rescuer::Error","name":"Error","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Rescuer/Silent","kind":"class","full_name":"Onyx::HTTP::Middleware::Rescuer::Silent","name":"Silent"},"ancestors":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Rescuer/Silent","kind":"class","full_name":"Onyx::HTTP::Middleware::Rescuer::Silent","name":"Silent"},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Rescuer","kind":"module","full_name":"Onyx::HTTP::Middleware::Rescuer","name":"Rescuer"},{"html_id":"github.com/onyxframework/http/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/middleware/rescuer/error.cr","line_number":4,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer/error.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Rescuer","kind":"module","full_name":"Onyx::HTTP::Middleware::Rescuer(T)","name":"Rescuer"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(next_handler:::HTTP::Handler)-class-method","html_id":"new(next_handler:::HTTP::Handler)-class-method","name":"new","doc":"Initialize with a *next_handler* to call when a error is rescued.","summary":"<p>Initialize with a <em>next_handler</em> to call when a error is rescued.</p>","abstract":false,"args":[{"name":"next_handler","doc":null,"default_value":"","external_name":"next_handler","restriction":"::HTTP::Handler"}],"args_string":"(next_handler : ::HTTP::Handler)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer.cr#L15","def":{"name":"new","args":[{"name":"next_handler","doc":null,"default_value":"","external_name":"next_handler","restriction":"::HTTP::Handler"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(next_handler)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Rescuer/Silent","path":"Onyx/HTTP/Middleware/Rescuer/Silent.html","kind":"class","full_name":"Onyx::HTTP::Middleware::Rescuer::Silent(T)","name":"Silent","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Rescuer","kind":"module","full_name":"Onyx::HTTP::Middleware::Rescuer","name":"Rescuer"},{"html_id":"github.com/onyxframework/http/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/middleware/rescuer/silent.cr","line_number":7,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer/silent.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Rescuer","kind":"module","full_name":"Onyx::HTTP::Middleware::Rescuer","name":"Rescuer"}],"extended_modules":[],"subclasses":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Rescuer/Error","kind":"class","full_name":"Onyx::HTTP::Middleware::Rescuer::Error","name":"Error"}],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Rescuer","kind":"module","full_name":"Onyx::HTTP::Middleware::Rescuer(T)","name":"Rescuer"},"doc":"A rescuer which silently passes a error to the `#next_handler`.","summary":"<p>A rescuer which silently passes a error to the <code>#next_handler</code>.</p>","class_methods":[],"constructors":[{"id":"new(next_handler:::HTTP::Handler)-class-method","html_id":"new(next_handler:::HTTP::Handler)-class-method","name":"new","doc":"Initialize with a *next_handler* to call when a error is rescued.","summary":"<p>Initialize with a <em>next_handler</em> to call when a error is rescued.</p>","abstract":false,"args":[{"name":"next_handler","doc":null,"default_value":"","external_name":"next_handler","restriction":"::HTTP::Handler"}],"args_string":"(next_handler : ::HTTP::Handler)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer.cr#L15","def":{"name":"new","args":[{"name":"next_handler","doc":null,"default_value":"","external_name":"next_handler","restriction":"::HTTP::Handler"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Silent(T).allocate\n_.initialize(next_handler)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"handle(context,error)-instance-method","html_id":"handle(context,error)-instance-method","name":"handle","doc":"Do nothing.","summary":"<p>Do nothing.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":""}],"args_string":"(context, error)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer/silent.cr#L11","def":{"name":"handle","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Rescuer/Standard","path":"Onyx/HTTP/Middleware/Rescuer/Standard.html","kind":"class","full_name":"Onyx::HTTP::Middleware::Rescuer::Standard(T)","name":"Standard","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Rescuer","kind":"module","full_name":"Onyx::HTTP::Middleware::Rescuer","name":"Rescuer"},{"html_id":"github.com/onyxframework/http/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/middleware/rescuer/standard.cr","line_number":20,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer/standard.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Rescuer","kind":"module","full_name":"Onyx::HTTP::Middleware::Rescuer","name":"Rescuer"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Rescuer","kind":"module","full_name":"Onyx::HTTP::Middleware::Rescuer(T)","name":"Rescuer"},"doc":"A rescuer which logs a error colorfully into a standard `::Logger`.\nIt also logs the `::HTTP::Request#id` if it's present.\nShould be put *after* `Logger` in the stack.\n\n```\nlogger = Onyx::HTTP::Middleware::Logger.new\nrenderer = Onyx::HTTP::Middleware::Renderer.new\nrescuer = Onyx::HTTP::Middleware::Rescuers::Standard(Exception).new(renderer)\nrouter = Onyx::HTTP::Middleware::Router.new\nhandlers = [logger, rescuer, router, renderer]\n```","summary":"<p>A rescuer which logs a error colorfully into a standard <code>::Logger</code>.</p>","class_methods":[],"constructors":[{"id":"new(next_handler:::HTTP::Handler?=nil,logger:::Logger=::Logger.new(STDERR),verbose:Bool=true)-class-method","html_id":"new(next_handler:::HTTP::Handler?=nil,logger:::Logger=::Logger.new(STDERR),verbose:Bool=true)-class-method","name":"new","doc":"Set *verbose* to `false` to turn off logging errors' backtraces.","summary":"<p>Set <em>verbose</em> to <code>false</code> to turn off logging errors' backtraces.</p>","abstract":false,"args":[{"name":"next_handler","doc":null,"default_value":"nil","external_name":"next_handler","restriction":"::HTTP::Handler | ::Nil"},{"name":"logger","doc":null,"default_value":"::Logger.new(STDERR)","external_name":"logger","restriction":"::Logger"},{"name":"verbose","doc":null,"default_value":"true","external_name":"verbose","restriction":"Bool"}],"args_string":"(next_handler : ::HTTP::Handler? = <span class=\"n\">nil</span>, logger : ::Logger = <span class=\"t\">::</span><span class=\"t\">Logger</span>.<span class=\"k\">new</span>(<span class=\"t\">STDERR</span>), verbose : Bool = <span class=\"n\">true</span>)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer/standard.cr#L27","def":{"name":"new","args":[{"name":"next_handler","doc":null,"default_value":"nil","external_name":"next_handler","restriction":"::HTTP::Handler | ::Nil"},{"name":"logger","doc":null,"default_value":"::Logger.new(STDERR)","external_name":"logger","restriction":"::Logger"},{"name":"verbose","doc":null,"default_value":"true","external_name":"verbose","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Standard(T).allocate\n_.initialize(next_handler, logger, verbose)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"handle(context,error)-instance-method","html_id":"handle(context,error)-instance-method","name":"handle","doc":"Log the *error* into the `#logger`.","summary":"<p>Log the <em>error</em> into the <code><a href=\"../../../../Onyx/HTTP/Middleware/Rescuer/Standard.html#logger%3A%3A%3ALogger-instance-method\">#logger</a></code>.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":""}],"args_string":"(context, error)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer/standard.cr#L36","def":{"name":"handle","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io = IO::Memory.new\nif id = context.request.id\n  io << (\"[#{id[0...8]}] \".colorize(:dark_gray))\nend\nio << (((\" ERROR \".rjust(7)).colorize.mode(:bold)).back(:red))\n(io << \" \") << (error.message || \"<Empty message error>\")\nif @verbose\n  (io << \"\\n\\n\") << (error.inspect_with_backtrace.colorize(:light_gray))\nend\n@logger.error(io.to_s)\n"}},{"id":"logger:::Logger-instance-method","html_id":"logger:::Logger-instance-method","name":"logger","doc":"A `Logger` to log to. Can be changed in runtime.","summary":"<p>A <code><a href=\"../../../../Onyx/HTTP/Middleware/Logger.html\">Logger</a></code> to log to.</p>","abstract":false,"args":[],"args_string":" : ::Logger","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer/standard.cr#L26","def":{"name":"logger","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Logger","visibility":"Public","body":"@logger"}},{"id":"logger=(logger:::Logger)-instance-method","html_id":"logger=(logger:::Logger)-instance-method","name":"logger=","doc":"A `Logger` to log to. Can be changed in runtime.","summary":"<p>A <code><a href=\"../../../../Onyx/HTTP/Middleware/Logger.html\">Logger</a></code> to log to.</p>","abstract":false,"args":[{"name":"logger","doc":null,"default_value":"","external_name":"logger","restriction":"::Logger"}],"args_string":"(logger : ::Logger)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/rescuer/standard.cr#L30","def":{"name":"logger=","args":[{"name":"logger","doc":null,"default_value":"","external_name":"logger","restriction":"::Logger"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@logger = logger"}}],"macros":[],"types":[]}]},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/ResponseTime","path":"Onyx/HTTP/Middleware/ResponseTime.html","kind":"class","full_name":"Onyx::HTTP::Middleware::ResponseTime","name":"ResponseTime","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/http/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/middleware/response_time.cr","line_number":6,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/response_time.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/onyxframework/http/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware","kind":"module","full_name":"Onyx::HTTP::Middleware","name":"Middleware"},"doc":"Sets `\"X-Response-Time\"` header to the integer amount of **microseconds** elapsed\nto process this request. It is expected to be placed in the very beginning of the middleware.","summary":"<p>Sets <code>\"X-Response-Time\"</code> header to the integer amount of <strong>microseconds</strong> elapsed to process this request.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/response_time.cr#L9","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"elapsed = Time.measure do\n  call_next(context)\nend\ncontext.response.headers[\"X-Response-Time\"] = (elapsed.total_milliseconds * 1000).to_i64.to_s\n"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Router","path":"Onyx/HTTP/Middleware/Router.html","kind":"class","full_name":"Onyx::HTTP::Middleware::Router","name":"Router","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/http/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/middleware/router/bad_request.cr","line_number":2,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router/bad_request.cr"},{"filename":"onyx-http/middleware/router/method_not_allowed.cr","line_number":2,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router/method_not_allowed.cr"},{"filename":"onyx-http/middleware/router/not_found.cr","line_number":2,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router/not_found.cr"},{"filename":"onyx-http/middleware/router/upgrade_required.cr","line_number":2,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router/upgrade_required.cr"},{"filename":"onyx-http/middleware/router.cr","line_number":35,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/onyxframework/http/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware","kind":"module","full_name":"Onyx::HTTP::Middleware","name":"Middleware"},"doc":"Routes a request's path, then updates extracted path params to\n`::HTTP::Request#path_params`, executes the matching proc and calls the next handler\nif it's present.\n\nRaises `Router::NotFound` if no route is found for the URL path,\n`Router::MethodNotAllowed` if the request method is not allowed or\n`Router::UpgradeRequired` if the endpoint requires websocket protocol.\n\n```\nrouter = Onyx::HTTP::Middleware::Router.new do\n  get \"/\" do |env|\n    env.response << \"Hello world!\"\n  end\n\n  ws \"/\" do |socket, env|\n    socket.on_message do |message|\n      # ...\n    end\n  end\nend\n\nrenderer = Onyx::HTTP::Middleware::Renderer.new\nrescuer = Onyx::HTTP::Middleware::Rescuer::Standard(Exception).new(renderer)\nserver = Onyx::HTTP::Server.new([rescuer, router, renderer])\n```","summary":"<p>Routes a request's path, then updates extracted path params to <code><a href=\"../../../HTTP/Request.html\">::HTTP::Request</a>#path_params</code>, executes the matching proc and calls the next handler if it's present.</p>","class_methods":[],"constructors":[{"id":"new(&block)-class-method","html_id":"new(&amp;block)-class-method","name":"new","doc":"Initialize a new router and yield it. You should then define routes in the *&block*.\n\n```\n# The simplest router\nrouter = Router.new do\n  get \"/\" do |env|\n    env.response << \"Hello world!\"\n  end\nend\n```","summary":"<p>Initialize a new router and yield it.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L56","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"instance = new\nwith instance yield\ninstance\n"}}],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":"Lookup for a route, update `context.request.path_params` and call the matching proc,\nraising `RouteNotFound` otherwise. Calls the next handler if it's present.","summary":"<p>Lookup for a route, update <code>context.request.path_params</code> and call the matching proc, raising <code>RouteNotFound</code> otherwise.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L64","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if context.request.headers.includes_word?(\"Upgrade\", \"Websocket\")\n  path = \"/ws\" + (context.request.path.rstrip('/'))\n  result = lookup(path)\nelse\n  path = (\"/\" + context.request.method.downcase) + (context.request.path.rstrip('/'))\n  result = lookup(path)\nend\nif proc = result.payload\n  if params = result.params\n    context.request.path_params = params\n  end\n  proc.call(context)\n  if self.next\n    call_next(context)\n  end\nelse\n  found = Array(String).new\n  HTTP_METHODS.each do |method|\n    if method == context.request.method.downcase\n      next\n    end\n    path = \"/#{method}#{context.request.path.rstrip('/')}\"\n    if (lookup(path)).payload\n      found << method\n    end\n  end\n  if found.empty?\n  else\n    context.response.headers[\"Allow\"] = found.map(&.upcase).join(\", \")\n    raise(MethodNotAllowed.new)\n  end\n  if context.request.headers.includes_word?(\"Upgrade\", \"Websocket\")\n  else\n    path = \"/ws\" + (context.request.path.rstrip('/'))\n    if (lookup(path)).payload\n      context.response.headers[\"Upgrade\"] = \"Websocket\"\n      raise(UpgradeRequired.new)\n    end\n  end\n  raise(NotFound.new)\nend\n"}},{"id":"delete(path,&proc:HTTP::Server::Context->View|UNDERSCORE)-instance-method","html_id":"delete(path,&amp;proc:HTTP::Server::Context-&gt;View|UNDERSCORE)-instance-method","name":"delete","doc":"Draw a route for *path* with `DELETE` method. If a `View` instance\nis returned, then the `::HTTP::Server::Response#view` is set to this view.\n\n```\nrouter = Router.new do\n  delete \"/bar\" do |env|\n    env.response << \"Hello from DELETE /bar!\"\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>DELETE</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : HTTP::Server::Context -> View | UNDERSCORE)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L159","def":{"name":"delete","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"(::HTTP::Server::Context -> View | _)"},"return_type":"","visibility":"Public","body":"on(path, [\"delete\"], &proc)"}},{"id":"delete(path,endpoint:HTTP::Endpoint.class)-instance-method","html_id":"delete(path,endpoint:HTTP::Endpoint.class)-instance-method","name":"delete","doc":"Draw a route for *path* with `DELETE` calling *endpoint*.\nSee `Endpoint`. If a `View` instance is returned, then the\n`::HTTP::Server::Response#view` is set  to this view.\n\n```\nrouter = Router.new do\n  delete \"/bar\", MyEndpoint\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>DELETE</code> calling <em>endpoint</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"HTTP::Endpoint.class"}],"args_string":"(path, endpoint : <span class=\"t\">HTTP</span><span class=\"t\">::</span><span class=\"t\">Endpoint</span>.<span class=\"k\">class</span>)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L159","def":{"name":"delete","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"HTTP::Endpoint.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"delete\"], endpoint)"}},{"id":"draw(&block)-instance-method","html_id":"draw(&amp;block)-instance-method","name":"draw","doc":"Yield `with` self.\n\n```\nrouter.draw do\n  post \"/\" { }\n  get \"/\" { }\nend\n```","summary":"<p>Yield <code>with</code> self.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L118","def":{"name":"draw","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"with self yield"}},{"id":"get(path,&proc:HTTP::Server::Context->View|UNDERSCORE)-instance-method","html_id":"get(path,&amp;proc:HTTP::Server::Context-&gt;View|UNDERSCORE)-instance-method","name":"get","doc":"Draw a route for *path* with `GET` method. If a `View` instance\nis returned, then the `::HTTP::Server::Response#view` is set to this view.\n\n```\nrouter = Router.new do\n  get \"/bar\" do |env|\n    env.response << \"Hello from GET /bar!\"\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>GET</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : HTTP::Server::Context -> View | UNDERSCORE)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L159","def":{"name":"get","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"(::HTTP::Server::Context -> View | _)"},"return_type":"","visibility":"Public","body":"on(path, [\"get\"], &proc)"}},{"id":"get(path,endpoint:HTTP::Endpoint.class)-instance-method","html_id":"get(path,endpoint:HTTP::Endpoint.class)-instance-method","name":"get","doc":"Draw a route for *path* with `GET` calling *endpoint*.\nSee `Endpoint`. If a `View` instance is returned, then the\n`::HTTP::Server::Response#view` is set  to this view.\n\n```\nrouter = Router.new do\n  get \"/bar\", MyEndpoint\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>GET</code> calling <em>endpoint</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"HTTP::Endpoint.class"}],"args_string":"(path, endpoint : <span class=\"t\">HTTP</span><span class=\"t\">::</span><span class=\"t\">Endpoint</span>.<span class=\"k\">class</span>)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L159","def":{"name":"get","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"HTTP::Endpoint.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"get\"], endpoint)"}},{"id":"head(path,&proc:HTTP::Server::Context->View|UNDERSCORE)-instance-method","html_id":"head(path,&amp;proc:HTTP::Server::Context-&gt;View|UNDERSCORE)-instance-method","name":"head","doc":"Draw a route for *path* with `HEAD` method. If a `View` instance\nis returned, then the `::HTTP::Server::Response#view` is set to this view.\n\n```\nrouter = Router.new do\n  head \"/bar\" do |env|\n    env.response << \"Hello from HEAD /bar!\"\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>HEAD</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : HTTP::Server::Context -> View | UNDERSCORE)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L159","def":{"name":"head","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"(::HTTP::Server::Context -> View | _)"},"return_type":"","visibility":"Public","body":"on(path, [\"head\"], &proc)"}},{"id":"head(path,endpoint:HTTP::Endpoint.class)-instance-method","html_id":"head(path,endpoint:HTTP::Endpoint.class)-instance-method","name":"head","doc":"Draw a route for *path* with `HEAD` calling *endpoint*.\nSee `Endpoint`. If a `View` instance is returned, then the\n`::HTTP::Server::Response#view` is set  to this view.\n\n```\nrouter = Router.new do\n  head \"/bar\", MyEndpoint\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>HEAD</code> calling <em>endpoint</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"HTTP::Endpoint.class"}],"args_string":"(path, endpoint : <span class=\"t\">HTTP</span><span class=\"t\">::</span><span class=\"t\">Endpoint</span>.<span class=\"k\">class</span>)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L159","def":{"name":"head","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"HTTP::Endpoint.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"head\"], endpoint)"}},{"id":"on(path,methods:Array(String),&proc:HTTP::Server::Context->View|UNDERSCORE)-instance-method","html_id":"on(path,methods:Array(String),&amp;proc:HTTP::Server::Context-&gt;View|UNDERSCORE)-instance-method","name":"on","doc":"Draw a route for *path* and *methods*. If a `View` instance is returned,\nthen the `::HTTP::Server::Response#view` is set to this view.\n\n```\nrouter = Router.new do\n  on \"/foo\", methods: %w(get post) do |env|\n    env.response << \"Hello from #{env.request.method} /foo!\"\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> and <em>methods</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"methods","doc":null,"default_value":"","external_name":"methods","restriction":"Array(String)"}],"args_string":"(path, methods : Array(String), &proc : HTTP::Server::Context -> View | UNDERSCORE)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L132","def":{"name":"on","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"methods","doc":null,"default_value":"","external_name":"methods","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"(::HTTP::Server::Context -> View | _)"},"return_type":"","visibility":"Public","body":"methods.map(&.downcase).each do |method|\n  add((\"/\" + method) + path, ContextProc.new do |context|\n    view? = proc.call(context)\n    if view = view?.as?(HTTP::View)\n      __temp_46 = context.response\n      __temp_46.view || (__temp_46.view = view)\n    end\n  end)\nend"}},{"id":"on(path,methods:Array(String),endpoint:HTTP::Endpoint.class)-instance-method","html_id":"on(path,methods:Array(String),endpoint:HTTP::Endpoint.class)-instance-method","name":"on","doc":"Draw a route for *path* and *methods* calling *endpoint*. See `Endpoint`.\nIf a `View` instance is returned, then the `::HTTP::Server::Response#view` is set\nto this view.\n\n```\nrouter = Router.new do\n  on \"/foo\", methods: %w(get post), MyEndpoint\nend\n```","summary":"<p>Draw a route for <em>path</em> and <em>methods</em> calling <em>endpoint</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"methods","doc":null,"default_value":"","external_name":"methods","restriction":"Array(String)"},{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"HTTP::Endpoint.class"}],"args_string":"(path, methods : Array(String), endpoint : <span class=\"t\">HTTP</span><span class=\"t\">::</span><span class=\"t\">Endpoint</span>.<span class=\"k\">class</span>)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L153","def":{"name":"on","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"methods","doc":null,"default_value":"","external_name":"methods","restriction":"Array(String)"},{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"HTTP::Endpoint.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, methods) do |context|\n  endpoint.call(context)\nend"}},{"id":"options(path,endpoint:HTTP::Endpoint.class)-instance-method","html_id":"options(path,endpoint:HTTP::Endpoint.class)-instance-method","name":"options","doc":"Draw a route for *path* with `OPTIONS` calling *endpoint*.\nSee `Endpoint`. If a `View` instance is returned, then the\n`::HTTP::Server::Response#view` is set  to this view.\n\n```\nrouter = Router.new do\n  options \"/bar\", MyEndpoint\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>OPTIONS</code> calling <em>endpoint</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"HTTP::Endpoint.class"}],"args_string":"(path, endpoint : <span class=\"t\">HTTP</span><span class=\"t\">::</span><span class=\"t\">Endpoint</span>.<span class=\"k\">class</span>)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L159","def":{"name":"options","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"HTTP::Endpoint.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"options\"], endpoint)"}},{"id":"options(path,&proc:HTTP::Server::Context->View|UNDERSCORE)-instance-method","html_id":"options(path,&amp;proc:HTTP::Server::Context-&gt;View|UNDERSCORE)-instance-method","name":"options","doc":"Draw a route for *path* with `OPTIONS` method. If a `View` instance\nis returned, then the `::HTTP::Server::Response#view` is set to this view.\n\n```\nrouter = Router.new do\n  options \"/bar\" do |env|\n    env.response << \"Hello from OPTIONS /bar!\"\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>OPTIONS</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : HTTP::Server::Context -> View | UNDERSCORE)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L159","def":{"name":"options","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"(::HTTP::Server::Context -> View | _)"},"return_type":"","visibility":"Public","body":"on(path, [\"options\"], &proc)"}},{"id":"patch(path,&proc:HTTP::Server::Context->View|UNDERSCORE)-instance-method","html_id":"patch(path,&amp;proc:HTTP::Server::Context-&gt;View|UNDERSCORE)-instance-method","name":"patch","doc":"Draw a route for *path* with `PATCH` method. If a `View` instance\nis returned, then the `::HTTP::Server::Response#view` is set to this view.\n\n```\nrouter = Router.new do\n  patch \"/bar\" do |env|\n    env.response << \"Hello from PATCH /bar!\"\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>PATCH</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : HTTP::Server::Context -> View | UNDERSCORE)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L159","def":{"name":"patch","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"(::HTTP::Server::Context -> View | _)"},"return_type":"","visibility":"Public","body":"on(path, [\"patch\"], &proc)"}},{"id":"patch(path,endpoint:HTTP::Endpoint.class)-instance-method","html_id":"patch(path,endpoint:HTTP::Endpoint.class)-instance-method","name":"patch","doc":"Draw a route for *path* with `PATCH` calling *endpoint*.\nSee `Endpoint`. If a `View` instance is returned, then the\n`::HTTP::Server::Response#view` is set  to this view.\n\n```\nrouter = Router.new do\n  patch \"/bar\", MyEndpoint\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>PATCH</code> calling <em>endpoint</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"HTTP::Endpoint.class"}],"args_string":"(path, endpoint : <span class=\"t\">HTTP</span><span class=\"t\">::</span><span class=\"t\">Endpoint</span>.<span class=\"k\">class</span>)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L159","def":{"name":"patch","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"HTTP::Endpoint.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"patch\"], endpoint)"}},{"id":"post(path,&proc:HTTP::Server::Context->View|UNDERSCORE)-instance-method","html_id":"post(path,&amp;proc:HTTP::Server::Context-&gt;View|UNDERSCORE)-instance-method","name":"post","doc":"Draw a route for *path* with `POST` method. If a `View` instance\nis returned, then the `::HTTP::Server::Response#view` is set to this view.\n\n```\nrouter = Router.new do\n  post \"/bar\" do |env|\n    env.response << \"Hello from POST /bar!\"\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>POST</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : HTTP::Server::Context -> View | UNDERSCORE)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L159","def":{"name":"post","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"(::HTTP::Server::Context -> View | _)"},"return_type":"","visibility":"Public","body":"on(path, [\"post\"], &proc)"}},{"id":"post(path,endpoint:HTTP::Endpoint.class)-instance-method","html_id":"post(path,endpoint:HTTP::Endpoint.class)-instance-method","name":"post","doc":"Draw a route for *path* with `POST` calling *endpoint*.\nSee `Endpoint`. If a `View` instance is returned, then the\n`::HTTP::Server::Response#view` is set  to this view.\n\n```\nrouter = Router.new do\n  post \"/bar\", MyEndpoint\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>POST</code> calling <em>endpoint</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"HTTP::Endpoint.class"}],"args_string":"(path, endpoint : <span class=\"t\">HTTP</span><span class=\"t\">::</span><span class=\"t\">Endpoint</span>.<span class=\"k\">class</span>)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L159","def":{"name":"post","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"HTTP::Endpoint.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"post\"], endpoint)"}},{"id":"put(path,endpoint:HTTP::Endpoint.class)-instance-method","html_id":"put(path,endpoint:HTTP::Endpoint.class)-instance-method","name":"put","doc":"Draw a route for *path* with `PUT` calling *endpoint*.\nSee `Endpoint`. If a `View` instance is returned, then the\n`::HTTP::Server::Response#view` is set  to this view.\n\n```\nrouter = Router.new do\n  put \"/bar\", MyEndpoint\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>PUT</code> calling <em>endpoint</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"HTTP::Endpoint.class"}],"args_string":"(path, endpoint : <span class=\"t\">HTTP</span><span class=\"t\">::</span><span class=\"t\">Endpoint</span>.<span class=\"k\">class</span>)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L159","def":{"name":"put","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"endpoint","doc":null,"default_value":"","external_name":"endpoint","restriction":"HTTP::Endpoint.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"put\"], endpoint)"}},{"id":"put(path,&proc:HTTP::Server::Context->View|UNDERSCORE)-instance-method","html_id":"put(path,&amp;proc:HTTP::Server::Context-&gt;View|UNDERSCORE)-instance-method","name":"put","doc":"Draw a route for *path* with `PUT` method. If a `View` instance\nis returned, then the `::HTTP::Server::Response#view` is set to this view.\n\n```\nrouter = Router.new do\n  put \"/bar\" do |env|\n    env.response << \"Hello from PUT /bar!\"\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>PUT</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : HTTP::Server::Context -> View | UNDERSCORE)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L159","def":{"name":"put","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"(::HTTP::Server::Context -> View | _)"},"return_type":"","visibility":"Public","body":"on(path, [\"put\"], &proc)"}},{"id":"ws(path,&proc:::HTTP::WebSocket,HTTP::Server::Context->)-instance-method","html_id":"ws(path,&amp;proc:::HTTP::WebSocket,HTTP::Server::Context-&gt;)-instance-method","name":"ws","doc":"Draw a WebSocket route for *path*.\n\nA request is currently determined as websocket by `\"Upgrade\": \"Websocket\"` header.\n\n```\nrouter = Router.new do\n  ws \"/foo/:bar\" do |socket, env|\n    socket.send(\"Hello WS!\")\n  end\nend\n```","summary":"<p>Draw a WebSocket route for <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : ::HTTP::WebSocket, HTTP::Server::Context -> )","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L199","def":{"name":"ws","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"(::HTTP::WebSocket, ::HTTP::Server::Context -> )"},"return_type":"","visibility":"Public","body":"add(\"/ws\" + path, ::HTTP::WebSocketHandler.new(&proc))"}},{"id":"ws(path,channel:Onyx::HTTP::Channel.class)-instance-method","html_id":"ws(path,channel:Onyx::HTTP::Channel.class)-instance-method","name":"ws","doc":"Draw a `\"ws://\"` route for *path* binding *channel*. See `Channel`.\nA request is currently determined as websocket by `\"Upgrade\": \"Websocket\"` header.\n\n```\nrouter = Router.new do\n  ws \"/foo\", MyChannel\nend\n```","summary":"<p>Draw a <code>\"ws://\"</code> route for <em>path</em> binding <em>channel</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Onyx::HTTP::Channel.class"}],"args_string":"(path, channel : <span class=\"t\">Onyx</span><span class=\"t\">::</span><span class=\"t\">HTTP</span><span class=\"t\">::</span><span class=\"t\">Channel</span>.<span class=\"k\">class</span>)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L211","def":{"name":"ws","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Onyx::HTTP::Channel.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"add(\"/ws\" + path, ContextProc.new do |context|\n  channel.call(context)\nend)"}}],"macros":[],"types":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Router/BadRequest","path":"Onyx/HTTP/Middleware/Router/BadRequest.html","kind":"class","full_name":"Onyx::HTTP::Middleware::Router::BadRequest","name":"BadRequest","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Error","kind":"class","full_name":"Onyx::HTTP::Error","name":"Error"},"ancestors":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Error","kind":"class","full_name":"Onyx::HTTP::Error","name":"Error"},{"html_id":"github.com/onyxframework/http/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/middleware/router/bad_request.cr","line_number":5,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router/bad_request.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Router","kind":"class","full_name":"Onyx::HTTP::Middleware::Router","name":"Router"},"doc":"Raised when a requst is bad.\nThe default status code is 400. See https://httpstatuses.com/400.","summary":"<p>Raised when a requst is bad.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Router/DuplicateRouteError","path":"Onyx/HTTP/Middleware/Router/DuplicateRouteError.html","kind":"class","full_name":"Onyx::HTTP::Middleware::Router::DuplicateRouteError","name":"DuplicateRouteError","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/onyxframework/http/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/middleware/router.cr","line_number":218,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Router","kind":"class","full_name":"Onyx::HTTP::Middleware::Router","name":"Router"},"doc":"Raised if a duplicate route is found.","summary":"<p>Raised if a duplicate route is found.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"route:String-instance-method","html_id":"route:String-instance-method","name":"route","doc":"The route which caused the error.","summary":"<p>The route which caused the error.</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router.cr#L222","def":{"name":"route","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@route"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Router/MethodNotAllowed","path":"Onyx/HTTP/Middleware/Router/MethodNotAllowed.html","kind":"class","full_name":"Onyx::HTTP::Middleware::Router::MethodNotAllowed","name":"MethodNotAllowed","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Error","kind":"class","full_name":"Onyx::HTTP::Error","name":"Error"},"ancestors":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Error","kind":"class","full_name":"Onyx::HTTP::Error","name":"Error"},{"html_id":"github.com/onyxframework/http/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/middleware/router/method_not_allowed.cr","line_number":6,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router/method_not_allowed.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Router","kind":"class","full_name":"Onyx::HTTP::Middleware::Router","name":"Router"},"doc":"Raised when router has methods for this path other than requested.\nThe `\"Allow\"` header is set to the list of allowed methods in `Middleware::Router`.\nThe default status code is 405. See https://httpstatuses.com/405.","summary":"<p>Raised when router has methods for this path other than requested.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Router/NotFound","path":"Onyx/HTTP/Middleware/Router/NotFound.html","kind":"class","full_name":"Onyx::HTTP::Middleware::Router::NotFound","name":"NotFound","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Error","kind":"class","full_name":"Onyx::HTTP::Error","name":"Error"},"ancestors":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Error","kind":"class","full_name":"Onyx::HTTP::Error","name":"Error"},{"html_id":"github.com/onyxframework/http/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/middleware/router/not_found.cr","line_number":5,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router/not_found.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Router","kind":"class","full_name":"Onyx::HTTP::Middleware::Router","name":"Router"},"doc":"Raised if route is not found for this request.\nThe default status code is 404. See https://httpstatuses.com/404.","summary":"<p>Raised if route is not found for this request.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Router/UpgradeRequired","path":"Onyx/HTTP/Middleware/Router/UpgradeRequired.html","kind":"class","full_name":"Onyx::HTTP::Middleware::Router::UpgradeRequired","name":"UpgradeRequired","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Error","kind":"class","full_name":"Onyx::HTTP::Error","name":"Error"},"ancestors":[{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Error","kind":"class","full_name":"Onyx::HTTP::Error","name":"Error"},{"html_id":"github.com/onyxframework/http/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/middleware/router/upgrade_required.cr","line_number":6,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/middleware/router/upgrade_required.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Middleware/Router","kind":"class","full_name":"Onyx::HTTP::Middleware::Router","name":"Router"},"doc":"Raised when router has as `ws` route for this path.\nThe `\"Upgrade\"` header is set to `\"Websocket\"` in `Middleware::Router`.\nThe default status code is 426. See https://httpstatuses.com/426.","summary":"<p>Raised when router has as <code>ws</code> route for this path.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/Server","path":"Onyx/HTTP/Server.html","kind":"class","full_name":"Onyx::HTTP::Server","name":"Server","abstract":false,"superclass":{"html_id":"github.com/onyxframework/http/HTTP/Server","kind":"class","full_name":"HTTP::Server","name":"Server"},"ancestors":[{"html_id":"github.com/onyxframework/http/HTTP/Server","kind":"class","full_name":"HTTP::Server","name":"Server"},{"html_id":"github.com/onyxframework/http/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/http/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-http/server.cr","line_number":16,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/server.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP","kind":"module","full_name":"Onyx::HTTP","name":"HTTP"},"doc":"The Onyx HTTP server. Basically it is just a wrapper around default `::HTTP::Server`,\nwhich logs server start and stop events.\n\n```\nserver = Onyx::HTTP::Server.new(handlers)\nserver.bind_tcp(\"0.0.0.0\", 5000)\nserver.listen\n\n#   INFO -- : ⬛ Onyx::HTTP::Server is listening at http://0.0.0.0:5000\n^C\n#   INFO -- : ⬛ Onyx::HTTP::Server is shutting down!\n```","summary":"<p>The Onyx HTTP server.</p>","class_methods":[],"constructors":[{"id":"new(handlers:Enumerable,**nargs,&block:::HTTP::Handler::HandlerProc)-class-method","html_id":"new(handlers:Enumerable,**nargs,&amp;block:::HTTP::Handler::HandlerProc)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"handlers","doc":null,"default_value":"","external_name":"handlers","restriction":"Enumerable"}],"args_string":"(handlers : Enumerable, **nargs, &block : ::HTTP::Handler::HandlerProc)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/server.cr#L17","def":{"name":"new","args":[{"name":"handlers","doc":null,"default_value":"","external_name":"handlers","restriction":"Enumerable"}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":null,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"::HTTP::Handler::HandlerProc"},"return_type":"","visibility":"Public","body":"middleware = ::HTTP::Server.build_middleware(handlers.to_a.map do |__arg0|\n  __arg0.as(::HTTP::Handler)\nend, block)\nnew(middleware, **nargs)\n"}},{"id":"new(**nargs,&block:::HTTP::Handler::HandlerProc)-class-method","html_id":"new(**nargs,&amp;block:::HTTP::Handler::HandlerProc)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**nargs, &block : ::HTTP::Handler::HandlerProc)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/server.cr#L26","def":{"name":"new","args":[],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":null,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"::HTTP::Handler::HandlerProc"},"return_type":"","visibility":"Public","body":"new(block, **nargs)"}},{"id":"new(*handlers:::HTTP::Handler,**nargs,&block:::HTTP::Handler::HandlerProc)-class-method","html_id":"new(*handlers:::HTTP::Handler,**nargs,&amp;block:::HTTP::Handler::HandlerProc)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"handlers","doc":null,"default_value":"","external_name":"handlers","restriction":"::HTTP::Handler"}],"args_string":"(*handlers : ::HTTP::Handler, **nargs, &block : ::HTTP::Handler::HandlerProc)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/server.cr#L22","def":{"name":"new","args":[{"name":"handlers","doc":null,"default_value":"","external_name":"handlers","restriction":"::HTTP::Handler"}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":0,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"::HTTP::Handler::HandlerProc"},"return_type":"","visibility":"Public","body":"new(handlers.to_a, **nargs, &block)"}},{"id":"new(handlers:Enumerable,**nargs)-class-method","html_id":"new(handlers:Enumerable,**nargs)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"handlers","doc":null,"default_value":"","external_name":"handlers","restriction":"Enumerable"}],"args_string":"(handlers : Enumerable, **nargs)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/server.cr#L30","def":{"name":"new","args":[{"name":"handlers","doc":null,"default_value":"","external_name":"handlers","restriction":"Enumerable"}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"middleware = ::HTTP::Server.build_middleware(handlers.to_a.map do |__arg1|\n  __arg1.as(::HTTP::Handler)\nend)\nnew(middleware, **nargs)\n"}},{"id":"new(middleware:::HTTP::Handler|::HTTP::Handler::HandlerProc,*,name:String=&quot;Onyx::HTTP::Server&quot;,logger:Logger?=::Logger.new(STDOUT),logger_severity:Logger::Severity=::Logger::INFO)-class-method","html_id":"new(middleware:::HTTP::Handler|::HTTP::Handler::HandlerProc,*,name:String=&amp;quot;Onyx::HTTP::Server&amp;quot;,logger:Logger?=::Logger.new(STDOUT),logger_severity:Logger::Severity=::Logger::INFO)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"middleware","doc":null,"default_value":"","external_name":"middleware","restriction":"::HTTP::Handler | ::HTTP::Handler::HandlerProc"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"name","doc":null,"default_value":"\"Onyx::HTTP::Server\"","external_name":"name","restriction":"String"},{"name":"logger","doc":null,"default_value":"::Logger.new(STDOUT)","external_name":"logger","restriction":"::Logger | ::Nil"},{"name":"logger_severity","doc":null,"default_value":"::Logger::INFO","external_name":"logger_severity","restriction":"::Logger::Severity"}],"args_string":"(middleware : ::HTTP::Handler | ::HTTP::Handler::HandlerProc, *, name : String = <span class=\"s\">&quot;Onyx::HTTP::Server&quot;</span>, logger : Logger? = <span class=\"t\">::</span><span class=\"t\">Logger</span>.<span class=\"k\">new</span>(<span class=\"t\">STDOUT</span>), logger_severity : Logger::Severity = <span class=\"t\">::</span><span class=\"t\">Logger</span><span class=\"t\">::</span><span class=\"t\">INFO</span>)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/server.cr#L39","def":{"name":"new","args":[{"name":"middleware","doc":null,"default_value":"","external_name":"middleware","restriction":"::HTTP::Handler | ::HTTP::Handler::HandlerProc"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"name","doc":null,"default_value":"\"Onyx::HTTP::Server\"","external_name":"name","restriction":"String"},{"name":"logger","doc":null,"default_value":"::Logger.new(STDOUT)","external_name":"logger","restriction":"::Logger | ::Nil"},{"name":"logger_severity","doc":null,"default_value":"::Logger::INFO","external_name":"logger_severity","restriction":"::Logger::Severity"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(middleware, name: name, logger: logger, logger_severity: logger_severity)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(*handlers:::HTTP::Handler,**nargs)-class-method","html_id":"new(*handlers:::HTTP::Handler,**nargs)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"handlers","doc":null,"default_value":"","external_name":"handlers","restriction":"::HTTP::Handler"}],"args_string":"(*handlers : ::HTTP::Handler, **nargs)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/server.cr#L35","def":{"name":"new","args":[{"name":"handlers","doc":null,"default_value":"","external_name":"handlers","restriction":"::HTTP::Handler"}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new(handlers.to_a, **nargs)"}}],"instance_methods":[{"id":"listen-instance-method","html_id":"listen-instance-method","name":"listen","doc":"Start listening for requests. Blocks the runtime, just like the vanilla `::HTTP::Server`.","summary":"<p>Start listening for requests.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/server.cr#L50","def":{"name":"listen","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if logger = @logger\n  io = IO::Memory.new\n  ((io << ((\"⬛\".colorize(:green)).mode(:bold))) << \" \") << @name\n  io << (\" is listening at \".colorize(:light_gray))\n  io << (@sockets.join(\", \") do |s|\n    format_address(s)\n  end)\n  logger.log(@logger_severity, io.to_s)\nend\nSignal::INT.trap do\n  if logger = @logger\n    puts(\"\\n\")\n    io = IO::Memory.new\n    ((io << ((\"⬛\".colorize(:red)).mode(:bold))) << \" \") << @name\n    io << (\" is shutting down!\".colorize(:light_gray))\n    logger.not_nil!.log(@logger_severity, io.to_s)\n  end\n  exit\nend\nsuper()\n"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/http/Onyx/HTTP/View","path":"Onyx/HTTP/View.html","kind":"module","full_name":"Onyx::HTTP::View","name":"View","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-http/view.cr","line_number":104,"url":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/view.cr"}],"repository_name":"github.com/onyxframework/http","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/http/Onyx/HTTP","kind":"module","full_name":"Onyx::HTTP","name":"HTTP"},"doc":"A reusable HTTP view.\n\nViews are usually rendered by the `Middleware::Renderer` invoking the `#render` method.\nYou can use views either in raw endpoint procs or within `Endpoint#call`.\n\n```\nstruct UserView\n  include Onyx::HTTP::View\n\n  def initialize(@user : User)\n  end\n\n  def render(context)\n    context.response.content_type = \"text/plain\"\n    context.response << \"id: #{@user.id}, name: #{@user.name}\"\n  end\nend\n\nrouter.get \"/user/:id\" do |env|\n  user = Onyx.query(User.where(id: env.request.path_params[\"id\"].to_i))\n\n  env.response.view = UserView.new(user)\n  # or just return it\n  UserView.new(user)\nend\n\nstruct GetUser\n  include Onyx::HTTP::Endpoint\n\n  params do\n    path do\n      type id : Int32\n    end\n  end\n\n  def call\n    user = Onyx.query(User.where(id: params.path.id))\n    return UserView.new(user)\n  end\nend\n```\n\nApart from directly implementing the `#render` method, you can use the convenient macros:\n\n* `.text` to render the view as a text with `text/plain` content type by default\n* `.json` to render the view as a JSON with `application/json` content type by default\n* `.xml` to render the view as XML with `application/xml` content type by default\n* `.template` to render the view as a generic template (powered by [Kilt](https://github.com/jeromegn/kilt))\nwith `text/html` content type by default\n\nIf you have only one macro of these three called in a view, then the request's `\"Accept\"`\nheader will be ignored and the view will always be rendered as specified:\n\n```\n# Will always be rendered as `{\"foo\":@foo}`\n# with \"Content-Type\" set to `\"application/json\"`.\nstruct JSONView\n  include Onyx::HTTP::View\n\n  def initialize(@foo : String)\n  end\n\n  json foo: @foo\nend\n```\n\nOtherwise, if you have multiple macros called, then the request's `\"Accept\"` header is\nconsidered and the rendering is determined by it. However, if the `\"Accept\"` header\nis absent or equals to `\"*/*\"`, then the **latter** macro takes precendence:\n\n```\n# If `Accept` header has `application/json` entry with\n# enough q-factor, then the JSON view would be rendered.\n# Otherwise the same check will be made for `text/html` entry.\n# If none succeeded, plain text is rendered then.\nstruct MultiView\n  include Onyx::HTTP::View\n\n  def initialize(@foo : String)\n  end\n\n  json foo: @foo\n  template \"./multi_view.html.ecr\"\n  text \"foo: #{@foo}\"\nend\n```\n\nYou can define multiple renderers of the same type, just alter the arguments.\nThe *accept* argument is what defines the behaviour (it is stored as hash internally,\nthat's why the latter takes precendence when `\"Accept\"` header is `\"*/*\"`):\n\n```\nstruct TheView\n  include Onyx::HTTP::View\n\n  template(\"./view.html.ecr\")\n  template(\"./view.rss.ecr\", content_type: \"text/rss\", accept: {\"text/rss\"})\nend\n```","summary":"<p>A reusable HTTP view.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"render(context:HTTP::Server::Context)-instance-method","html_id":"render(context:HTTP::Server::Context)-instance-method","name":"render","doc":null,"summary":null,"abstract":true,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::HTTP::Server::Context"}],"args_string":"(context : HTTP::Server::Context)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/view.cr#L105","def":{"name":"render","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::HTTP::Server::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[{"id":"json(object,content_type=&quot;application/json&quot;,accept={&quot;application/json&quot;},&block)-macro","html_id":"json(object,content_type=&amp;quot;application/json&amp;quot;,accept={&amp;quot;application/json&amp;quot;},&amp;block)-macro","name":"json","doc":"Add JSON rendering to this view. It is expanded to this:\n\n```\ndef render_to_json(io : IO)\n  ({{object}}).to_json(io)\nend\n\ndef to_json(builder : JSON::Builder)\n  ({{object}}).to_json(builder)\nend\n```","summary":"<p>Add JSON rendering to this view.</p>","abstract":false,"args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"content_type","doc":null,"default_value":"\"application/json\"","external_name":"content_type","restriction":""},{"name":"accept","doc":null,"default_value":"{\"application/json\"}","external_name":"accept","restriction":""}],"args_string":"(object, content_type = <span class=\"s\">&quot;application/json&quot;</span>, accept = {<span class=\"s\">&quot;application/json&quot;</span>}, &block)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/view.cr#L144","def":{"name":"json","args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},{"name":"content_type","doc":null,"default_value":"\"application/json\"","external_name":"content_type","restriction":""},{"name":"accept","doc":null,"default_value":"{\"application/json\"}","external_name":"accept","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    \n{% if @type.methods.find do |m|\n  m.name.stringify == \"to_json\"\nend %}{% else %}\n      def to_json(io : IO)\n        ({{ object }}).to_json(io)\n      end\n\n      def to_json(builder : JSON::Builder)\n        ({{ object }}).to_json(builder)\n      end\n    {% end %}\n\n\n    define_type_renderer(render_to_\n{{ ((content_type.split(\"/\")).map do |s|\n  s.underscore.gsub(/-/, \"_\")\nend.join(\"_\")).id }}\n, \n{{ content_type }}\n, \n{{ accept }}\n) do\n      \n{% if block %}\n        {{ object }} do |{{ (block.args.join(\",\")).id }}|\n          {{ block.body }}\n        end.to_json(io)\n      {% else %}\n        ({{ object }}).to_json(io)\n      {% end %}\n\n    \nend\n  \n"}},{"id":"json(content_type=&quot;application/json&quot;,accept={&quot;application/json&quot;},&block)-macro","html_id":"json(content_type=&amp;quot;application/json&amp;quot;,accept={&amp;quot;application/json&amp;quot;},&amp;block)-macro","name":"json","doc":"Add JSON rendering with builder to this view.\n\n```\nstruct TestView\n  include Onyx::HTTP::View\n\n  def initialize(@foo : String, @bar : Int32? = nil)\n  end\n\n  json do\n    object do\n      field \"foo\", @foo\n      field \"bar\", @bar\n    end\n  end\nend\n```","summary":"<p>Add JSON rendering with builder to this view.</p>","abstract":false,"args":[{"name":"content_type","doc":null,"default_value":"\"application/json\"","external_name":"content_type","restriction":""},{"name":"accept","doc":null,"default_value":"{\"application/json\"}","external_name":"accept","restriction":""}],"args_string":"(content_type = <span class=\"s\">&quot;application/json&quot;</span>, accept = {<span class=\"s\">&quot;application/json&quot;</span>}, &block)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/view.cr#L183","def":{"name":"json","args":[{"name":"content_type","doc":null,"default_value":"\"application/json\"","external_name":"content_type","restriction":""},{"name":"accept","doc":null,"default_value":"{\"application/json\"}","external_name":"accept","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    \n{% if @type.methods.find do |m|\n  m.name.stringify == \"to_json\"\nend %}{% else %}\n      def build_json(builder, &block)\n        with builder yield\n      end\n\n      def to_json(io : IO)\n        builder = JSON::Builder.new(io)\n\n        builder.document do\n          build_json(builder) do\n            {{ (yield).id }}\n          end\n        end\n      end\n\n      def to_json(builder : JSON::Builder)\n        build_json(builder) do\n          {{ (yield).id }}\n        end\n      end\n    {% end %}\n\n\n    define_type_renderer(render_to_\n{{ ((content_type.split(\"/\")).map do |s|\n  s.underscore.gsub(/-/, \"_\")\nend.join(\"_\")).id }}\n, \n{{ content_type }}\n, \n{{ accept }}\n) do\n      to_json(io)\n    \nend\n  \n"}},{"id":"json(content_type=&quot;application/json&quot;,accept={&quot;application/json&quot;},**object)-macro","html_id":"json(content_type=&amp;quot;application/json&amp;quot;,accept={&amp;quot;application/json&amp;quot;},**object)-macro","name":"json","doc":"Add JSON rendering to this view. It is expanded like this:\n\n```\ndef to_application_json(io)\n  ({{object}}).to_json(io)\nend\n```","summary":"<p>Add JSON rendering to this view.</p>","abstract":false,"args":[{"name":"content_type","doc":null,"default_value":"\"application/json\"","external_name":"content_type","restriction":""},{"name":"accept","doc":null,"default_value":"{\"application/json\"}","external_name":"accept","restriction":""}],"args_string":"(content_type = <span class=\"s\">&quot;application/json&quot;</span>, accept = {<span class=\"s\">&quot;application/json&quot;</span>}, **object)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/view.cr#L218","def":{"name":"json","args":[{"name":"content_type","doc":null,"default_value":"\"application/json\"","external_name":"content_type","restriction":""},{"name":"accept","doc":null,"default_value":"{\"application/json\"}","external_name":"accept","restriction":""}],"double_splat":{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":""},"splat_index":null,"block_arg":null,"visibility":"Public","body":"    json(\n{{ object }}\n)\n  \n"}},{"id":"template(template,content_type=&quot;text/html&quot;,accept={&quot;text/html&quot;})-macro","html_id":"template(template,content_type=&amp;quot;text/html&amp;quot;,accept={&amp;quot;text/html&amp;quot;})-macro","name":"template","doc":"Add template rendering to this view. It is expanded like this:\n\n```\ndef render_to_html(io : IO)\n  Kilt.embed(\"#{__DIR__}/#{{{template}}}\", io)\nend\n```","summary":"<p>Add template rendering to this view.</p>","abstract":false,"args":[{"name":"template","doc":null,"default_value":"","external_name":"template","restriction":""},{"name":"content_type","doc":null,"default_value":"\"text/html\"","external_name":"content_type","restriction":""},{"name":"accept","doc":null,"default_value":"{\"text/html\"}","external_name":"accept","restriction":""}],"args_string":"(template, content_type = <span class=\"s\">&quot;text/html&quot;</span>, accept = {<span class=\"s\">&quot;text/html&quot;</span>})","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/view.cr#L127","def":{"name":"template","args":[{"name":"template","doc":null,"default_value":"","external_name":"template","restriction":""},{"name":"content_type","doc":null,"default_value":"\"text/html\"","external_name":"content_type","restriction":""},{"name":"accept","doc":null,"default_value":"{\"text/html\"}","external_name":"accept","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    define_type_renderer(render_to_\n{{ ((content_type.split(\"/\")).map do |s|\n  s.underscore.gsub(/-/, \"_\")\nend.join(\"_\")).id }}\n, \n{{ content_type }}\n, \n{{ accept }}\n) do\n      Kilt.embed(\"#{__DIR__}/#{\n{{ template }}\n}\", io)\n    \nend\n  \n"}},{"id":"text(value,content_type=&quot;text/plain&quot;,accept={&quot;text/plain&quot;})-macro","html_id":"text(value,content_type=&amp;quot;text/plain&amp;quot;,accept={&amp;quot;text/plain&amp;quot;})-macro","name":"text","doc":"Add plain text rendering to this view. It is expanded like this:\n\n```\ndef render_to_plain(io : IO)\n  io << ({{value}})\nend\n```","summary":"<p>Add plain text rendering to this view.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"content_type","doc":null,"default_value":"\"text/plain\"","external_name":"content_type","restriction":""},{"name":"accept","doc":null,"default_value":"{\"text/plain\"}","external_name":"accept","restriction":""}],"args_string":"(value, content_type = <span class=\"s\">&quot;text/plain&quot;</span>, accept = {<span class=\"s\">&quot;text/plain&quot;</span>})","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/view.cr#L114","def":{"name":"text","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"content_type","doc":null,"default_value":"\"text/plain\"","external_name":"content_type","restriction":""},{"name":"accept","doc":null,"default_value":"{\"text/plain\"}","external_name":"accept","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    define_type_renderer(render_to_\n{{ ((content_type.split(\"/\")).map do |s|\n  s.underscore.gsub(/-/, \"_\")\nend.join(\"_\")).id }}\n, \n{{ content_type }}\n, \n{{ accept }}\n) do\n      io << (\n{{ value }}\n)\n    \nend\n  \n"}},{"id":"xml(content_type=&quot;application/xml&quot;,accept={&quot;application/xml&quot;},&block)-macro","html_id":"xml(content_type=&amp;quot;application/xml&amp;quot;,accept={&amp;quot;application/xml&amp;quot;},&amp;block)-macro","name":"xml","doc":"Add XML rendering with builder to this view.\nSee [XML::Builder](https://crystal-lang.org/api/latest/XML/Builder.html) for methods.\n\n```\nstruct TestView\n  include Onyx::HTTP::View\n\n  def initialize(@foo : String, @bar : Int32? = nil)\n  end\n\n  xml do\n    element(\"foo\", @foo) do\n      attribute(\"bar\", @bar)\n    end\n  end\nend\n```","summary":"<p>Add XML rendering with builder to this view.</p>","abstract":false,"args":[{"name":"content_type","doc":null,"default_value":"\"application/xml\"","external_name":"content_type","restriction":""},{"name":"accept","doc":null,"default_value":"{\"application/xml\"}","external_name":"accept","restriction":""}],"args_string":"(content_type = <span class=\"s\">&quot;application/xml&quot;</span>, accept = {<span class=\"s\">&quot;application/xml&quot;</span>}, &block)","source_link":"https://github.com/onyxframework/http/blob/dd50c8ea92700c947f5a65eb927fca2f2043584b/src/onyx-http/view.cr#L239","def":{"name":"xml","args":[{"name":"content_type","doc":null,"default_value":"\"application/xml\"","external_name":"content_type","restriction":""},{"name":"accept","doc":null,"default_value":"{\"application/xml\"}","external_name":"accept","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    def build_xml(builder, &block)\n      with builder yield\n    \nend\n\n    def to_xml(io : IO)\n      builder = XML::Builder.new(io)\n\n      builder.document do\n        build_xml(builder) do\n          \n{{ (yield).id }}\n\n        \nend\n      \nend\n    \nend\n\n    def to_xml(builder : XML::Builder)\n      build_xml(builder) do\n        \n{{ (yield).id }}\n\n      \nend\n    \nend\n\n    define_type_renderer(render_to_\n{{ ((content_type.split(\"/\")).map do |s|\n  s.underscore.gsub(/-/, \"_\")\nend.join(\"_\")).id }}\n, \n{{ content_type }}\n, \n{{ accept }}\n) do\n      to_xml(io)\n    \nend\n  \n"}}],"types":[]}]}]}]}}