{"repository_name":"github.com/onyxframework/rest","body":"# ⚛️ Atom::Web\n\n[![Built with Crystal](https://img.shields.io/badge/built%20with-crystal-000000.svg?style=flat-square)](https://crystal-lang.org/)\n[![Build status](https://img.shields.io/travis/atomframework/web/master.svg?style=flat-square)](https://travis-ci.org/atomframework/web)\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg?style=flat-square)](https://atomframework.github.io/web/)\n[![Releases](https://img.shields.io/github/release/atomframework/web.svg?style=flat-square)](https://github.com/atomframework/web/releases)\n[![Awesome](https://github.com/vladfaust/awesome/blob/badge-flat-alternative/media/badge-flat-alternative.svg)](https://github.com/veelenga/awesome-crystal)\n[![vladfaust.com](https://img.shields.io/badge/style-.com-lightgrey.svg?longCache=true&style=flat-square&label=vladfaust&colorB=0a83d8)](https://vladfaust.com)\n[![Patrons count](https://img.shields.io/badge/dynamic/json.svg?label=patrons&url=https://www.patreon.com/api/user/11296360&query=$.included[0].attributes.patron_count&style=flat-square&colorB=red&maxAge=86400)](https://www.patreon.com/vladfaust)\n\nA collection of HTTP components for building Action-View-oriented frameworks. Used in [Atom Framework](https://github.com/atomframework/atom).\n\n[![Become Patron](https://vladfaust.com/img/patreon-small.svg)](https://www.patreon.com/vladfaust)\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  atom-web:\n    github: atomframework/web\n    version: ~> 0.5.0\n```\n\nThis shard follows [Semantic Versioning v2.0.0](http://semver.org/), so check [releases](https://github.com/atomframework/web/releases) and change the `version` accordingly.\n\n## Included components\n\n* [Action](https://atomframework.github.io/web/Atom/Web/Action.html) - ensapsulates logic\n* [View](https://atomframework.github.io/web/Atom/Web/View.html) - responsible for rendering\n* [Channel](https://atomframework.github.io/web/Atom/Web/Channel.html) - convenient websockets wrapper\n* Handlers\n  * [CORS](https://atomframework.github.io/web/Atom/Web/Handlers/CORS.html) - handles [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing)\n  * [Proc](https://atomframework.github.io/web/Atom/Web/Handlers/Proc.html) - calls a proc on each call\n  * [RequestLogger](https://atomframework.github.io/web/Atom/Web/Handlers/RequestLogger.html) - colorfully logs requests\n  * [Rescuer](https://atomframework.github.io/web/Atom/Web/Handlers/Rescuer.html) - rescues errors\n  * [Router](https://atomframework.github.io/web/Atom/Web/Handlers/Router.html) - routes requests\n\n## Usage\n\n* [Without Atom](#without-atom)\n  * [Basic example](#basic-example)\n  * [Simple JSON API example](#simple-json-api-example)\n  * [Websockets](#websockets-example)\n\n### Without [Atom](https://github.com/atomframework/atom)\n\n[Atom](https://github.com/atomframework/atom) reduces overall code by wrapping common scenarios into macros, so the code below is quite verbose.\n\n#### Basic example\n\n```crystal\nrequire \"atom-web\"\n\nrecord User, id : Int32, name : String\n\nUsers = {1 => User.new(1, \"John\")}\n\nstruct Actions::GetUser\n  include Atom::Action\n\n  params do\n    type id : Int32\n  end\n\n  errors do\n    type UserNotFound(404)\n  end\n\n  def call\n    user = Users[params.id]? || raise UserNotFound.new\n    return Views::User.new(user)\n  end\nend\n\nstruct Views::User\n  include Atom::View\n\n  def initialize(@user : ::User)\n  end\n\n  def to_s(io)\n    io << \"id: #{@user.id}, name: #{@user.name}\\n\"\n  end\nend\n\nlogger = Logger.new(STDOUT, Logger::DEBUG)\nrequest_logger = Atom::Handlers::RequestLogger.new(logger)\n\nrouter = Atom::Handlers::Router.new do\n  get \"/users/:id\", Actions::GetUser\nend\n\nserver = HTTP::Server.new([request_logger, router]) do |context|\n  if proc = context.proc\n    proc.call(context)\n\n    if error = context.response.error\n      case error\n      when Params::Error\n        code = 400\n        message = error.message\n      when Atom::Action::Error\n        code = error.code\n        message = error.class.name\n      else\n        code = 500\n        message = error.message\n      end\n\n      context.response.respond_with_error(message, code)\n    elsif view = context.response.view\n      context.response.print(view)\n    end\n  else\n    context.response.respond_with_error(\"Route Not Found: #{context.request.path}\", 404)\n  end\nend\n\nserver.bind_tcp(5000)\nlogger.info(\"Listening at http://#{server.addresses.first}\")\nserver.listen\n\n# I,  INFO -- : Listening at http://127.0.0.1:5000\n# D, DEBUG -- :     GET /users/1 200 139μs\n# D, DEBUG -- :     GET /users/2 404 197μs\n# D, DEBUG -- :     GET /users/foo 400 623μs\n# D, DEBUG -- :     GET /user 404 111μs\n```\n\n```shell\n$ curl http://127.0.0.1:5000/users/1\nid: 1, name: John\n$ curl http://127.0.0.1:5000/users/2\n404 Actions::GetUser::UserNotFound\n$ curl http://127.0.0.1:5000/users/foo\n400 Couldn't cast parameter `id` from `String` to `Int32`\n$ curl http://127.0.0.1:5000/user\n404 Route Not Found: /user\n```\n\n#### Simple JSON API example\n\nIn this example, an application always returns formatted JSON responses.\n\n```crystal\nrequire \"atom-web\"\n\nrecord User, id : Int32, name : String\n\nUsers = {1 => User.new(1, \"John\")}\n\nstruct Actions::GetUser\n  include Atom::Action\n\n  params do\n    type id : Int32\n  end\n\n  errors do\n    type UserNotFound(404), id : Int32 do\n      super \"User not found with id #{id}\"\n    end\n  end\n\n  def call\n    user = Users[params.id]? || raise UserNotFound.new(params.id)\n    return Views::User.new(user)\n  end\nend\n\nstruct Views::User\n  include Atom::View\n\n  def initialize(@user : ::User)\n  end\n\n  def to_json(json)\n    {id: @user.id, name: @user.name}.to_json(json)\n  end\nend\n\nrouter = Atom::Handlers::Router.new do\n  get \"/users/:id\", Actions::GetUser\nend\n\nserver = HTTP::Server.new([router]) do |context|\n  if proc = context.proc\n    proc.call(context)\n\n    if context.response.error || context.response.view\n      json = JSON::Builder.new(context.response.output)\n      context.response.content_type = \"application/json\"\n\n      json.document do\n        if error = context.response.error\n          message = error.message\n          payload = nil\n\n          case error\n          when Params::TypeCastError\n            code = 400\n            payload = {parameter: error.pretty_path, expectedType: error.target, actualType: error.source}\n          when Params::MissingError\n            code = 400\n            payload = {parameter: error.pretty_path}\n          when Params::Error\n            code = 400\n          when Atom::Action::Error\n            code = error.code\n            payload = error.payload\n          else code = 500\n          end\n\n          context.response.status_code = code\n\n          {\n            success: false,\n            error:   {\n              name:    error.class.name.split(\"::\").last,\n              message: message,\n              payload: payload,\n            },\n          }.to_json(json)\n        elsif view = context.response.view\n          {\n            success: true,\n            data:    view,\n          }.to_json(json)\n        end\n      end\n    end\n  else\n    json = JSON::Builder.new(context.response.output)\n    context.response.content_type = \"application/json\"\n    context.response.status_code = 404\n\n    json.document do\n      {\n        success: false,\n        error:   {\n          name:    \"RouteNotFound\",\n          message: \"Route not found: #{context.request.path}\",\n          payload: {\n            path: context.request.path,\n          },\n        },\n      }.to_json(json)\n    end\n  end\nend\n\nserver.bind_tcp(5000)\nputs \"Listening at http://#{server.addresses.first}\"\nserver.listen\n```\n\n```shell\n$ curl http://127.0.0.1:5000/users/1\n{\"success\":true,\"data\":{\"id\":1,\"name\":\"John\"}}\n$ curl http://127.0.0.1:5000/users/2\n{\"success\":false,\"error\":{\"name\":\"UserNotFound\",\"message\":\"User not found with id 2\",\"payload\":{\"id\":2}}}\n$ curl http://127.0.0.1:5000/users/foo\n{\"success\":false,\"error\":{\"name\":\"TypeCastError\",\"message\":\"Couldn't cast parameter `id` from `String` to `Int32`\",\"payload\":{\"parameter\":\"id\",\"expectedType\":\"Int32\",\"actualType\":\"String\"}}}\n$ curl http://127.0.0.1:5000/user\n{\"success\":false,\"error\":{\"name\":\"RouteNotFound\",\"message\":\"Route not found: /user\",\"payload\":{\"path\":\"/user\"}}}\n```\n\n#### Websockets example\n\nWe call them *Channels* for convenience.\n\n```crystal\nrequire \"atom-web\"\n\nclass Notifications\n  include Atom::Channel\n\n  @@subscriptions = Array(self).new\n\n  def self.notify(message)\n    @@subscriptions.each &.socket.send(message)\n  end\n\n  def on_open\n    socket.send(\"Hello\")\n    @@subscriptions.push(self)\n  end\n\n  def on_close\n    @@subscriptions.delete(self)\n  end\nend\n\nrouter = Atom::Handlers::Router.new do\n  ws \"/notifications\" do |socket, env|\n    Notifications.subscribe(socket, env)\n  end\nend\n\n# Later in the code...\n\nNotifications.notify(\"Something happened!\") # Will notify all subscribers binded to this particular Crystal process\n```\n\n## Contributing\n\n1. Fork it ( https://github.com/atomframework/web/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [@vladfaust](https://github.com/vladfaust) Vlad Faust - creator, maintainer\n","program":{"html_id":"github.com/onyxframework/rest/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/onyxframework/rest","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/rest/Atom","path":"Atom.html","kind":"class","full_name":"Atom","name":"Atom","abstract":false,"superclass":{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/rest/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/action/errors.cr","line_number":1,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/errors.cr"},{"filename":"atom/action/params.cr","line_number":3,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/params.cr"},{"filename":"atom/handlers/router.cr","line_number":8,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr"},{"filename":"atom/view.cr","line_number":3,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/view.cr"},{"filename":"atom/action/router_extension.cr","line_number":7,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/router_extension.cr"},{"filename":"atom/action.cr","line_number":4,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action.cr"},{"filename":"atom/channel/params.cr","line_number":3,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel/params.cr"},{"filename":"atom/channel/router_extension.cr","line_number":3,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel/router_extension.cr"},{"filename":"atom/channel.cr","line_number":5,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel.cr"},{"filename":"atom/handlers/cors.cr","line_number":3,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/cors.cr"},{"filename":"atom/handlers/proc.cr","line_number":3,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/proc.cr"},{"filename":"atom/handlers/request_logger.cr","line_number":6,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/request_logger.cr"},{"filename":"atom/handlers/rescuer.cr","line_number":3,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/rescuer.cr"},{"filename":"atom-web.cr","line_number":3,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom-web.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/rest/Atom/Action","path":"Atom/Action.html","kind":"module","full_name":"Atom::Action","name":"Action","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"atom/action/errors.cr","line_number":2,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/errors.cr"},{"filename":"atom/action/params.cr","line_number":4,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/params.cr"},{"filename":"atom/action.cr","line_number":53,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Atom","kind":"class","full_name":"Atom","name":"Atom"},"doc":"A callable HTTP action with [Params](https://github.com/vladfaust/params.cr) included.\n\nAn Action itself isn't responsible for rendering. It *should* return an `Atom::View` instance,\nand that view *should* be rendered in future handlers.\n\nActions have special `.params` definition syntax, it's basically a convenient wrapper\nover default NamedTuple syntax of [Params](https://github.com/vladfaust/params.cr).\n\nAction errors are to be defined in `.errors` block.\n\n```\nstruct Actions::GetUser\n  include Atom::Action\n\n  params do\n    type id : Int32\n  end\n\n  errors do\n    type UserNotFound(404), id : Int32\n  end\n\n  def call\n    user = User[params.id]\n    raise UserNotFound.new(params.id) unless user\n    return Views::User.new(user)\n  end\nend\n\nActions::GetUser.call(env) # => Views::User instance, if not raised Params::Error or UserNotFound\n```\n\nRouter example:\n\n```\nrouter = Atom::Handlers::Router.new do\n  get \"/\", Actions::GetUser\n  # Equivalent of\n  get \"/\" do |context|\n    begin\n      return_value = Actions::GetUser.call(context)\n      context.response.view = return_value if return_value.is_a?(Atom::View)\n    rescue e : Params::Error | Action::Error\n      context.response.error = e\n    end\n  end\nend\n```","summary":"<p>A callable HTTP action with <a href=\"https://github.com/vladfaust/params.cr\" target=\"_blank\">Params</a> included.</p>","class_methods":[],"constructors":[{"id":"new(context:HTTP::Server::Context)-class-method","html_id":"new(context:HTTP::Server::Context)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"}],"args_string":"(context : HTTP::Server::Context)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action.cr#L140","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action.cr#L140","def":{"name":"new","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(context)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"call-instance-method","html_id":"call-instance-method","name":"call","doc":"Where all the action takes place.","summary":"<p>Where all the action takes place.</p>","abstract":true,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action.cr#L55","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action.cr#L55","def":{"name":"call","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[{"id":"errors-macro","html_id":"errors-macro","name":"errors","doc":"Optional errors definition macro.\n\n```\nerrors do\n  type UserNotFound(404)\n\n  # This error has variable `attributes` and custom block called on initialization\n  type InvalidUser(409), attributes : Hash(String, String) do\n    # All errors inherit from Exception, so `super` sets the error message\n    super(\"User has invalid attributes: #{attributes}\")\n  end\nend\n\ndef call\n  raise UserNotFound.new\n  raise InvalidUser.new({\"name\" => \"too short\"})\nrescue e : UserNotFound\n  pp e.code    # => 404\n  pp e.payload # => nil\n  pp e.message # => nil\nrescue e : InvalidUser\n  pp e.code    # => 409\n  pp e.payload # => {attributes: {\"name\" => \"too short\"}}\n  pp e.message # => \"User has invalid attributes: {\\\"name\\\" => \\\"too short\\\"}\"\nend\n```","summary":"<p>Optional errors definition macro.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/errors.cr#L219","def":{"name":"errors","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"      \n{% if block && block.body %}{% else %}\n        {% raise(\"Expected `errors` macro to be called with a block.\\n\\n\\e[32m+\\e[39m️ Valid code:\\n\\n  errors \\e[32mdo\\n    type NotFound(404)\\n  end\\e[39m\") %}\n      {% end %}\n\n\n      \n{% if block.body.is_a?(Call) %}\n        define_error({{ block.body }})\n      {% else %}{% if block.body.is_a?(Expressions) %}\n        {% for exp in block.body.expressions %}\n          define_error({{ exp }})\n        {% end %}\n      {% else %}\n        {% raise(\"Expected an `errors` macro call contain errors defintions.\\n\\n\\e[31m-\\e[39m️ Your code:\\n\\n  errors do\\n    \\e[31m#{(yield).id}\\e[39m\\n  end\\n\\n\\e[32m+\\e[39m️ Valid code:\\n\\n  errors do\\n    \\e[32mtype NotFound(404)\\e[39m\\n  end\") %}\n      {% end %}{% end %}\n\n    \n"}},{"id":"params-macro","html_id":"params-macro","name":"params","doc":"Optional params definition macro. It's powered by [Params](https://github.com/vladfaust/params.cr) shard.\n\nHowever, to avoid original cumbersome NamedTuple syntax, a new simpler syntax is implemented:\n\n```\nparams do\n  type id : Int32\n  type foo : Array(String) | Nil\n  type user, nilable: true do\n    type name : String\n    type email : String?\n  end\nend\n\n# Is essentialy the same as\n\nParams.mapping({\n  id:   Int32,\n  foo:  Array(String) | Nil,\n  user: {\n    name:  String,\n    email: String?,\n  } | Nil,\n})\n```\n\nParams can be accessed by `#params` getter. (e.g. `params.id`).","summary":"<p>Optional params definition macro.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/params.cr#L32","def":{"name":"params","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"      struct Params\n        ::Params.mapping(\n{\n          \n{{ run(\"../ext/params/type_macro_parser\", (yield).id) }}\n\n        })\n      \nend\n\n      getter params : Params\n\n      def initialize(@context : HTTP::Server::Context)\n        @params = Params.new(context.request, self.class.max_body_size, self.class.preserve_body)\n      \nend\n    \n"}}],"types":[{"html_id":"github.com/onyxframework/rest/Atom/Action/Error","path":"Atom/Action/Error.html","kind":"class","full_name":"Atom::Action::Error(Code)","name":"Error","abstract":true,"superclass":{"html_id":"github.com/onyxframework/rest/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/onyxframework/rest/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/rest/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/action/errors.cr","line_number":4,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/errors.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Atom/Action","kind":"module","full_name":"Atom::Action","name":"Action"},"doc":"All errors defined in `Action.errors` macro will inheritr from this class.","summary":"<p>All errors defined in <code><a href=\"../../Atom/Action.html#errors-macro\">Action.errors</a></code> macro will inheritr from this class.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"code:Int32-instance-method","html_id":"code:Int32-instance-method","name":"code","doc":"The HTTP status code, extracted from `Code` type variable.\n\n```\ntype UserNotFound(404)\n\nerror = UserNotFound.new\nerror.code # => 404\n```","summary":"<p>The HTTP status code, extracted from <code>Code</code> type variable.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/errors.cr#L13","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/errors.cr#L13","def":{"name":"code","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@code"}},{"id":"payload:NamedTuple?-instance-method","html_id":"payload:NamedTuple?-instance-method","name":"payload","doc":"The payload of this error. Will be nil if no error variables are defined.\n\n```\ntype UserNotFound(404), id : Int32\n\nerror = UserNotFound.new(42)\nerror.payload # => {id: 42}\n```","summary":"<p>The payload of this error.</p>","abstract":true,"args":[],"args_string":" : NamedTuple?","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/errors.cr#L23","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/errors.cr#L23","def":{"name":"payload","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"NamedTuple | Nil","visibility":"Public","body":""}}],"macros":[],"types":[]}]},{"html_id":"github.com/onyxframework/rest/Atom/Channel","path":"Atom/Channel.html","kind":"module","full_name":"Atom::Channel","name":"Channel","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"atom/channel/params.cr","line_number":4,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel/params.cr"},{"filename":"atom/channel.cr","line_number":57,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Atom","kind":"class","full_name":"Atom","name":"Atom"},"doc":"A callable websocket Channel with [Params](https://github.com/vladfaust/params.cr) included.\n\nChannels have special `.params` definition syntax, it's basically a convenient wrapper\nover default NamedTuple syntax of [Params](https://github.com/vladfaust/params.cr).\n\n```\nclass UserNotifications\n  include Atom::Channel\n\n  params do\n    type id : Int32\n    type foo : Array(String) | Nil\n    type user, nilable: true do\n      type name : String\n      type email : String?\n    end\n  end\n\n  def self.notify(user : User, payload : String)\n    if socket = @@subscriptions[user]?\n      socket.notify(payload)\n    end\n  end\n\n  def on_open\n    @@subscriptions[auth.user] = self\n  end\n\n  def notify(payload : String)\n    socket.send(payload)\n  end\n\n  def on_close\n    @@subscriptions[auth.user] = nil\n  end\nend\n\nrouter = Atom::Handlers::Router.new do\n  ws \"/notifications\" do |socket, env|\n    UserNotifications.subscribe(socket, env)\n    # Or\n    UserNotifications.call(socket, env)\n  end\n  # Or\n  ws \"/notifications\", UserNotifications\nend\n\n# Later in the code\n\nUserNotifications.notify(user, \"You've got a message!\")\n```","summary":"<p>A callable websocket Channel with <a href=\"https://github.com/vladfaust/params.cr\" target=\"_blank\">Params</a> included.</p>","class_methods":[],"constructors":[{"id":"new(socket:HTTP::Server::Context,context:HTTP::WebSocket)-class-method","html_id":"new(socket:HTTP::Server::Context,context:HTTP::WebSocket)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"socket","doc":null,"default_value":"","external_name":"socket","restriction":"HTTP::Server::Context"},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::WebSocket"}],"args_string":"(socket : HTTP::Server::Context, context : HTTP::WebSocket)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel.cr#L137","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel.cr#L137","def":{"name":"new","args":[{"name":"socket","doc":null,"default_value":"","external_name":"socket","restriction":"HTTP::Server::Context"},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::WebSocket"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(socket, context)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"on_binary(binary)-instance-method","html_id":"on_binary(binary)-instance-method","name":"on_binary","doc":"Called when the socket receives a binary message from client.","summary":"<p>Called when the socket receives a binary message from client.</p>","abstract":false,"args":[{"name":"binary","doc":null,"default_value":"","external_name":"binary","restriction":""}],"args_string":"(binary)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel.cr#L67","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel.cr#L67","def":{"name":"on_binary","args":[{"name":"binary","doc":null,"default_value":"","external_name":"binary","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"on_close-instance-method","html_id":"on_close-instance-method","name":"on_close","doc":"Called once when the socket closes.","summary":"<p>Called once when the socket closes.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel.cr#L80","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel.cr#L80","def":{"name":"on_close","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"on_message(message)-instance-method","html_id":"on_message(message)-instance-method","name":"on_message","doc":"Called when the socket receives a message from client.","summary":"<p>Called when the socket receives a message from client.</p>","abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"args_string":"(message)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel.cr#L63","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel.cr#L63","def":{"name":"on_message","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"on_open-instance-method","html_id":"on_open-instance-method","name":"on_open","doc":"Called once when a new socket is opened.","summary":"<p>Called once when a new socket is opened.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel.cr#L59","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel.cr#L59","def":{"name":"on_open","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"on_ping-instance-method","html_id":"on_ping-instance-method","name":"on_ping","doc":"Called when the socket receives a PING message from client.","summary":"<p>Called when the socket receives a PING message from client.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel.cr#L71","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel.cr#L71","def":{"name":"on_ping","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"socket.send(\"PONG\")"}},{"id":"on_pong-instance-method","html_id":"on_pong-instance-method","name":"on_pong","doc":"Called when the socket receives a PONG message from client.","summary":"<p>Called when the socket receives a PONG message from client.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel.cr#L76","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel.cr#L76","def":{"name":"on_pong","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"subscribe-instance-method","html_id":"subscribe-instance-method","name":"subscribe","doc":"Call `#on_open` and bind to the `socket`'s events. Read more in [Crystal API docs](https://crystal-lang.org/api/latest/HTTP/WebSocket.html).","summary":"<p>Call <code><a href=\"../Atom/Channel.html#on_open-instance-method\">#on_open</a></code> and bind to the <code>socket</code>'s events.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel.cr#L111","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel.cr#L111","def":{"name":"subscribe","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on_open\nsocket.on_message do |message|\n  on_message(message)\nend\nsocket.on_binary do |binary|\n  on_binary(binary)\nend\nsocket.on_ping do\n  on_ping\nend\nsocket.on_pong do\n  on_pong\nend\nsocket.on_close do\n  on_close\nend\n"}}],"macros":[{"id":"params-macro","html_id":"params-macro","name":"params","doc":"Optional params definition macro. See `Action.params` for details.\nParams can be accessed by `#params` getter. (e.g. `params.id`).","summary":"<p>Optional params definition macro.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel/params.cr#L7","def":{"name":"params","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"      struct Params\n        ::Params.mapping(\n{\n          \n{{ run(\"../ext/params/type_macro_parser\", (yield).id) }}\n\n        })\n      \nend\n\n      getter params : Params\n\n      def initialize(@socket : HTTP::Server::Context, @context : HTTP::WebSocket)\n        @params = Params.new(context.request, self.class.max_body_size, false)\n      \nend\n    \n"}}],"types":[]},{"html_id":"github.com/onyxframework/rest/Atom/Handlers","path":"Atom/Handlers.html","kind":"module","full_name":"Atom::Handlers","name":"Handlers","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"atom/handlers/router.cr","line_number":9,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr"},{"filename":"atom/action/router_extension.cr","line_number":8,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/router_extension.cr"},{"filename":"atom/channel/router_extension.cr","line_number":4,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel/router_extension.cr"},{"filename":"atom/handlers/cors.cr","line_number":4,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/cors.cr"},{"filename":"atom/handlers/proc.cr","line_number":4,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/proc.cr"},{"filename":"atom/handlers/request_logger.cr","line_number":7,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/request_logger.cr"},{"filename":"atom/handlers/rescuer.cr","line_number":4,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/rescuer.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Atom","kind":"class","full_name":"Atom","name":"Atom"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/rest/Atom/Handlers/CORS","path":"Atom/Handlers/CORS.html","kind":"class","full_name":"Atom::Handlers::CORS","name":"CORS","abstract":false,"superclass":{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/rest/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/rest/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/handlers/cors.cr","line_number":12,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/cors.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/onyxframework/rest/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Atom/Handlers","kind":"module","full_name":"Atom::Handlers","name":"Handlers"},"doc":"Extracted from [kemalyst](https://github.com/kemalyst/kemalyst/blob/master/src/kemalyst/handler/cors.cr).\n\nSee [CORS on Wiki](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing).\n\n```\ncors = Atom::Handlers::CORS.new(allow_headers: %w(accept content-type authorization))\n```","summary":"<p>Extracted from <a href=\"https://github.com/kemalyst/kemalyst/blob/master/src/kemalyst/handler/cors.cr\" target=\"_blank\">kemalyst</a>.</p>","class_methods":[],"constructors":[{"id":"new(allow_origin=&quot;*&quot;,allow_headers=[&quot;accept&quot;,&quot;content-type&quot;]of::String,allow_methods=[&quot;GET&quot;,&quot;HEAD&quot;,&quot;POST&quot;,&quot;DELETE&quot;,&quot;OPTIONS&quot;,&quot;PUT&quot;,&quot;PATCH&quot;]of::String,allow_credentials=false,max_age=0)-class-method","html_id":"new(allow_origin=&amp;quot;*&amp;quot;,allow_headers=[&amp;quot;accept&amp;quot;,&amp;quot;content-type&amp;quot;]of::String,allow_methods=[&amp;quot;GET&amp;quot;,&amp;quot;HEAD&amp;quot;,&amp;quot;POST&amp;quot;,&amp;quot;DELETE&amp;quot;,&amp;quot;OPTIONS&amp;quot;,&amp;quot;PUT&amp;quot;,&amp;quot;PATCH&amp;quot;]of::String,allow_credentials=false,max_age=0)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"allow_origin","doc":null,"default_value":"\"*\"","external_name":"allow_origin","restriction":""},{"name":"allow_headers","doc":null,"default_value":"[\"accept\", \"content-type\"] of ::String","external_name":"allow_headers","restriction":""},{"name":"allow_methods","doc":null,"default_value":"[\"GET\", \"HEAD\", \"POST\", \"DELETE\", \"OPTIONS\", \"PUT\", \"PATCH\"] of ::String","external_name":"allow_methods","restriction":""},{"name":"allow_credentials","doc":null,"default_value":"false","external_name":"allow_credentials","restriction":""},{"name":"max_age","doc":null,"default_value":"0","external_name":"max_age","restriction":""}],"args_string":"(allow_origin = <span class=\"s\">&quot;*&quot;</span>, allow_headers = [<span class=\"s\">&quot;accept&quot;</span>, <span class=\"s\">&quot;content-type&quot;</span>] <span class=\"k\">of</span> <span class=\"t\">::</span><span class=\"t\">String</span>, allow_methods = [<span class=\"s\">&quot;GET&quot;</span>, <span class=\"s\">&quot;HEAD&quot;</span>, <span class=\"s\">&quot;POST&quot;</span>, <span class=\"s\">&quot;DELETE&quot;</span>, <span class=\"s\">&quot;OPTIONS&quot;</span>, <span class=\"s\">&quot;PUT&quot;</span>, <span class=\"s\">&quot;PATCH&quot;</span>] <span class=\"k\">of</span> <span class=\"t\">::</span><span class=\"t\">String</span>, allow_credentials = <span class=\"n\">false</span>, max_age = <span class=\"n\">0</span>)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/cors.cr#L15","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/cors.cr#L15","def":{"name":"new","args":[{"name":"allow_origin","doc":null,"default_value":"\"*\"","external_name":"allow_origin","restriction":""},{"name":"allow_headers","doc":null,"default_value":"[\"accept\", \"content-type\"] of ::String","external_name":"allow_headers","restriction":""},{"name":"allow_methods","doc":null,"default_value":"[\"GET\", \"HEAD\", \"POST\", \"DELETE\", \"OPTIONS\", \"PUT\", \"PATCH\"] of ::String","external_name":"allow_methods","restriction":""},{"name":"allow_credentials","doc":null,"default_value":"false","external_name":"allow_credentials","restriction":""},{"name":"max_age","doc":null,"default_value":"0","external_name":"max_age","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(allow_origin, allow_headers, allow_methods, allow_credentials, max_age)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/cors.cr#L24","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/cors.cr#L24","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  context.response.headers[\"Access-Control-Allow-Origin\"] = @allow_origin\n  if @allow_credentials\n    context.response.headers[\"Access-Control-Allow-Credentials\"] = \"true\"\n  end\n  if @max_age > 0\n    context.response.headers[\"Access-Control-Max-Age\"] = @max_age.to_s\n  end\n  if context.request.method == \"OPTIONS\"\n    context.response.status_code = 200\n    response = \"\"\n    if requested_method = context.request.headers[\"Access-Control-Request-Method\"]\n      if @allow_methods.includes?(requested_method.strip)\n        context.response.headers[\"Access-Control-Allow-Methods\"] = @allow_methods.join(\", \")\n      else\n        context.response.status_code = 403\n        response = \"Method #{requested_method} not allowed.\"\n      end\n    end\n    if requested_headers = context.request.headers[\"Access-Control-Request-Headers\"]\n      (requested_headers.split(\",\")).each do |requested_header|\n        if @allow_headers.includes?(requested_header.strip.downcase)\n          context.response.headers[\"Access-Control-Allow-Headers\"] = @allow_headers.join(\", \")\n        else\n          context.response.status_code = 403\n          response = \"Headers #{requested_headers} not allowed.\"\n        end\n      end\n    end\n    context.response.content_type = \"text/html; charset=utf-8\"\n    context.response.print(response)\n  else\n    call_next(context)\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/rest/Atom/Handlers/Proc","path":"Atom/Handlers/Proc.html","kind":"class","full_name":"Atom::Handlers::Proc","name":"Proc","abstract":false,"superclass":{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/rest/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/rest/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/handlers/proc.cr","line_number":16,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/proc.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/onyxframework/rest/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Atom/Handlers","kind":"module","full_name":"Atom::Handlers","name":"Handlers"},"doc":"Calls the *proc* on each `#call`.\n\n```\nsecret = Atom::Handlers::Proc.new do |handler, context|\n  if context.request.query_params.to_h[\"secret\"]?.try &.== ENV[\"SECRET\"]\n    handler.call_next(context)\n  else\n    context.response.status_code = 403\n  end\nend\n```","summary":"<p>Calls the <em>proc</em> on each <code>#call</code>.</p>","class_methods":[],"constructors":[{"id":"new(&proc:self,HTTP::Server::Context->_)-class-method","html_id":"new(&amp;proc:self,HTTP::Server::Context-&gt;_)-class-method","name":"new","doc":"Initialize a new handler which will call *proc* on `#call`. Do not forget to call `handler.call_next(context)` within.","summary":"<p>Initialize a new handler which will call <em>proc</em> on <code>#call</code>.</p>","abstract":false,"args":[],"args_string":"(&proc : self, HTTP::Server::Context -> _)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/proc.cr#L22","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/proc.cr#L22","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"(self, HTTP::Server::Context -> _)"},"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(&proc) do |_arg0, _arg1|\n  yield _arg0, _arg1\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/rest/Atom/Handlers/RequestLogger","path":"Atom/Handlers/RequestLogger.html","kind":"class","full_name":"Atom::Handlers::RequestLogger","name":"RequestLogger","abstract":false,"superclass":{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/rest/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/rest/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/handlers/request_logger.cr","line_number":17,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/request_logger.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"WS_COLOR","name":"WS_COLOR","value":":cyan","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/onyxframework/rest/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Atom/Handlers","kind":"module","full_name":"Atom::Handlers","name":"Handlers"},"doc":"Debugs requests colorfully into specified *logger*.\n\n```\nlogger = Atom::Handlers::RequestLogger.new(Logger.new(STDOUT).tap &.level=(Logger::DEBUG))\n\n#  DEBUG -- :     GET /users 200 102μs\n#  DEBUG -- :     GET /favicon.ico 404 52μs\n#  DEBUG -- :    POST /users 201 3.74ms\n```","summary":"<p>Debugs requests colorfully into specified <em>logger</em>.</p>","class_methods":[],"constructors":[{"id":"new(logger:Logger)-class-method","html_id":"new(logger:Logger)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"logger","doc":null,"default_value":"","external_name":"logger","restriction":"Logger"}],"args_string":"(logger : Logger)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/request_logger.cr#L22","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/request_logger.cr#L22","def":{"name":"new","args":[{"name":"logger","doc":null,"default_value":"","external_name":"logger","restriction":"Logger"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(logger)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/request_logger.cr#L25","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/request_logger.cr#L25","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @logger.level > Logger::DEBUG\n  return call_next(context)\nelse\n  websocket = context.request.headers.includes_word?(\"Upgrade\", \"Websocket\")\n  if websocket\n    method = ((\"WS\".rjust(7)).colorize(WS_COLOR)).mode(:bold)\n    resource = context.request.resource.colorize(WS_COLOR)\n    progess = \"pending\".colorize(:dark_gray)\n    @logger.debug(\"#{method} #{resource} #{progess}\")\n  end\n  elapsed = Time.measure do\n    call_next(context)\n  end\n  color = :red\n  case context.response.status_code\n  when 100..199\n    color = :cyan\n  when 200..299\n    color = :green\n  when 300..399\n    color = :yellow\n  end\n  method = (((websocket ? \"WS\" : context.request.method).rjust(7)).colorize(color)).mode(:bold)\n  resource = context.request.resource.colorize(color)\n  status_code = (context.response.status_code.colorize(color)).mode(:bold)\n  @logger.debug(\"#{method} #{resource} #{status_code} #{(TimeFormat.auto(elapsed)).colorize(:dark_gray)}\")\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/rest/Atom/Handlers/Rescuer","path":"Atom/Handlers/Rescuer.html","kind":"class","full_name":"Atom::Handlers::Rescuer(T)","name":"Rescuer","abstract":false,"superclass":{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/rest/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/rest/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/handlers/rescuer.cr","line_number":12,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/rescuer.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/onyxframework/rest/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Atom/Handlers","kind":"module","full_name":"Atom::Handlers","name":"Handlers"},"doc":"Rescues `T` and calls *proc* passing the context and the error to it.\n\n```\nrescuer = Atom::Handlers::Rescuer(Exception) do |context, ex|\n  context.respond_with_error(ex.message, 500)\nend\n```","summary":"<p>Rescues <code>T</code> and calls <em>proc</em> passing the context and the error to it.</p>","class_methods":[],"constructors":[{"id":"new(&proc:HTTP::Server::Context,T->_)-class-method","html_id":"new(&amp;proc:HTTP::Server::Context,T-&gt;_)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&proc : HTTP::Server::Context, T -> _)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/rescuer.cr#L17","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/rescuer.cr#L17","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"(HTTP::Server::Context, T -> _)"},"return_type":"","visibility":"Public","body":"_ = Rescuer(T).allocate\n_.initialize(&proc) do |_arg0, _arg1|\n  yield _arg0, _arg1\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/rescuer.cr#L20","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/rescuer.cr#L20","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  call_next(context)\nrescue ex : T\n  @proc.call(context, ex)\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/rest/Atom/Handlers/Router","path":"Atom/Handlers/Router.html","kind":"class","full_name":"Atom::Handlers::Router","name":"Router","abstract":false,"superclass":{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/rest/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/rest/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/handlers/router.cr","line_number":39,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr"},{"filename":"atom/action/router_extension.cr","line_number":9,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/router_extension.cr"},{"filename":"atom/channel/router_extension.cr","line_number":5,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel/router_extension.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/onyxframework/rest/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Atom/Handlers","kind":"module","full_name":"Atom::Handlers","name":"Handlers"},"doc":"Routes a request's path, assigning matching proc to `HTTP::Server::Context#proc` and path params to `HTTP::Request#path_params`.\n\nWhen the route is found, calls the next handler if present.\nSo you should put a processing handler thereafter (or implement server logic).\n\n```\nrouter = Atom::Handlers::Router.new do\n  get \"/\" do |context|\n    context.response.print(\"Hello world!\")\n  end\n\n  ws \"/\" do |socket, context|\n    socket.on_message do |message|\n      # ...\n    end\n  end\nend\n\nserver = HTTP::Server.new(5000, [router]) do |context|\n  if proc = context.proc\n    proc.call(context)\n  else\n    context.response.respond_with_error(\"Not Found\", 404)\n  end\nend\n```\n\nThis handler can be extended with `Action` and `Channel` shortcuts.\nSee corresponding module docs for mor information.","summary":"<p>Routes a request's path, assigning matching proc to <code><a href=\"../../HTTP/Server/Context.html#proc%3AProc%28self%2CNil%29%7CHTTP%3A%3AWebSocketHandler%7CNil-instance-method\">HTTP::Server::Context#proc</a></code> and path params to <code><a href=\"../../HTTP/Request.html#path_params%3AHash%28String%2CString%29%3F-instance-method\">HTTP::Request#path_params</a></code>.</p>","class_methods":[],"constructors":[{"id":"new(&block)-class-method","html_id":"new(&amp;block)-class-method","name":"new","doc":"Initialize a new router and yield it. You should then define routes in *&block*.\n\n```\n# The simplest router\nrouter = Handlers::Router.new do\n  get \"/\" do |env|\n    env.response.print \"Hello world!\"\n  end\nend\n```","summary":"<p>Initialize a new router and yield it.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L61","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L61","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"instance = new\nwith instance yield\ninstance\n"}}],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":"Lookup for a route and invoke `call_next` if succeeded. Raises `NotFoundError` otherwise.","summary":"<p>Lookup for a route and invoke <code>call_next</code> if succeeded.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L68","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L68","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if context.request.headers.includes_word?(\"Upgrade\", \"Websocket\")\n  path = \"/ws\" + context.request.path\n  result = lookup(path)\nelse\n  path = (\"/\" + context.request.method.downcase) + context.request.path\n  result = lookup(path)\nend\ncontext.proc = result.payload\ncontext.request.path_params = result.params\nif @next\n  call_next(context)\nend\n"}},{"id":"delete(path,action:Action.class)-instance-method","html_id":"delete(path,action:Action.class)-instance-method","name":"delete","doc":"Draw a route for *path* with `DELETE` calling *action*. See `Action`.\n\n```\nrouter = Atom::Handlers::Router.new do\n  delete \"/bar\", MyAction\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>DELETE</code> calling <em>action</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"args_string":"(path, action : Action.class)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/router_extension.cr#L32","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/router_extension.cr#L32","def":{"name":"delete","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"delete\"], action)"}},{"id":"delete(path,&proc:ContextProc)-instance-method","html_id":"delete(path,&amp;proc:ContextProc)-instance-method","name":"delete","doc":"Draw a route for *path* with `DELETE` method.\n\n```\nrouter = Handlers::Router.new do\n  delete \"/bar\" do |context|\n    context.response.print(\"Hello from DELETE /bar!\")\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>DELETE</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : ContextProc)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","def":{"name":"delete","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"ContextProc"},"return_type":"","visibility":"Public","body":"on(path, [\"delete\"], &proc)"}},{"id":"delete(path)-instance-method","html_id":"delete(path)-instance-method","name":"delete","doc":"Draw a empty (status 200) route for *path* with `DELETE` method.\n\n```\nrouter = Handlers::Router.new do\n  delete \"/bar\"\nend\n```","summary":"<p>Draw a empty (status 200) route for <em>path</em> with <code>DELETE</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","def":{"name":"delete","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"delete\"])"}},{"id":"get(path,&proc:ContextProc)-instance-method","html_id":"get(path,&amp;proc:ContextProc)-instance-method","name":"get","doc":"Draw a route for *path* with `GET` method.\n\n```\nrouter = Handlers::Router.new do\n  get \"/bar\" do |context|\n    context.response.print(\"Hello from GET /bar!\")\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>GET</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : ContextProc)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","def":{"name":"get","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"ContextProc"},"return_type":"","visibility":"Public","body":"on(path, [\"get\"], &proc)"}},{"id":"get(path,action:Action.class)-instance-method","html_id":"get(path,action:Action.class)-instance-method","name":"get","doc":"Draw a route for *path* with `GET` calling *action*. See `Action`.\n\n```\nrouter = Atom::Handlers::Router.new do\n  get \"/bar\", MyAction\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>GET</code> calling <em>action</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"args_string":"(path, action : Action.class)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/router_extension.cr#L32","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/router_extension.cr#L32","def":{"name":"get","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"get\"], action)"}},{"id":"get(path)-instance-method","html_id":"get(path)-instance-method","name":"get","doc":"Draw a empty (status 200) route for *path* with `GET` method.\n\n```\nrouter = Handlers::Router.new do\n  get \"/bar\"\nend\n```","summary":"<p>Draw a empty (status 200) route for <em>path</em> with <code>GET</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","def":{"name":"get","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"get\"])"}},{"id":"on(path,methods:Array(String))-instance-method","html_id":"on(path,methods:Array(String))-instance-method","name":"on","doc":"Draw a empty (status 200) route for *path* and *methods*.\n\n```\nrouter = Handlers::Router.new do\n  on \"/foo\", methods: %w(get post)\nend\n```","summary":"<p>Draw a empty (status 200) route for <em>path</em> and <em>methods</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"methods","doc":null,"default_value":"","external_name":"methods","restriction":"Array(String)"}],"args_string":"(path, methods : Array(String))","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L105","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L105","def":{"name":"on","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"methods","doc":null,"default_value":"","external_name":"methods","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"methods.map(&.downcase).each do |method|\n  add((\"/\" + method) + path, ContextProc.new do\n  end)\nend"}},{"id":"on(path,methods:Array(String),action:Action.class)-instance-method","html_id":"on(path,methods:Array(String),action:Action.class)-instance-method","name":"on","doc":"Draw a route for *path* and *methods* calling *action*. See `Action`.\n\n```\nrouter = Atom::Handlers::Router.new do\n  on \"/foo\", methods: %w(get post), MyAction\nend\n```","summary":"<p>Draw a route for <em>path</em> and <em>methods</em> calling <em>action</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"methods","doc":null,"default_value":"","external_name":"methods","restriction":"Array(String)"},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"args_string":"(path, methods : Array(String), action : Action.class)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/router_extension.cr#L17","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/router_extension.cr#L17","def":{"name":"on","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"methods","doc":null,"default_value":"","external_name":"methods","restriction":"Array(String)"},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"methods.map(&.downcase).each do |method|\n  add((\"/\" + method) + path, ContextProc.new do |context|\n    begin\n      return_value = action.call(context)\n      if return_value.is_a?(Atom::View)\n        context.response.view = return_value\n      end\n    rescue e : Params::Error\n      context.response.error = e\n    rescue e : Action::Error\n      context.response.error = e\n    end\n  end.as(Node))\nend"}},{"id":"on(path,methods:Array(String),&proc:ContextProc)-instance-method","html_id":"on(path,methods:Array(String),&amp;proc:ContextProc)-instance-method","name":"on","doc":"Draw a route for *path* and *methods*.\n\n```\nrouter = Handlers::Router.new do\n  on \"/foo\", methods: %w(get post) do |context|\n    context.response.print(\"Hello from #{context.request.method} /foo!\")\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> and <em>methods</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"methods","doc":null,"default_value":"","external_name":"methods","restriction":"Array(String)"}],"args_string":"(path, methods : Array(String), &proc : ContextProc)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L92","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L92","def":{"name":"on","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"methods","doc":null,"default_value":"","external_name":"methods","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"ContextProc"},"return_type":"","visibility":"Public","body":"methods.map(&.downcase).each do |method|\n  add((\"/\" + method) + path, proc)\nend"}},{"id":"options(path)-instance-method","html_id":"options(path)-instance-method","name":"options","doc":"Draw a empty (status 200) route for *path* with `OPTIONS` method.\n\n```\nrouter = Handlers::Router.new do\n  options \"/bar\"\nend\n```","summary":"<p>Draw a empty (status 200) route for <em>path</em> with <code>OPTIONS</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","def":{"name":"options","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"options\"])"}},{"id":"options(path,action:Action.class)-instance-method","html_id":"options(path,action:Action.class)-instance-method","name":"options","doc":"Draw a route for *path* with `OPTIONS` calling *action*. See `Action`.\n\n```\nrouter = Atom::Handlers::Router.new do\n  options \"/bar\", MyAction\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>OPTIONS</code> calling <em>action</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"args_string":"(path, action : Action.class)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/router_extension.cr#L32","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/router_extension.cr#L32","def":{"name":"options","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"options\"], action)"}},{"id":"options(path,&proc:ContextProc)-instance-method","html_id":"options(path,&amp;proc:ContextProc)-instance-method","name":"options","doc":"Draw a route for *path* with `OPTIONS` method.\n\n```\nrouter = Handlers::Router.new do\n  options \"/bar\" do |context|\n    context.response.print(\"Hello from OPTIONS /bar!\")\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>OPTIONS</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : ContextProc)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","def":{"name":"options","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"ContextProc"},"return_type":"","visibility":"Public","body":"on(path, [\"options\"], &proc)"}},{"id":"patch(path,&proc:ContextProc)-instance-method","html_id":"patch(path,&amp;proc:ContextProc)-instance-method","name":"patch","doc":"Draw a route for *path* with `PATCH` method.\n\n```\nrouter = Handlers::Router.new do\n  patch \"/bar\" do |context|\n    context.response.print(\"Hello from PATCH /bar!\")\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>PATCH</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : ContextProc)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","def":{"name":"patch","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"ContextProc"},"return_type":"","visibility":"Public","body":"on(path, [\"patch\"], &proc)"}},{"id":"patch(path,action:Action.class)-instance-method","html_id":"patch(path,action:Action.class)-instance-method","name":"patch","doc":"Draw a route for *path* with `PATCH` calling *action*. See `Action`.\n\n```\nrouter = Atom::Handlers::Router.new do\n  patch \"/bar\", MyAction\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>PATCH</code> calling <em>action</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"args_string":"(path, action : Action.class)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/router_extension.cr#L32","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/router_extension.cr#L32","def":{"name":"patch","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"patch\"], action)"}},{"id":"patch(path)-instance-method","html_id":"patch(path)-instance-method","name":"patch","doc":"Draw a empty (status 200) route for *path* with `PATCH` method.\n\n```\nrouter = Handlers::Router.new do\n  patch \"/bar\"\nend\n```","summary":"<p>Draw a empty (status 200) route for <em>path</em> with <code>PATCH</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","def":{"name":"patch","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"patch\"])"}},{"id":"post(path,&proc:ContextProc)-instance-method","html_id":"post(path,&amp;proc:ContextProc)-instance-method","name":"post","doc":"Draw a route for *path* with `POST` method.\n\n```\nrouter = Handlers::Router.new do\n  post \"/bar\" do |context|\n    context.response.print(\"Hello from POST /bar!\")\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>POST</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : ContextProc)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","def":{"name":"post","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"ContextProc"},"return_type":"","visibility":"Public","body":"on(path, [\"post\"], &proc)"}},{"id":"post(path,action:Action.class)-instance-method","html_id":"post(path,action:Action.class)-instance-method","name":"post","doc":"Draw a route for *path* with `POST` calling *action*. See `Action`.\n\n```\nrouter = Atom::Handlers::Router.new do\n  post \"/bar\", MyAction\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>POST</code> calling <em>action</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"args_string":"(path, action : Action.class)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/router_extension.cr#L32","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/router_extension.cr#L32","def":{"name":"post","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"post\"], action)"}},{"id":"post(path)-instance-method","html_id":"post(path)-instance-method","name":"post","doc":"Draw a empty (status 200) route for *path* with `POST` method.\n\n```\nrouter = Handlers::Router.new do\n  post \"/bar\"\nend\n```","summary":"<p>Draw a empty (status 200) route for <em>path</em> with <code>POST</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","def":{"name":"post","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"post\"])"}},{"id":"put(path)-instance-method","html_id":"put(path)-instance-method","name":"put","doc":"Draw a empty (status 200) route for *path* with `PUT` method.\n\n```\nrouter = Handlers::Router.new do\n  put \"/bar\"\nend\n```","summary":"<p>Draw a empty (status 200) route for <em>path</em> with <code>PUT</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","def":{"name":"put","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"put\"])"}},{"id":"put(path,action:Action.class)-instance-method","html_id":"put(path,action:Action.class)-instance-method","name":"put","doc":"Draw a route for *path* with `PUT` calling *action*. See `Action`.\n\n```\nrouter = Atom::Handlers::Router.new do\n  put \"/bar\", MyAction\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>PUT</code> calling <em>action</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"args_string":"(path, action : Action.class)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/router_extension.cr#L32","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/action/router_extension.cr#L32","def":{"name":"put","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Action.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on(path, [\"put\"], action)"}},{"id":"put(path,&proc:ContextProc)-instance-method","html_id":"put(path,&amp;proc:ContextProc)-instance-method","name":"put","doc":"Draw a route for *path* with `PUT` method.\n\n```\nrouter = Handlers::Router.new do\n  put \"/bar\" do |context|\n    context.response.print(\"Hello from PUT /bar!\")\n  end\nend\n```","summary":"<p>Draw a route for <em>path</em> with <code>PUT</code> method.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : ContextProc)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L111","def":{"name":"put","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"ContextProc"},"return_type":"","visibility":"Public","body":"on(path, [\"put\"], &proc)"}},{"id":"ws(path,&proc:WebSocketProc)-instance-method","html_id":"ws(path,&amp;proc:WebSocketProc)-instance-method","name":"ws","doc":"Draw a WebSocket route for *path*.\n\nA request is currently determined as websocket by `\"Upgrade\": \"Websocket\"` header.\n\n```\nrouter = Handlers::Router.new do\n  ws \"/foo/:bar\" do |socket, context|\n    socket.send(\"Hello WS!\")\n  end\nend\n```","summary":"<p>Draw a WebSocket route for <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path, &proc : WebSocketProc)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L148","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L148","def":{"name":"ws","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"WebSocketProc"},"return_type":"","visibility":"Public","body":"add(\"/ws\" + path, HTTP::WebSocketHandler.new(&proc))"}},{"id":"ws(path,channel:Channel.class)-instance-method","html_id":"ws(path,channel:Channel.class)-instance-method","name":"ws","doc":"Draw a WebSocket route for *path* instantiating *channel*. See `Channel`.\n\nA request is currently determined as websocket by `\"Upgrade\": \"Websocket\"` header.\n\n```\nrouter = Atom::Handlers::Router.new do\n  ws \"/foo/:bar\", MyChannel\nend\n```","summary":"<p>Draw a WebSocket route for <em>path</em> instantiating <em>channel</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Channel.class"}],"args_string":"(path, channel : Channel.class)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel/router_extension.cr#L15","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/channel/router_extension.cr#L15","def":{"name":"ws","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""},{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"Channel.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"add(\"/ws\" + path, WebSocketProc.new do |s, c|\n  MyChannel.call(s, c)\nend.as(Node))"}}],"macros":[],"types":[{"html_id":"github.com/onyxframework/rest/Atom/Handlers/Router/ContextProc","path":"Atom/Handlers/Router/ContextProc.html","kind":"alias","full_name":"Atom::Handlers::Router::ContextProc","name":"ContextProc","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"atom/handlers/router.cr","line_number":42,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":true,"aliased":"Proc(HTTP::Server::Context, Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Atom/Handlers/Router","kind":"class","full_name":"Atom::Handlers::Router","name":"Router"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/rest/Atom/Handlers/Router/DuplicateRouteError","path":"Atom/Handlers/Router/DuplicateRouteError.html","kind":"class","full_name":"Atom::Handlers::Router::DuplicateRouteError","name":"DuplicateRouteError","abstract":false,"superclass":{"html_id":"github.com/onyxframework/rest/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/onyxframework/rest/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/rest/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/handlers/router.cr","line_number":153,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Atom/Handlers/Router","kind":"class","full_name":"Atom::Handlers::Router","name":"Router"},"doc":"Raised if duplicate route found.","summary":"<p>Raised if duplicate route found.</p>","class_methods":[],"constructors":[{"id":"new(route)-class-method","html_id":"new(route)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"route","doc":null,"default_value":"","external_name":"route","restriction":""}],"args_string":"(route)","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L156","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L156","def":{"name":"new","args":[{"name":"route","doc":null,"default_value":"","external_name":"route","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(route)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"route:String-instance-method","html_id":"route:String-instance-method","name":"route","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L154","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr#L154","def":{"name":"route","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@route"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/rest/Atom/Handlers/Router/WebSocketProc","path":"Atom/Handlers/Router/WebSocketProc.html","kind":"alias","full_name":"Atom::Handlers::Router::WebSocketProc","name":"WebSocketProc","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"atom/handlers/router.cr","line_number":43,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/handlers/router.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":true,"aliased":"Proc(HTTP::WebSocket, HTTP::Server::Context, Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Atom/Handlers/Router","kind":"class","full_name":"Atom::Handlers::Router","name":"Router"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]},{"html_id":"github.com/onyxframework/rest/Atom/View","path":"Atom/View.html","kind":"module","full_name":"Atom::View","name":"View","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"atom/view.cr","line_number":6,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/view.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Atom","kind":"class","full_name":"Atom","name":"Atom"},"doc":"Include this module to mark an including object as a View. It's likely to be handled\nby a custom Hanlder or within Server block.","summary":"<p>Include this module to mark an including object as a View.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/onyxframework/rest/HTTP","path":"HTTP.html","kind":"module","full_name":"HTTP","name":"HTTP","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"atom/ext/http/request/path_params.cr","line_number":1,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/ext/http/request/path_params.cr"},{"filename":"atom/ext/http/server/context/proc.cr","line_number":1,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/ext/http/server/context/proc.cr"},{"filename":"atom/ext/http/server/response/view.cr","line_number":3,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/ext/http/server/response/view.cr"},{"filename":"atom/ext/http/server/response/error.cr","line_number":1,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/ext/http/server/response/error.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"The HTTP module contains `HTTP::Client`, `HTTP::Server` and `HTTP::WebSocket` implementations.","summary":"<p>The HTTP module contains <code>HTTP::Client</code>, <code><a href=\"HTTP/Server.html\">HTTP::Server</a></code> and <code>HTTP::WebSocket</code> implementations.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/rest/HTTP/Request","path":"HTTP/Request.html","kind":"class","full_name":"HTTP::Request","name":"Request","abstract":false,"superclass":{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/rest/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/ext/http/request/path_params.cr","line_number":2,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/ext/http/request/path_params.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/HTTP","kind":"module","full_name":"HTTP","name":"HTTP"},"doc":"An HTTP request.\n\nIt serves both to perform requests by an `HTTP::Client` and to\nrepresent requests received by an `HTTP::Server`.\n\nA request always holds an `IO` as a body.\nWhen creating a request with a `String` or `Bytes` its body\nwill be a `IO::Memory` wrapping these, and the `Content-Length`\nheader will be set appropriately.","summary":"<p>An HTTP request.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"path_params:Hash(String,String)?-instance-method","html_id":"path_params:Hash(String,String)?-instance-method","name":"path_params","doc":"A hash containing path params (extracted from the request's path). It's automatically set when routing with `Atom::Handlers::Router`.\n\nFor example, request with path `\"/user/42/edit\"` routed with `put \"/user/:id/edit\"` will have `{\"id\" => \"42\"}` path params.","summary":"<p>A hash containing path params (extracted from the request's path).</p>","abstract":false,"args":[],"args_string":" : Hash(String, String)?","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/ext/http/request/path_params.cr#L6","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/ext/http/request/path_params.cr#L6","def":{"name":"path_params","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, String) | Nil","visibility":"Public","body":"@path_params"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/rest/HTTP/Server","path":"HTTP/Server.html","kind":"class","full_name":"HTTP::Server","name":"Server","abstract":false,"superclass":{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/rest/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/ext/http/server/context/proc.cr","line_number":2,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/ext/http/server/context/proc.cr"},{"filename":"atom/ext/http/server/response/view.cr","line_number":4,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/ext/http/server/response/view.cr"},{"filename":"atom/ext/http/server/response/error.cr","line_number":2,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/ext/http/server/response/error.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/HTTP","kind":"module","full_name":"HTTP","name":"HTTP"},"doc":"An HTTP server.\n\nA server is given a handler that receives an `HTTP::Server::Context` that holds\nthe `HTTP::Request` to process and must in turn configure and write to an `HTTP::Server::Response`.\n\nThe `HTTP::Server::Response` object has `status` and `headers` properties that can be\nconfigured before writing the response body. Once response output is written,\nchanging the `status` and `headers` properties has no effect.\n\nThe `HTTP::Server::Response` is also a write-only `IO`, so all `IO` methods are available\nin it.\n\nThe handler given to a server can simply be a block that receives an `HTTP::Server::Context`,\nor it can be an `HTTP::Handler`. An `HTTP::Handler` has an optional `next` handler,\nso handlers can be chained. For example, an initial handler may handle exceptions\nin a subsequent handler and return a 500 status code (see `HTTP::ErrorHandler`),\nthe next handler might log the incoming request (see `HTTP::LogHandler`), and\nthe final handler deals with routing and application logic.\n\n### Simple Setup\n\nA handler is given with a block.\n\n```\nrequire \"http/server\"\n\nserver = HTTP::Server.new do |context|\n  context.response.content_type = \"text/plain\"\n  context.response.print \"Hello world!\"\nend\n\nserver.bind_tcp 8080\nputs \"Listening on http://127.0.0.1:8080\"\nserver.listen\n```\n\n### With non-localhost bind address\n\n```\nrequire \"http/server\"\n\nserver = HTTP::Server.new do |context|\n  context.response.content_type = \"text/plain\"\n  context.response.print \"Hello world!\"\nend\n\nserver.bind_tcp \"0.0.0.0\", 8080\nputs \"Listening on http://0.0.0.0:8080\"\nserver.listen\n```\n\n### Add handlers\n\nA series of handlers are chained.\n\n```\nrequire \"http/server\"\n\nserver = HTTP::Server.new([\n  HTTP::ErrorHandler.new,\n  HTTP::LogHandler.new,\n  HTTP::CompressHandler.new,\n  HTTP::StaticFileHandler.new(\".\"),\n])\n\nserver.bind_tcp \"127.0.0.1\", 8080\nserver.listen\n```\n\n### Add handlers and block\n\nA series of handlers is chained, the last one being the given block.\n\n```\nrequire \"http/server\"\n\nserver = HTTP::Server.new([\n  HTTP::ErrorHandler.new,\n  HTTP::LogHandler.new,\n]) do |context|\n  context.response.content_type = \"text/plain\"\n  context.response.print \"Hello world!\"\nend\n\nserver.bind_tcp \"0.0.0.0\", 8080\nserver.listen\n```","summary":"<p>An HTTP server.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/rest/HTTP/Server/Context","path":"HTTP/Server/Context.html","kind":"class","full_name":"HTTP::Server::Context","name":"Context","abstract":false,"superclass":{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/rest/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/ext/http/server/context/proc.cr","line_number":3,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/ext/http/server/context/proc.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/HTTP/Server","kind":"class","full_name":"HTTP::Server","name":"Server"},"doc":"Instances of this class are passed to an `HTTP::Server` handler.","summary":"<p>Instances of this class are passed to an <code><a href=\"../../HTTP/Server.html\">HTTP::Server</a></code> handler.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"proc:Proc(self,Nil)|HTTP::WebSocketHandler|Nil-instance-method","html_id":"proc:Proc(self,Nil)|HTTP::WebSocketHandler|Nil-instance-method","name":"proc","doc":"A Proc to run. Usually set by `Atom::Handlers::Router`.","summary":"<p>A Proc to run.</p>","abstract":false,"args":[],"args_string":" : Proc(self, Nil) | HTTP::WebSocketHandler | Nil","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/ext/http/server/context/proc.cr#L5","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/ext/http/server/context/proc.cr#L5","def":{"name":"proc","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Proc(self, Nil) | HTTP::WebSocketHandler | Nil","visibility":"Public","body":"@proc"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/rest/HTTP/Server/Response","path":"HTTP/Server/Response.html","kind":"class","full_name":"HTTP::Server::Response","name":"Response","abstract":false,"superclass":{"html_id":"github.com/onyxframework/rest/IO","kind":"class","full_name":"IO","name":"IO"},"ancestors":[{"html_id":"github.com/onyxframework/rest/IO","kind":"class","full_name":"IO","name":"IO"},{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/rest/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/ext/http/server/response/view.cr","line_number":5,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/ext/http/server/response/view.cr"},{"filename":"atom/ext/http/server/response/error.cr","line_number":3,"url":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/ext/http/server/response/error.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/HTTP/Server","kind":"class","full_name":"HTTP::Server","name":"Server"},"doc":"The response to configure and write to in an `HTTP::Server` handler.\n\nThe response `status_code` and `headers` must be configured before writing\nthe response body. Once response output is written, changing the `status`\nand `headers` properties has no effect.\n\nThe `HTTP::Server::Response` is a write-only `IO`, so all `IO` methods are available\nin it.\n\nA response can be upgraded with the `upgrade` method. Once invoked, headers\nare written and the connection `IO` (a socket) is yielded to the given block.\nThe block must invoke `close` afterwards, the server won't do it in this case.\nThis is useful to implement protocol upgrades, such as websockets.","summary":"<p>The response to configure and write to in an <code><a href=\"../../HTTP/Server.html\">HTTP::Server</a></code> handler.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"error:Exception?-instance-method","html_id":"error:Exception?-instance-method","name":"error","doc":"A error for this response.","summary":"<p>A error for this response.</p>","abstract":false,"args":[],"args_string":" : Exception?","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/ext/http/server/response/error.cr#L5","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/ext/http/server/response/error.cr#L5","def":{"name":"error","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Exception | Nil","visibility":"Public","body":"@error"}},{"id":"view:Atom::View?-instance-method","html_id":"view:Atom::View?-instance-method","name":"view","doc":"A (presumable) renderable view for this response.","summary":"<p>A (presumable) renderable view for this response.</p>","abstract":false,"args":[],"args_string":" : Atom::View?","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/ext/http/server/response/view.cr#L7","source_link":"https://github.com/onyxframework/rest/blob/cf5ae280a93e72d3fe5ef3f48e2ba6beff97099d/src/atom/ext/http/server/response/view.cr#L7","def":{"name":"view","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Atom::View | Nil","visibility":"Public","body":"@view"}}],"macros":[],"types":[]}]}]}]}}