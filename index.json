{"repository_name":"github.com/onyxframework/rest","body":"<a href=\"https://onyxframework.org\"><img width=\"100\" height=\"100\" src=\"https://onyxframework.org/img/logo.svg\"></a>\n\n# Onyx::REST\n\n[![Built with Crystal](https://img.shields.io/badge/built%20with-crystal-000000.svg?style=flat-square)](https://crystal-lang.org/)\n[![Travis CI build](https://img.shields.io/travis/onyxframework/rest/master.svg?style=flat-square)](https://travis-ci.org/onyxframework/rest)\n[![API docs](https://img.shields.io/badge/api_docs-online-brightgreen.svg?style=flat-square)](https://api.onyxframework.org/rest)\n[![Latest release](https://img.shields.io/github/release/onyxframework/rest.svg?style=flat-square)](https://github.com/onyxframework/rest/releases)\n\nA REST API framework for [Crystal](https://crystal-lang.org).\n\n## Supporters ‚ù§Ô∏è\n\nThanks to all my patrons, I can continue working on beautiful Open Source Software! üôè\n\n[Lauri Jutila](https://github.com/ljuti), [Alexander Maslov](https://seendex.ru), Dainel Vera\n\n*You can become a patron too in exchange of prioritized support and other perks*\n\n<a href=\"https://www.patreon.com/vladfaust\"><img height=\"50\" src=\"https://onyxframework.org/img/patreon-button.svg\"></a>\n\n## About üëã\n\nOnyx::REST is an opinionated REST API framework build on top of [Onyx::HTTP](https://github.com/onyxframework/http). It provides modules to build scalabale applications, such as [`Action`](https://api.onyxframework.org/rest/Onyx/REST/Action.html) and [`View`](https://api.onyxframework.org/rest/Onyx/REST/View.html).\n\n## Installation üì•\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  onyx-rest:\n    github: onyxframework/rest\n    version: ~> 0.6.4\n```\n\nThis shard follows [Semantic Versioning v2.0.0](http://semver.org/), so check [releases](https://github.com/onyxframework/rest/releases) and change the `version` accordingly. Please visit [github.com/crystal-lang/shards](https://github.com/crystal-lang/shards) to know more about Crystal shards.\n\n## Usage üíª\n\n> ‚ö† **Note:** you should make yourself familiar with [Onyx::HTTP](https://github.com/onyxframework/http) before using this shard.\n\nOnyx::REST has two main concepts: actions and views. Action is where the business logic takes place, they are essentially REST endpoints. And views take care of rendering.\n\n### Actions\n\n[`Action`](https://api.onyxframework.org/rest/Onyx/REST/Action.html) is a module and can be included into any object. Structs works nice, because actions do not need to reference each other, they are throw-away objects. There is no enforced one-to-one relation between actions and endpoints. Multiple endpoints can execute a single Action, and vice-versa. Let's define a simple action:\n\n```crystal\nrequire \"onyx-rest\"\n\nstruct Hello\n  include Onyx::REST::Action\n\n  def call\n    context.response << \"Hello Onyx\"\n  end\nend\n\nrouter = Onyx::HTTP::Router.new do\n  get \"/\", Hello\nend\n\nserver = Onyx::HTTP::Server.new(router)\nserver.bind_tcp(5000)\nserver.listen\n```\n\n```sh\n> curl http://localhost:5000\nHello Onyx\n```\n\nActions have access to the current [`HTTP::Server::Context`](https://crystal-lang.org/api/0.27.2/HTTP/Server/Context.html) via `#context` getter. They also have have `#status`, `#header` and `#redirect` shortcuts.\n\n#### Params\n\nYou can easily define strongly-typed parameters in Actions to enable it parsing incoming values from the HTTP request path, query and also form and JSON bodies. Nested and array params are supported as well.\n\n```crystal\nrequire \"onyx-rest\"\n\nstruct Hello\n  include Onyx::REST::Action\n\n  params do\n    query do\n      type who : String\n    end\n  end\n\n  def call\n    context.response << \"Hello #{params.query.who}\"\n  end\nend\n\nrouter = Onyx::HTTP::Router.new do\n  get \"/\", Hello\nend\n\nserver = Onyx::HTTP::Server.new(router)\nserver.bind_tcp(5000)\nserver.listen\n```\n\n```sh\n> curl http://localhost:5000/?who=World\nHello World\n```\n\nThis feature is proudly powered by [HTTP::Params::Serializable](https://github.com/vladfaust/http-params-serializable) shard. Read more about `.params` macro in [API docs](https://api.onyxframework.org/rest/Onyx/REST/Action.html).\n\n#### Errors\n\nIt's typical for web applications to have *expected errors*, e.g. \"User is not found\". Actions have syntax to define such errors (you'll need an [`Onyx::REST::Rescuer`](https://api.onyxframework.org/rest/Onyx/REST/Rescuer.html)):\n\n```crystal\nrequire \"onyx-rest\"\n\nstruct GetUser\n  include Onyx::REST::Action\n\n  params do\n    path do\n      type id : Int32\n    end\n  end\n\n  errors do\n    type UserNotFound(404)\n  end\n\n  def call\n    if params.path.id == 42\n      context.response << \"Found user\"\n    else\n      raise UserNotFound.new\n    end\n  end\nend\n\nrescuer = Onyx::REST::Rescuer.new\n\nrouter = Onyx::HTTP::Router.new do\n  get \"/users/:id\", GetUser\nend\n\nserver = Onyx::HTTP::Server.new(rescuer, router)\nserver.bind_tcp(5000)\nserver.listen\n```\n\n```sh\n> curl http://localhost:5000/users/42\nFound user\n> curl http://localhost:5000/users/43\n404 User Not Found\n```\n\n### Views\n\n[`View`](https://api.onyxframework.org/rest/Onyx/REST/View.html) is a module which responsibility is to render responses. A view should be handled by a *renderer*, which could either be [`Onyx::Renderers::Text`](https://api.onyxframework.org/rest/Onyx/REST/Renderers/Text.html) or [`Onyx::Renderers::JSON`](https://api.onyxframework.org/rest/Onyx/REST/Renderers/JSON.html):\n\n```crystal\nrequire \"onyx-rest\"\nrequire \"onyx-rest/renderers/text\"\n\nstruct UserView\n  include Onyx::REST::View\n\n  def initialize(@id : Int32, @name : String)\n  end\n\n  text(\"id: #{@id}, name: #{@name}\")\nend\n\nrouter = Onyx::HTTP::Router.new do\n  get \"/\" do |env|\n    env.response.view = UserView.new(42, \"John\")\n  end\nend\n\nrenderer = Onyx::REST::Renderers::Text.new\n\nserver = Onyx::HTTP::Server.new(router, renderer)\nserver.bind_tcp(5000)\nserver.listen\n```\n\n```sh\n> curl http://localhost:5000\nid: 42, name: John\n```\n\n### Actions + Views\n\nActions have two native integrations with views. The first one is `#view` method which sets the response view like this:\n\n```crystal\n  def call\n    view(UserView.new(42, \"John\"))\n  end\n```\n\nAnd the second one is the fact that if an action returns a `View`, it is then treated as a response view (if not set eariler):\n\n```crystal\n  def call\n    return UserView.new(42, \"John\")\n  end\n```\n\nor, for a prettier control flow:\n\n```crystal\n  def call\n    return UserView.new(42, \"John\") if something\n    some_code\n    return AnotherView.new\n  end\n```\n\n### Channels\n\n[`Channel`](https://api.onyxframework.org/rest/Onyx/REST/Channel.html) is a convenient websocket wrapper. It can too have `.params` and `.errors` defined. It is particulary convenient to use channels with the [Onyx::EDA](https://github.com/onyxframework/eda) shard.\n\n```crystal\nclass Channels::Echo\n  include Onyx::REST::Channel\n\n  params do\n    query do\n      type secret : Int32\n    end\n  end\n\n  errors do\n    type InvalidSecret(4003)\n  end\n\n  def on_open\n    unless params.query.secret == 42\n      # Close socket with 4003 code and \"Invalid Secret\" reason\n      raise InvalidSecret.new\n    end\n  end\n\n  def on_message(message)\n    socket.send(message)\n  end\nend\n\nrouter = Onyx::HTTP::Router.new do\n  ws \"/echo\", Channels::Echo\nend\n\nserver = Onyx::HTTP::Server.new(router)\nserver.bind_tcp(5000)\nserver.listen\n```\n\n### Macros\n\nYou should use `\"onyx/rest\"` instead of `\"onyx/http\"` to enable [`Onyx::REST::Rescuer`](https://api.onyxframework.org/rest/Onyx/REST/Rescuer.html) and an ability to enable a renderer in one line:\n\n```crystal\nrequire \"onyx/rest\"\n\nOnyx.render(:json)\nOnyx.listen\n```\n\nRead more about Onyx::HTTP macros at [**@onyxframework/onyx#http**](https://github.com/onyxframework/onyx#http) or at [**@onyxframework/http#macros**](https://github.com/onyxframework/http#macros).\n\n## Community üç™\n\nThere are multiple places to talk about this particular shard and about other ones as well:\n\n* [Onyx::REST Gitter chat](https://gitter.im/onyxframework/rest)\n* [Onyx Framework Gitter community](https://gitter.im/onyxframework)\n* [Vlad Faust Gitter community](https://gitter.im/vladfaust)\n* [Onyx Framework Twitter](https://twitter.com/onyxframework)\n* [Onyx Framework Telegram channel](https://telegram.me/onyxframework)\n\n## Support ‚ù§Ô∏è\n\nThis shard is maintained by me, [Vlad Faust](https://vladfaust.com), a passionate developer with years of programming and product experience. I love creating Open-Source and I want to be able to work full-time on Open-Source projects.\n\nI will do my best to answer your questions in the free communication channels above, but if you want prioritized support, then please consider becoming my patron. Your issues will be labeled with your patronage status, and if you have a sponsor tier, then you and your team be able to communicate with me in private or semi-private channels such as e-mail and [Twist](https://twist.com). There are other perks to consider, so please, don't hesistate to check my Patreon page:\n\n<a href=\"https://www.patreon.com/vladfaust\"><img height=\"50\" src=\"https://onyxframework.org/img/patreon-button.svg\"></a>\n\nYou could also help me a lot if you leave a star to this GitHub repository and spread the world about Crystal and Onyx! üì£\n\n## Contributing\n\n1. Fork it ( https://github.com/onyxframework/http/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'feat: some feature') using [Angular style commits](https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit)\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Vlad Faust](https://github.com/vladfaust) - creator and maintainer\n\n## Licensing\n\nThis software is licensed under [MIT License](LICENSE).\n\n[![Open Source Initiative](https://upload.wikimedia.org/wikipedia/commons/thumb/4/42/Opensource.svg/100px-Opensource.svg.png)](https://opensource.org/licenses/MIT)\n","program":{"html_id":"github.com/onyxframework/rest/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/onyxframework/rest","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/rest/HTTP","path":"HTTP.html","kind":"module","full_name":"HTTP","name":"HTTP","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-rest/ext/http/server/response/view.cr","line_number":5,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/ext/http/server/response/view.cr"},{"filename":"lib/http-params-serializable/src/http-params-serializable/annotations.cr","line_number":1,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/lib/http-params-serializable/src/http-params-serializable/annotations.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Extensions to the standard `HTTP` module.","summary":"<p>Extensions to the standard <code><a href=\"HTTP.html\">HTTP</a></code> module.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/rest/HTTP/Server","path":"HTTP/Server.html","kind":"class","full_name":"HTTP::Server","name":"Server","abstract":false,"superclass":{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/rest/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-rest/ext/http/server/response/view.cr","line_number":7,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/ext/http/server/response/view.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/HTTP","kind":"module","full_name":"HTTP","name":"HTTP"},"doc":"Extensions to the standard `HTTP::Server` class.","summary":"<p>Extensions to the standard <code><a href=\"../HTTP/Server.html\">HTTP::Server</a></code> class.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/rest/HTTP/Server/Response","path":"HTTP/Server/Response.html","kind":"class","full_name":"HTTP::Server::Response","name":"Response","abstract":false,"superclass":{"html_id":"github.com/onyxframework/rest/IO","kind":"class","full_name":"IO","name":"IO"},"ancestors":[{"html_id":"github.com/onyxframework/rest/IO","kind":"class","full_name":"IO","name":"IO"},{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/rest/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lib/onyx-http/src/onyx-http/ext/http/server/response/error.cr","line_number":3,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/lib/onyx-http/src/onyx-http/ext/http/server/response/error.cr"},{"filename":"onyx-rest/ext/http/server/response/view.cr","line_number":9,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/ext/http/server/response/view.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/HTTP/Server","kind":"class","full_name":"HTTP::Server","name":"Server"},"doc":"Extensions to the standard `HTTP::Server::Response` class.","summary":"<p>Extensions to the standard <code><a href=\"../../HTTP/Server/Response.html\">HTTP::Server::Response</a></code> class.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"view:Onyx::REST::View?-instance-method","html_id":"view:Onyx::REST::View?-instance-method","name":"view","doc":"A view to render.","summary":"<p>A view to render.</p>","abstract":false,"args":[],"args_string":" : Onyx::REST::View?","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/ext/http/server/response/view.cr#L13","def":{"name":"view","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Onyx::REST::View | ::Nil","visibility":"Public","body":"@view"}},{"id":"view=(view:Onyx::REST::View?)-instance-method","html_id":"view=(view:Onyx::REST::View?)-instance-method","name":"view=","doc":"A view to render.","summary":"<p>A view to render.</p>","abstract":false,"args":[{"name":"view","doc":null,"default_value":"","external_name":"view","restriction":"Onyx::REST::View | ::Nil"}],"args_string":"(view : Onyx::REST::View?)","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/ext/http/server/response/view.cr#L17","def":{"name":"view=","args":[{"name":"view","doc":null,"default_value":"","external_name":"view","restriction":"Onyx::REST::View | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@view = view"}}],"macros":[],"types":[]}]}]},{"html_id":"github.com/onyxframework/rest/Onyx","path":"Onyx.html","kind":"module","full_name":"Onyx","name":"Onyx","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lib/onyx-http/src/onyx-http.cr","line_number":4,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/lib/onyx-http/src/onyx-http.cr"},{"filename":"onyx-rest.cr","line_number":3,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Enjoy the performance üí™\n\nVisit [onyxframework.org](https://onyxframework.org)","summary":"<p>Enjoy the performance üí™</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/rest/Onyx/REST","path":"Onyx/REST.html","kind":"module","full_name":"Onyx::REST","name":"REST","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-rest.cr","line_number":5,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest.cr"},{"filename":"onyx-rest/error.cr","line_number":1,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/error.cr"},{"filename":"onyx-rest/rescuer.cr","line_number":3,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/rescuer.cr"},{"filename":"onyx-rest/renderers/json.cr","line_number":9,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/renderers/json.cr"},{"filename":"onyx-rest/renderers/text.cr","line_number":8,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/renderers/text.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Onyx","kind":"module","full_name":"Onyx","name":"Onyx"},"doc":"REST API framework.","summary":"<p>REST API framework.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/rest/Onyx/REST/Action","path":"Onyx/REST/Action.html","kind":"module","full_name":"Onyx::REST::Action","name":"Action","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/onyxframework/rest/Callbacks","kind":"module","full_name":"Callbacks","name":"Callbacks"},{"html_id":"github.com/onyxframework/rest/Onyx/REST/Endpoint","kind":"module","full_name":"Onyx::REST::Endpoint","name":"Endpoint"}],"locations":[{"filename":"onyx-rest/action.cr","line_number":60,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/action.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"PARAMS_ERROR_CODE","name":"PARAMS_ERROR_CODE","value":"400","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/onyxframework/rest/Callbacks","kind":"module","full_name":"Callbacks","name":"Callbacks"},{"html_id":"github.com/onyxframework/rest/Onyx/REST/Endpoint","kind":"module","full_name":"Onyx::REST::Endpoint","name":"Endpoint"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Onyx/REST","kind":"module","full_name":"Onyx::REST","name":"REST"},"doc":"A callable REST action.\n\nAn Action itself isn't responsible for rendering. It *should* return a `View` instance or\nexplicitly set `HTTP::Server::Response#view` to a `View` instance with the `#view` method,\nand that view *should* be rendered in future handlers.\n\nAction includes the `Endpoint` module.\nAction params can be defined with the `Endpoint.params` macro (param errors have code 400).\nAction errors can be defined with the `Endpoint.errors` macro.\n\nAction includes `Callbacks` module, effectively allowing to define `.before` and `.after` callbacks,\nwhich would be invoked before and after `#call`. Read more about callbacks at [https://github.com/vladfaust/callbacks.cr](https://github.com/vladfaust/callbacks.cr).\n\n```\nstruct Actions::GetUser\n  include Onyx::REST::Action\n\n  params do\n    path do\n      type id : Int32\n    end\n  end\n\n  errors do\n    type UserNotFound(404), id : Int32\n  end\n\n  def call\n    user = find_user(path_params.id)\n    raise UserNotFound.new(path_params.id) unless user\n    return Views::User.new(user)\n  end\nend\n\nActions::GetUser.call(env) # => Views::User instance, if not raised either Params::Error or UserNotFound\n```\n\nRouter example:\n\n```\nrouter = Onyx::HTTP::Router.new do\n  get \"/\", Actions::GetUser\n  # Equivalent of\n  get \"/\" do |context|\n    view? = Actions::GetUser.call(context)\n\n    if view = view?.as?(REST::View)\n      context.response.view ||= view\n    end\n  end\nend\n```","summary":"<p>A callable REST action.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"after-instance-method","html_id":"after-instance-method","name":"after","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/action.cr#L62","def":{"name":"after","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"before-instance-method","html_id":"before-instance-method","name":"before","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/action.cr#L62","def":{"name":"before","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"call-instance-method","html_id":"call-instance-method","name":"call","doc":"Where all the action takes place.","summary":"<p>Where all the action takes place.</p>","abstract":true,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/action.cr#L67","def":{"name":"call","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"view(view:View)-instance-method","html_id":"view(view:View)-instance-method","name":"view","doc":"Set a *view* for this request. In router, the first view assigned takes precendence:\n\n```\ndef call\n  view(ViewA.new)\n  return ViewB.new\nend\n\n# The resulting view is ViewA\n```","summary":"<p>Set a <em>view</em> for this request.</p>","abstract":false,"args":[{"name":"view","doc":null,"default_value":"","external_name":"view","restriction":"View"}],"args_string":"(view : View)","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/action.cr#L88","def":{"name":"view","args":[{"name":"view","doc":null,"default_value":"","external_name":"view","restriction":"View"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.response.view = view"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/rest/Onyx/REST/Channel","path":"Onyx/REST/Channel.html","kind":"module","full_name":"Onyx::REST::Channel","name":"Channel","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/onyxframework/rest/Onyx/REST/Endpoint","kind":"module","full_name":"Onyx::REST::Endpoint","name":"Endpoint"}],"locations":[{"filename":"onyx-rest/channel.cr","line_number":65,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/channel.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"PARAMS_ERROR_CODE","name":"PARAMS_ERROR_CODE","value":"4000","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/onyxframework/rest/Onyx/REST/Endpoint","kind":"module","full_name":"Onyx::REST::Endpoint","name":"Endpoint"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Onyx/REST","kind":"module","full_name":"Onyx::REST","name":"REST"},"doc":"A websocket REST Channel.\n\nChannel instance is bind to a websocket instance, calling `#on_open`, `#on_message`,\n`#on_binary`, `#on_ping`, `#on_pong` and `#on_close` callbacks\non according socket event. You are expected to re-define these methods.\n\nChannel includes the `Endpoint` module.\nChannel params can be defined with the `Endpoint.params` macro (param errors have code 4000).\n\n## Errors\n\nChannel errors can be defined with the `Endpoint.errors` macro.\nSome considertations:\n\n* Error codes must be in 4000-4999 range to conform with [standards](https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Properties)\n* Error message length must be less than or equal to 123 characters\n* `REST::Error`s are rescued and handled internally in a `Channel`,\nproperly closing the socket, so you do not need a rescuer there\n\n## Example\n\n```\nclass Channels::Echo\n  include Onyx::REST::Channel\n\n  params do\n    query do\n      type secret : Int32\n    end\n  end\n\n  errors do\n    type InvalidSecret(4003)\n  end\n\n  def on_open\n    unless params.query.secret == 42\n      # Close socket with 4003 code and \"Invalid Secret\" reason\n      raise InvalidSecret.new\n    end\n  end\n\n  def on_message(message)\n    socket.send(message)\n  end\nend\n```\n\nRouter example:\n\n```\nrouter = Onyx::HTTP::Router.new do\n  ws \"/\", Channels::Echo\n  # Equivalent of\n  ws \"/\" do |socket, context|\n    Channels::Echo.bind(socket, context)\n  end\nend\n```","summary":"<p>A websocket REST Channel.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"bind(socket)-instance-method","html_id":"bind(socket)-instance-method","name":"bind","doc":"Call `#on_open` and bind to the `socket`'s events. Read more in [Crystal API docs](https://crystal-lang.org/api/latest/HTTP/WebSocket.html).","summary":"<p>Call <code><a href=\"../../Onyx/REST/Channel.html#on_open-instance-method\">#on_open</a></code> and bind to the <code>socket</code>'s events.</p>","abstract":false,"args":[{"name":"socket","doc":null,"default_value":"","external_name":"socket","restriction":""}],"args_string":"(socket)","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/channel.cr#L112","def":{"name":"bind","args":[{"name":"socket","doc":null,"default_value":"","external_name":"socket","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@socket = socket\non_open\nsocket.on_message do |message|\n  on_message(message)\nend\nsocket.on_binary do |binary|\n  on_binary(binary)\nend\nsocket.on_ping do\n  on_ping\nend\nsocket.on_pong do\n  on_pong\nend\nsocket.on_close do\n  on_close\nend\n"}},{"id":"on_binary(binary)-instance-method","html_id":"on_binary(binary)-instance-method","name":"on_binary","doc":"Called when the socket receives a binary message from client.","summary":"<p>Called when the socket receives a binary message from client.</p>","abstract":false,"args":[{"name":"binary","doc":null,"default_value":"","external_name":"binary","restriction":""}],"args_string":"(binary)","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/channel.cr#L94","def":{"name":"on_binary","args":[{"name":"binary","doc":null,"default_value":"","external_name":"binary","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"on_close-instance-method","html_id":"on_close-instance-method","name":"on_close","doc":"Called once when the socket closes.","summary":"<p>Called once when the socket closes.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/channel.cr#L108","def":{"name":"on_close","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"on_message(message)-instance-method","html_id":"on_message(message)-instance-method","name":"on_message","doc":"Called when the socket receives a message from client.","summary":"<p>Called when the socket receives a message from client.</p>","abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"args_string":"(message)","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/channel.cr#L90","def":{"name":"on_message","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"on_open-instance-method","html_id":"on_open-instance-method","name":"on_open","doc":"Called once when a new socket is opened.","summary":"<p>Called once when a new socket is opened.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/channel.cr#L86","def":{"name":"on_open","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"on_ping-instance-method","html_id":"on_ping-instance-method","name":"on_ping","doc":"Called when the socket receives a PING message from client.\nSends `\"PONG\"` by default.","summary":"<p>Called when the socket receives a PING message from client.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/channel.cr#L99","def":{"name":"on_ping","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"socket.send(\"PONG\")"}},{"id":"on_pong-instance-method","html_id":"on_pong-instance-method","name":"on_pong","doc":"Called when the socket receives a PONG message from client.","summary":"<p>Called when the socket receives a PONG message from client.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/channel.cr#L104","def":{"name":"on_pong","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/rest/Onyx/REST/Endpoint","path":"Onyx/REST/Endpoint.html","kind":"module","full_name":"Onyx::REST::Endpoint","name":"Endpoint","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-rest/endpoint/errors.cr","line_number":1,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/endpoint/errors.cr"},{"filename":"onyx-rest/endpoint/params/form.cr","line_number":4,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/endpoint/params/form.cr"},{"filename":"onyx-rest/endpoint/params/json.cr","line_number":4,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/endpoint/params/json.cr"},{"filename":"onyx-rest/endpoint/params/path.cr","line_number":4,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/endpoint/params/path.cr"},{"filename":"onyx-rest/endpoint/params/query.cr","line_number":4,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/endpoint/params/query.cr"},{"filename":"onyx-rest/endpoint/params.cr","line_number":3,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/endpoint/params.cr"},{"filename":"onyx-rest/endpoint.cr","line_number":8,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/endpoint.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/onyxframework/rest/Onyx/REST/Action","kind":"module","full_name":"Onyx::REST::Action","name":"Action"},{"html_id":"github.com/onyxframework/rest/Onyx/REST/Channel","kind":"module","full_name":"Onyx::REST::Channel","name":"Channel"}],"namespace":{"html_id":"github.com/onyxframework/rest/Onyx/REST","kind":"module","full_name":"Onyx::REST","name":"REST"},"doc":"A REST endpoint. `Action` and `Channel` include this module.\n\nA endpoint includes `.params` (see `Action.params` and `Channel.params`,\nthey are identical) and `.errors` macros.","summary":"<p>A REST endpoint.</p>","class_methods":[],"constructors":[{"id":"new(context:HTTP::Server::Context)-class-method","html_id":"new(context:HTTP::Server::Context)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::HTTP::Server::Context"}],"args_string":"(context : HTTP::Server::Context)","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/endpoint.cr#L12","def":{"name":"new","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"::HTTP::Server::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(context)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[{"id":"errors(&block)-macro","html_id":"errors(&amp;block)-macro","name":"errors","doc":"Optional errors definition macro. It's a DSL for defining *expected* errors,\nsuch as \"User Not Found\" -- it's not an exception, but it should halt the request execution.\nAll defined errors will be ancestors of `REST::Error`, allowing them to be effectively\nhandled in `REST::Rescuers::REST`. Note that `Channel`s rescue `REST::Error` by themselves,\nyou don't need a rescuer in this case.\n\n```\nstruct MyAction\n  include Onyx::REST::Action\n\n  errors do\n    type UserNotFound(404)\n\n    # This error has variable `attributes` and custom block called on initialization\n    type InvalidUser(409), attributes : Hash(String, String) do\n      # All errors inherit from Exception, so `super` sets the error message\n      super(\"User has invalid attributes: #{attributes}\")\n    end\n  end\n\n  def call\n    raise UserNotFound.new\n    raise InvalidUser.new({\"name\" => \"too short\"})\n  rescue e : UserNotFound\n    # NOTE: These rescue blocks are for example purposes only,\n    # you should not rescue the errors *here* in real applications, leave it to Rescuers\n\n    pp e.code    # => 404\n    pp e.payload # => nil\n    pp e.message # => nil\n  rescue e : InvalidUser\n    pp e.code    # => 409\n    pp e.payload # => {attributes: {\"name\" => \"too short\"}}\n    pp e.message # => \"User has invalid attributes: {\\\"name\\\" => \\\"too short\\\"}\"\n  end\nend\n```","summary":"<p>Optional errors definition macro.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/endpoint/errors.cr#L194","def":{"name":"errors","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    \n{% if block && block.body %}{% else %}\n      {% raise(\"Expected `errors` macro to be called with a block.\\n\\n\\e[32m‚úî\\e[39mÔ∏è Valid code:\\n\\n  errors \\e[32mdo\\n    type NotFound(404)\\n  end\\e[39m\") %}\n    {% end %}\n\n\n    \n{% if block.body.is_a?(Call) %}\n      define_error({{ block.body }})\n    {% else %}{% if block.body.is_a?(Expressions) %}\n      {% for exp in block.body.expressions %}\n        define_error({{ exp }})\n      {% end %}\n    {% else %}\n      {% raise(\"Expected an `errors` macro call contain errors defintions.\\n\\n\\e[31m‚úò\\e[39mÔ∏è Your code:\\n\\n  errors do\\n    \\e[31m#{(yield).id}\\e[39m\\n  end\\n\\n\\e[32m‚úî\\e[39mÔ∏è Valid code:\\n\\n  errors do\\n    \\e[32mtype NotFound(404)\\e[39m\\n  end\") %}\n    {% end %}{% end %}\n\n  \n"}},{"id":"form(requirerequired=false,&block)-macro","html_id":"form(requirerequired=false,&amp;block)-macro","name":"form","doc":"Define form params which would be deserialzed from the request body only if\nits \"Content-Type\" header is \"application/x-www-form-urlencoded\". The serialization is powered by [`HTTP::Params::Serializable`](https://github.com/vladfaust/http-params-serializable).\n\n## Options\n\n* `require` -- if set to `true`, will attempt to parse form params regardless\nof the `\"Content-Type\"` header and return a parameter error otherwise; the `params.form`\ngetter becomes non-nilable\n\n## Example\n\n```\nstruct UpdateUser\n  include Onyx::REST::Action\n\n  params do\n    path do\n      type id : Int32\n    end\n\n    form do\n      type user do\n        type email : String?\n        type username : String?\n      end\n    end\n  end\n\n  def call\n    if form = params.form\n      pp! form.user.email\n      pp! form.user.username\n    end\n  end\nend\n```\n\n```shell\n> curl -X POST -H \"Content-Type: application/x-www-form-urlencoded\" -d \"user[email]=foo@example.com\" http://localhost:5000/users/42\nform.user.email    => \"foo@example.com\"\nform.user.username => nil\n```\n\nIf your endpoint expects form params only, then it can be simplified a bit:\n\n```\nstruct UpdateUser\n  include Onyx::REST::Action\n\n  params do\n    path do\n      type id : Int32\n    end\n\n    form require: true do\n      type user do\n        type email : String?\n        type username : String?\n      end\n    end\n  end\n\n  def call\n    pp! params.form.user.email\n    pp! params.form.user.username\n  end\nend\n```\n\n```shell\n> curl -X POST -d \"user[email]=foo@example.com\" http://localhost:5000/users/42\n```","summary":"<p>Define form params which would be deserialzed from the request body only if its \"Content-Type\" header is \"application/x-www-form-urlencoded\".</p>","abstract":false,"args":[{"name":"required","doc":null,"default_value":"false","external_name":"require","restriction":""}],"args_string":"(require required = <span class=\"n\">false</span>, &block)","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/endpoint/params/form.cr#L77","def":{"name":"form","args":[{"name":"required","doc":null,"default_value":"false","external_name":"require","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    class FormError < Onyx::REST::Error(PARAMS_ERROR_CODE)\n      def initialize(message : String, @path : Array(String))\n        super(message)\n      \nend\n\n      def payload\n        \n{path: @path}\n      \nend\n    \nend\n\n    struct Form\n      include ::HTTP::Params::Serializable\n\n      \n{% verbatim do %}\n        macro type(argument, nilable = false, **options, &block)\n          {% if block %}\n            {% if options.empty? %}{% else %}\n              @[::HTTP::Param({{ **options }})]\n            {% end %}\n\n            {% if argument.is_a?(Path) %}\n              {% if argument.names.size > 1\n  raise(\"Cannot declare namespaced nested query parameter\")\nend %}\n\n              getter {{ argument.names.first.underscore }} : {{ argument.names.first.camelcase.id }}{{ if nilable\n  \" | Nil\".id\nend }}\n            {% else %}{% if argument.is_a?(Call) %}\n              getter {{ argument.name.underscore }} : {{ argument.name.camelcase.id }}{{ if nilable\n  \" | Nil\".id\nend }}\n            {% else %}\n              {% raise(\"BUG: Unhandled argument type #{argument.class_name}\") %}\n            {% end %}{% end %}\n\n            {% if argument.is_a?(Path) %}\n              struct {{ argument.names.first.camelcase.id }}\n            {% else %}{% if argument.is_a?(Call) %}\n              struct {{ argument.name.camelcase.id }}\n            {% end %}{% end %}\n              include ::HTTP::Params::Serializable\n\n              {% if block.body.is_a?(Expressions) %}\n                {% for expression in block.body.expressions %}\n                  Form.{{ expression }}\n                {% end %}\n              {% else %}{% if block.body.is_a?(Call) %}\n                Form.{{ (yield).id }}\n              {% else %}\n                {% raise(\"BUG: Unhandled block body type #{block.body.class_name}\") %}\n              {% end %}{% end %}\n            end\n          {% else %}{% if argument.is_a?(TypeDeclaration) %}\n            {% if options.empty? %}{% else %}\n              @[::HTTP::Param({{ **options }})]\n            {% end %}\n\n            getter {{ argument }}\n          {% else %}\n            {% raise(\"BUG: Unhandled argument type #{argument.class_name}\") %}\n          {% end %}{% end %}\n        end\n      {% end %}\n\n\n      \n{{ (yield).id }}\n\n    \nend\n\n    \n{% if required %}\n      getter! form  : Form\n    {% else %}\n      getter form  : Form?\n    {% end %}\n\n\n    def initialize(request : ::HTTP::Request)\n      previous_def\n\n      \n{% if true %}\n        begin\n          {% if required %}{% else %}\n            if request.headers[\"Content-Type\"]?.try &.=~ /^application\\/x-www-form-urlencoded/\n          {% end %}\n            if body = request.body\n              @form = Form.from_query(body.gets_to_end)\n            else\n              raise FormError.new(\"Missing request body\", [] of String)\n            end\n          {% if required %}{% else %}\n            end\n          {% end %}\n        rescue ex : ::HTTP::Params::Serializable::Error\n          raise FormError.new(\"Form p\" + ex.message.not_nil![1..-1], ex.path)\n        end\n      {% end %}\n\n    \nend\n  \n"}},{"id":"json(requirerequired=false,&block)-macro","html_id":"json(requirerequired=false,&amp;block)-macro","name":"json","doc":"Define JSON params which would be deserialized from the request body only if\nits \"Content-Type\" header is \"application/json\". The serialization is powered by\nstdlib's [`JSON::Serializable`](https://crystal-lang.org/api/latest/JSON/Serializable.html).\n\n## Options\n\n* `require` -- if set to `true`, will attempt to parse JSON params regardless\nof the `\"Content-Type\"` header and return a parameter error otherwise; the `params.json`\ngetter becomes non-nilable\n\n## Example\n\n```\nstruct UpdateUser\n  include Onyx::REST::Action\n\n  params do\n    path do\n      type id : Int32\n    end\n\n    json do\n      type user do\n        type email : String?\n        type username : String?\n      end\n    end\n  end\n\n  def call\n    if json = params.json\n      pp! json.user.email\n      pp! json.user.username\n    end\n  end\nend\n```\n\n```shell\n> curl -X POST -H \"Content-Type: application/json\" -d '{\"user\":{\"email\":\"foo@example.com\"}}' http://localhost:5000/users/1\njson.user.email    => \"foo@example.com\"\njson.user.username => nil\n```\n\nIf your endpoint expects JSON params only, then it can be simplified a bit:\n\n```\nstruct UpdateUser\n  include Onyx::REST::Action\n\n  params do\n    path do\n      type id : Int32\n    end\n\n    json require: true do\n      type user do\n        type email : String?\n        type username : String?\n      end\n    end\n  end\n\n  def call\n    pp! params.json.user.email\n    pp! params.json.user.username\n  end\nend\n```\n\n```shell\n> curl -X POST -d '{\"user\":{\"email\":\"foo@example.com\"}}' http://localhost:5000/users/1\n```","summary":"<p>Define JSON params which would be deserialized from the request body only if its \"Content-Type\" header is \"application/json\".</p>","abstract":false,"args":[{"name":"required","doc":null,"default_value":"false","external_name":"require","restriction":""}],"args_string":"(require required = <span class=\"n\">false</span>, &block)","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/endpoint/params/json.cr#L78","def":{"name":"json","args":[{"name":"required","doc":null,"default_value":"false","external_name":"require","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    class JSONError < Onyx::REST::Error(PARAMS_ERROR_CODE)\n    \nend\n\n    struct JSON\n      include ::JSON::Serializable\n\n      \n{% verbatim do %}\n        macro type(argument, nilable = false, **options, &block)\n          {% if block %}\n            {% if options.empty? %}{% else %}\n              @[::JSON::Field({{ **options }})]\n            {% end %}\n\n            {% if argument.is_a?(Path) %}\n              {% if argument.names.size > 1\n  raise(\"Cannot declare namespaced nested query parameter\")\nend %}\n\n              getter {{ argument.names.first.underscore }} : {{ argument.names.first.camelcase.id }}{{ if nilable\n  \" | Nil\".id\nend }}\n            {% else %}{% if argument.is_a?(Call) %}\n              getter {{ argument.name.underscore }} : {{ argument.name.camelcase.id }}{{ if nilable\n  \" | Nil\".id\nend }}\n            {% else %}\n              {% raise(\"BUG: Unhandled argument type #{argument.class_name}\") %}\n            {% end %}{% end %}\n\n            {% if argument.is_a?(Path) %}\n              struct {{ argument.names.first.camelcase.id }}\n            {% else %}{% if argument.is_a?(Call) %}\n              struct {{ argument.name.camelcase.id }}\n            {% end %}{% end %}\n              include ::JSON::Serializable\n\n              {% if block.body.is_a?(Expressions) %}\n                {% for expression in block.body.expressions %}\n                  JSON.{{ expression }}\n                {% end %}\n              {% else %}{% if block.body.is_a?(Call) %}\n                JSON.{{ (yield).id }}\n              {% else %}\n                {% raise(\"BUG: Unhandled block body type #{block.body.class_name}\") %}\n              {% end %}{% end %}\n            end\n          {% else %}{% if argument.is_a?(TypeDeclaration) %}\n            {% if options.empty? %}{% else %}\n              @[::JSON::Field({{ **options }})]\n            {% end %}\n\n            getter {{ argument }}\n          {% else %}\n            {% raise(\"BUG: Unhandled argument type #{argument.class_name}\") %}\n          {% end %}{% end %}\n        end\n      {% end %}\n\n\n      \n{{ (yield).id }}\n\n    \nend\n\n    \n{% if required %}\n      getter! json  : JSON\n    {% else %}\n      getter json  : JSON?\n    {% end %}\n\n\n    def initialize(request : HTTP::Request)\n      previous_def\n\n      \n{% if true %}\n        begin\n          {% if required %}{% else %}\n            if request.headers[\"Content-Type\"]?.try &.=~ /^application\\/json/\n          {% end %}\n            if body = request.body\n              @json = JSON.from_json(body.gets_to_end)\n            else\n              raise JSONError.new(\"Missing request body\")\n            end\n          {% if required %}{% else %}\n            end\n          {% end %}\n        rescue ex : ::JSON::MappingError\n          raise JSONError.new(ex.message.not_nil!.lines.first)\n        end\n      {% end %}\n\n    \nend\n  \n"}},{"id":"params(&block)-macro","html_id":"params(&amp;block)-macro","name":"params","doc":"Define endpoint params. You should call `.path`, `.query`, `.form` and `.json` macros\nwithin the block. Once `.params` is called, a `#params` getter would be set\non every action initialization. The `#params` variable would have according `#path`, `#query`,\n`#form` and `#json` getters itself.\n\nIt is powered by [`HTTP::Params::Serializable`](https://github.com/vladfaust/http-params-serializable),\nand it can raise `PathParamsError`, `QueryParamsError`, `FormBodyError` or `JSONBodyError`, which\nall are `REST::Error`s with 400 code.","summary":"<p>Define endpoint params.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/endpoint/params.cr#L12","def":{"name":"params","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    struct Params\n      def initialize(request : ::HTTP::Request)\n      \nend\n\n      \n{% if block.body.is_a?(Expressions) %}\n        {% for expression in block.body.expressions %}\n          Onyx::REST::Endpoint.{{ expression }}\n        {% end %}\n      {% else %}{% if block.body.is_a?(Call) %}\n        Onyx::REST::Endpoint.{{ (yield).id }}\n      {% else %}\n        {% raise(\"BUG: Unhandled block body type #{block.body.class_name}\") %}\n      {% end %}{% end %}\n\n    \nend\n\n    protected getter params : Params\n\n    def initialize(@context : ::HTTP::Server::Context)\n      \n{% if @type.overrides?(Onyx::REST::Endpoint, \"initialize\") %}\n        previous_def\n      {% else %}\n        super\n      {% end %}\n\n\n      @params = Params.new(@context.request)\n    \nend\n  \n"}},{"id":"path(&block)-macro","html_id":"path(&amp;block)-macro","name":"path","doc":"Define path params which are usually extracted from the request URL by `Onyx::HTTP::Router`.\nSerialization is powered by [`HTTP::Params::Serializable`](https://github.com/vladfaust/http-params-serializable).\n\nNOTE: It does **not** extracts params from URL by itself, you need to have a router which\nextracts path params into the `request.path_params` variable, for example, `Onyx::HTTP::Router`;\nthis code only *serializes* them.\n\nPath params do not support neither nested nor array values.\n\n```\nstruct GetUser\n  include Onyx::REST::Action\n\n  params do\n    path do\n      type id : Int32\n    end\n  end\n\n  def call\n    pp! params.path.id\n  end\nend\n```\n\n```shell\n> curl http://localhost:5000/users/1\nparams.path.id => 1\n```","summary":"<p>Define path params which are usually extracted from the request URL by <code><a href=\"../../Onyx/HTTP/Router.html\">Onyx::HTTP::Router</a></code>.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/endpoint/params/path.cr#L34","def":{"name":"path","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    class PathParamsError < Onyx::REST::Error(PARAMS_ERROR_CODE)\n      def initialize(message : String, @path : Array(String))\n        super(message)\n      \nend\n\n      def payload\n        \n{path: @path}\n      \nend\n    \nend\n\n    struct PathParams\n      include ::HTTP::Params::Serializable\n\n      \n{% verbatim do %}\n        macro type(argument, **options, &block)\n          {% if block %}\n            {% raise(\"Path params do not support nesting\") %}\n          {% else %}{% if argument.is_a?(TypeDeclaration) %}\n            {% if options.empty? %}{% else %}\n              @[::HTTP::Param({{ **options }})]\n            {% end %}\n\n            getter {{ argument }}\n          {% else %}\n            {% raise(\"BUG: Unhandled argument type #{argument.class_name}\") %}\n          {% end %}{% end %}\n        end\n      {% end %}\n\n\n      \n{{ (yield).id }}\n\n    \nend\n\n    @path = uninitialized PathParams\n    getter path\n\n    def initialize(request : ::HTTP::Request)\n      previous_def\n\n      @path = uninitialized PathParams\n\n      begin\n        @path = PathParams.from_query(request.path_params.join('&')\n{ |(k, v)| \"#{k}=#{v}\" })\n      rescue \nex : ::HTTP::Params::Serializable::Error\n        raise PathParamsError.new(\"Path p\" + \nex.message.not_nil![1..-1], \nex.path)\n      \nend\n    \nend\n  \n"}},{"id":"query(&block)-macro","html_id":"query(&amp;block)-macro","name":"query","doc":"Define query params for serialization powered by [`HTTP::Params::Serializable`](https://github.com/vladfaust/http-params-serializable).\n\n```\nstruct IndexUsers\n  include Onyx::REST::Action\n\n  params do\n    query do\n      type limit : Int32? = 10\n      type offset : Int32? = 0\n    end\n  end\n\n  def call\n    pp! params.query.limit\n    pp! params.query.offset\n  end\nend\n```\n\n```shell\n> curl http://localhost:5000/users?offset=5\nparams.query.limit  => 10\nparams.query.offset => 5\n```","summary":"<p>Define query params for serialization powered by <a href=\"https://github.com/vladfaust/http-params-serializable\" target=\"_blank\"><code>HTTP::Params::Serializable</code></a>.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/endpoint/params/query.cr#L30","def":{"name":"query","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    class QueryParamsError < Onyx::REST::Error(PARAMS_ERROR_CODE)\n      def initialize(message : String, @path : Array(String))\n        super(message)\n      \nend\n\n      def payload\n        \n{path: @path}\n      \nend\n    \nend\n\n    struct QueryParams\n      include ::HTTP::Params::Serializable\n\n      \n{% verbatim do %}\n        macro type(argument, nilable = false, **options, &block)\n          {% if block %}\n            {% if options.empty? %}{% else %}\n              @[::HTTP::Param({{ **options }})]\n            {% end %}\n\n            {% if argument.is_a?(Path) %}\n              {% if argument.names.size > 1\n  raise(\"Cannot declare namespaced nested query parameter\")\nend %}\n\n              getter {{ argument.names.first.underscore }} : {{ argument.names.first.camelcase.id }}{{ if nilable\n  \" | Nil\".id\nend }}\n            {% else %}{% if argument.is_a?(Call) %}\n              getter {{ argument.name.underscore }} : {{ argument.name.camelcase.id }}{{ if nilable\n  \" | Nil\".id\nend }}\n            {% else %}\n              {% raise(\"BUG: Unhandled argument type #{argument.class_name}\") %}\n            {% end %}{% end %}\n\n            {% if argument.is_a?(Path) %}\n              struct {{ argument.names.first.camelcase.id }}\n            {% else %}{% if argument.is_a?(Call) %}\n              struct {{ argument.name.camelcase.id }}\n            {% end %}{% end %}\n              include ::HTTP::Params::Serializable\n\n              {% if block.body.is_a?(Expressions) %}\n                {% for expression in block.body.expressions %}\n                  QueryParams.{{ expression }}\n                {% end %}\n              {% else %}{% if block.body.is_a?(Call) %}\n                QueryParams.{{ (yield).id }}\n              {% else %}\n                {% raise(\"BUG: Unhandled block body type #{block.body.class_name}\") %}\n              {% end %}{% end %}\n            end\n          {% else %}{% if argument.is_a?(TypeDeclaration) %}\n            {% if options.empty? %}{% else %}\n              @[::HTTP::Param({{ **options }})]\n            {% end %}\n\n            getter {{ argument }}\n          {% else %}\n            {% raise(\"BUG: Unhandled argument type #{argument.class_name}\") %}\n          {% end %}{% end %}\n        end\n      {% end %}\n\n\n      \n{{ (yield).id }}\n\n    \nend\n\n    @query = uninitialized QueryParams\n    getter query\n\n    def initialize(request : ::HTTP::Request)\n      previous_def\n\n      @query = uninitialized QueryParams\n\n      begin\n        @query = QueryParams.from_query(request.query.to_s)\n      rescue \nex : ::HTTP::Params::Serializable::Error\n        raise QueryParamsError.new(\"Query p\" + \nex.message.not_nil![1..-1], \nex.path)\n      \nend\n    \nend\n  \n"}}],"types":[]},{"html_id":"github.com/onyxframework/rest/Onyx/REST/Error","path":"Onyx/REST/Error.html","kind":"class","full_name":"Onyx::REST::Error(Code)","name":"Error","abstract":false,"superclass":{"html_id":"github.com/onyxframework/rest/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/onyxframework/rest/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/rest/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-rest/error.cr","line_number":40,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/error.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Onyx/REST","kind":"module","full_name":"Onyx::REST","name":"REST"},"doc":"A REST error which is expected to be rescued upon processing (i.e. by `Onyx::REST::Rescuers::REST`).\nDefine your own errors to handle **expected** situations:\n\n```\nclass UserNotFound < Onyx::REST::Error(404)\n  def initialize(@id : Int32)\n    super(\"User not found with ID #{@id}\")\n  end\n\n  def payload\n    {id: @id}\n  end\nend\n\n# Will return 404 erorr if a user isn't found by the ID\nrouter.get \"/users/:id\" do |env|\n  id = env.request.path_params[\"id\"]?.to_i?\n  raise UserNotFound.new(id) unless Models::User.find?(id)\nend\n```\n\nIn case of error, a plain text response status and body will be\n`404` and `\"404 User not found with ID 42\"` respectively.\n\n`Onyx::REST::Renderers::JSON` takes care of the error's `#payload`, rendering it appropriately:\n\n```json\n{\n  \"error\": {\n    \"class\": \"UserNotFound\",\n    \"message\": \"User not found with ID 42\",\n    \"code\": 404,\n    \"payload\": {\n      \"id\": 42\n    }\n  }\n}\n```","summary":"<p>A REST error which is expected to be rescued upon processing (i.e.</p>","class_methods":[],"constructors":[{"id":"new(message:String)-class-method","html_id":"new(message:String)-class-method","name":"new","doc":"Initialize the error with a *message*.","summary":"<p>Initialize the error with a <em>message</em>.</p>","abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(message : String)","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/error.cr#L56","def":{"name":"new","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Error(Code).allocate\n_.initialize(message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Initialize the error with default message, which is its class name splitted with space\n(e.g. `\"User Not Found\"` for `UserNotFound` error).","summary":"<p>Initialize the error with default message, which is its class name splitted with space (e.g.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/error.cr#L51","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Error(Code).allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"code:Int32-instance-method","html_id":"code:Int32-instance-method","name":"code","doc":"The HTTP status code of this error.","summary":"<p>The HTTP status code of this error.</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/error.cr#L44","def":{"name":"code","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@code"}},{"id":"name-instance-method","html_id":"name-instance-method","name":"name","doc":"The name of the error. By default returns its class name.","summary":"<p>The name of the error.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/error.cr#L45","def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{{ (@type.name.split(\"::\")).last }}"}},{"id":"payload-instance-method","html_id":"payload-instance-method","name":"payload","doc":"The error payload. Usually used by custom renderers, for example,\n`Onyx::REST::Renderers::JSON` calls `error.payload.try &.to_json`.\nReturns `nil` by default.","summary":"<p>The error payload.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/error.cr#L63","def":{"name":"payload","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/rest/Onyx/REST/Renderers","path":"Onyx/REST/Renderers.html","kind":"module","full_name":"Onyx::REST::Renderers","name":"Renderers","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-rest/renderers/json.cr","line_number":11,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/renderers/json.cr"},{"filename":"onyx-rest/renderers/text.cr","line_number":10,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/renderers/text.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Onyx/REST","kind":"module","full_name":"Onyx::REST","name":"REST"},"doc":"HTTP handlers which render content.","summary":"<p>HTTP handlers which render content.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/rest/Onyx/REST/Renderers/JSON","path":"Onyx/REST/Renderers/JSON.html","kind":"class","full_name":"Onyx::REST::Renderers::JSON","name":"JSON","abstract":false,"superclass":{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/rest/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/rest/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-rest/renderers/json.cr","line_number":17,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/renderers/json.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"CONTENT_TYPE","name":"CONTENT_TYPE","value":"\"application/json; charset=utf-8\"","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/onyxframework/rest/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Onyx/REST/Renderers","kind":"module","full_name":"Onyx::REST::Renderers","name":"Renderers"},"doc":"A JSON renderer. If `::HTTP::Server::Response#error` is present, prints it as a JSON object,\notherwise renders `::HTTP::Server::Response#view`, calling `View#to_json` on it.\nIt updates the `\"Content-Type\"` header **only** if error of view is present.\nShould be put after router.\nCalls the next handler if it's present.","summary":"<p>A JSON renderer.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/rest/Onyx/REST/Renderers/Text","path":"Onyx/REST/Renderers/Text.html","kind":"class","full_name":"Onyx::REST::Renderers::Text","name":"Text","abstract":false,"superclass":{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/rest/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/rest/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-rest/renderers/text.cr","line_number":16,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/renderers/text.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"CONTENT_TYPE","name":"CONTENT_TYPE","value":"\"text/plain; charset=utf-8\"","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/onyxframework/rest/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Onyx/REST/Renderers","kind":"module","full_name":"Onyx::REST::Renderers","name":"Renderers"},"doc":"A plain text renderer. If `::HTTP::Server::Response#error` is present, prints it,\notherwise renders `::HTTP::Server::Response#view`, calling `View#to_s` on it.\nIt updates the `\"Content-Type\"` header **only** if error of view is present.\nShould be put after router.\nCalls the next handler if it's present.","summary":"<p>A plain text renderer.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/onyxframework/rest/Onyx/REST/Rescuer","path":"Onyx/REST/Rescuer.html","kind":"class","full_name":"Onyx::REST::Rescuer","name":"Rescuer","abstract":false,"superclass":{"html_id":"github.com/onyxframework/rest/Onyx/HTTP/Rescuers/Silent","kind":"class","full_name":"Onyx::HTTP::Rescuers::Silent","name":"Silent"},"ancestors":[{"html_id":"github.com/onyxframework/rest/Onyx/HTTP/Rescuers/Silent","kind":"class","full_name":"Onyx::HTTP::Rescuers::Silent","name":"Silent"},{"html_id":"github.com/onyxframework/rest/Onyx/HTTP/Rescuer","kind":"module","full_name":"Onyx::HTTP::Rescuer","name":"Rescuer"},{"html_id":"github.com/onyxframework/rest/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/onyxframework/rest/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/rest/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-rest/rescuer.cr","line_number":15,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/rescuer.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Onyx/REST","kind":"module","full_name":"Onyx::REST","name":"REST"},"doc":"An HTTP handler which rescues `REST::Error`.\n\n```\nrenderer = Onyx::REST::Renderers::JSON.new\nrescuer = Onyx::REST::Rescuer.new(renderer)\nhandlers = [rescuer, router, renderer]\n```","summary":"<p>An HTTP handler which rescues <code><a href=\"../../Onyx/REST/Error.html\">REST::Error</a></code>.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"fallback(context,error)-instance-method","html_id":"fallback(context,error)-instance-method","name":"fallback","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":""}],"args_string":"(context, error)","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/rescuer.cr#L16","def":{"name":"fallback","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""},{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.response.status_code = error.code\n((context.response << error.code) << \" \") << error.message\n"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/rest/Onyx/REST/View","path":"Onyx/REST/View.html","kind":"module","full_name":"Onyx::REST::View","name":"View","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-rest/view.cr","line_number":43,"url":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/view.cr"}],"repository_name":"github.com/onyxframework/rest","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/rest/Onyx/REST","kind":"module","full_name":"Onyx::REST","name":"REST"},"doc":"A reusable REST view. Views are usually rendered in `Renderers`. You are not required to\nuse views in `Action`s, as you still have an access to the context, but it's a good\npractice to split business logic (actions) and rendering (views). You also can use views\noutside of actions, you'd just need to set `::HTTP::Server::Response#view` variable:\n\n```\nstruct UserView\n  include Onyx::REST::View\n\n  def initialize(@user : User)\n  end\n\n  json do\n    object do\n      field \"id\", @user.id\n      field \"name\", @user.name\n    end\n  end\nend\n\nrouter.get \"/user/:id\" do |env|\n  user = Onyx.query(User.where(id: env.request.path_params[\"id\"].to_i))\n  env.response.view = UserView.new(user)\nend\n\nstruct GetUser\n  include Onyx::REST::Action\n\n  params do\n    path do\n      type id : Int32\n    end\n  end\n\n  def call\n    user = Onyx.query(User.where(id: params.path.id))\n    return UserView.new(user)\n  end\nend\n```\n\nDo not forget to include a `Renderer` into your handlers stack to actually render views.","summary":"<p>A reusable REST view.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"json(&block)-macro","html_id":"json(&amp;block)-macro","name":"json","doc":"Define a `#to_json` method with builder to be rendered with `Renderers::JSON`.\n\nAll methods within the block are called on a JSON builder (it uses `with builder yield`\nunder the hood). See [`JSON::Builder` docs](https://crystal-lang.org/api/latest/JSON/Builder.html):\n\n```\nstruct UserView\n  include Onyx::REST::View\n\n  def initialize(@user : User)\n  end\n\n  json do\n    object do                  # builder.object do\n      field \"id\", @user.id     # builder.field(\"id\", @user.id)\n      field \"name\", @user.name # ditto\n    end\n  end\nend\n\nUserView.new(user).to_json # => {\"id\": 1, \"name\": \"John\"}\n```","summary":"<p>Define a <code>#to_json</code> method with builder to be rendered with <code><a href=\"../../Onyx/REST/Renderers/JSON.html\">Renderers::JSON</a></code>.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/view.cr#L66","def":{"name":"json","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    def to_json\n      io = IO::Memory.new\n      builder = JSON::Builder.new(io)\n\n      builder.document do\n        to_json(builder)\n      \nend\n\n      io.to_s\n    \nend\n\n    def to_json(builder)\n      build_json(builder) do\n        \n{{ yield }}\n\n      \nend\n    \nend\n\n    def build_json(builder)\n      with builder yield\n    \nend\n  \n"}},{"id":"json(value)-macro","html_id":"json(value)-macro","name":"json","doc":"Define a `#to_json` method with an arbitrary object to be rendered with `Renderers::JSON`.\nThis object will be invoked with `#to_json`.\n\n```\nstruct UserView\n  include Onyx::REST::View\n\n  def initialize(@user : User)\n  end\n\n  # Would call `{id: @user.id, name: @user.name}.to_json`\n  json({id: @user.id, name: @user.name})\nend\n\nUserView.new(user).to_json # => {\"id\": 1, \"name\": \"John\"}\n```","summary":"<p>Define a <code>#to_json</code> method with an arbitrary object to be rendered with <code><a href=\"../../Onyx/REST/Renderers/JSON.html\">Renderers::JSON</a></code>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/view.cr#L105","def":{"name":"json","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    def to_json\n      io = IO::Memory.new\n      builder = JSON::Builder.new(io)\n\n      builder.document do\n        to_json(builder)\n      \nend\n\n      io.to_s\n    \nend\n\n    def to_json(builder)\n      (\n{{ value }}\n).to_json(builder)\n    \nend\n  \n"}},{"id":"text(&block)-macro","html_id":"text(&amp;block)-macro","name":"text","doc":"Define a `#to_text` method to be rendered with `Renderers::Text`.\n\n```\nstruct UserView\n  include Onyx::REST::View\n\n  def initialize(@user : User)\n  end\n\n  text do\n    \"id: #{@user.id}, name: #{@user.name}\"\n  end\nend\n\nUserView.new(user).to_text # => \"id: 1, name: John\"\n```","summary":"<p>Define a <code>#to_text</code> method to be rendered with <code><a href=\"../../Onyx/REST/Renderers/Text.html\">Renderers::Text</a></code>.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/view.cr#L138","def":{"name":"text","args":[],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    def to_text\n      io = IO::Memory.new\n      to_text(io)\n      io.to_s\n    \nend\n\n    def to_text(io)\n      io << (\n{{ yield }}\n)\n    \nend\n  \n"}},{"id":"text(value)-macro","html_id":"text(value)-macro","name":"text","doc":"Define a `#to_text` method with an arbitrary object to be rendered with `Renderers::Text`.\nThis object will be invoked with `#to_s`.\n\n```\nstruct UserView\n  include Onyx::REST::View\n\n  def initialize(@user : User)\n  end\n\n  text({id: @user.id, name: @user.name})\nend\n\nUserView.new(user).to_text # => \"{id: 1, name: \\\"John\\\"}\"\n```","summary":"<p>Define a <code>#to_text</code> method with an arbitrary object to be rendered with <code><a href=\"../../Onyx/REST/Renderers/Text.html\">Renderers::Text</a></code>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","source_link":"https://github.com/onyxframework/rest/blob/6aa4962e0eb209e17c34d1a9d5c7c5b7b27637f7/src/onyx-rest/view.cr#L165","def":{"name":"text","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    def to_text\n      io = IO::Memory.new\n      to_text(io)\n      io.to_s\n    \nend\n\n    def to_text(io)\n      value = (\n{{ value }}\n)\n      io << value\n    \nend\n  \n"}}],"types":[]}]}]}]}}